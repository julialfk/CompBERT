{"lowest": [{"prediction": 0.0905512273311615, "code": "    public boolean isInputFileChanged() {\n      return inputFileChanged;\n    }", "nl_input": "sorted merge join\nIf the input tables are sorted on the join key, and a mapjoin is being performed, it is useful to exploit the sorted properties of the table.\nThis can lead to substantial cpu savings - this needs to work across bucketed map joins also.\n\nSince, sorted properties of a table are not enforced currently, a new parameter can be added to specify to use the sort-merge join.\n", "code_len": 18, "nl_len": 90, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/ExecMapper.java"}, {"prediction": 0.09435192495584488, "code": "  /**\n   * return the multimap store of the given scanner. not immutable\n   */\n  public Multimap<String, String> get(final Scanner scanner) {\n    return get(scanner.getName());\n  }", "nl_input": "Exclude packages from ValidatorFactory generation\nIt is not possible to specify packages to be ignored during the generation of the ValidatorFactory", "code_len": 49, "nl_len": 24, "path": "errai-reflections/reflections/src/main/java/org/jboss/errai/reflections/Store.java"}, {"prediction": 0.10025249421596527, "code": "    public void setInputFileChanged(boolean inputFileChanged) {\n      this.inputFileChanged = inputFileChanged;\n    }", "nl_input": "sorted merge join\nIf the input tables are sorted on the join key, and a mapjoin is being performed, it is useful to exploit the sorted properties of the table.\nThis can lead to substantial cpu savings - this needs to work across bucketed map joins also.\n\nSince, sorted properties of a table are not enforced currently, a new parameter can be added to specify to use the sort-merge join.\n", "code_len": 28, "nl_len": 90, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/ExecMapper.java"}, {"prediction": 0.10183543711900711, "code": "  private static void updateFrameworkProperties(final Map<String, String> frameworkProps, final String key, final String value) {\n    if (frameworkProps.containsKey(key)) {\n      if (isListValuedProperty(key)) {\n        // TODO should validate that different values don't conflict\n        final String oldValue = frameworkProps.get(key);\n        final String newValue = oldValue + \" \" + value;\n        log.debug(\"Merging property {} = {}\", key, newValue);\n        frameworkProps.put(key, newValue);\n      } else {\n        log.warn(\"The property {} has been set multiple times.\", key);\n        frameworkProps.put(key, value);\n      }\n    } else {\n      frameworkProps.put(key, value);\n    }\n  }", "nl_input": "Allow package wildcard usage for filterting marshalling classes\nAllow using package wildcard filtering for including and excluding serializable types.\r\n\r\nEx:\r\nerrai.marshalling.serializableTypes=org.foo.client.* \\\r\n                                    org.abcinc.model.client.*\r\n\r\n\r\nerrai.marshalling.nonserializableTypes=org.foo.client.* \\\r\n                                       org.abcinc.model.client.*", "code_len": 174, "nl_len": 97, "path": "errai-config/src/main/java/org/jboss/errai/config/rebind/EnvUtil.java"}, {"prediction": 0.10358127951622009, "code": "  /**\n   * Implements the getName function for the Node Interface.\n   * \n   * @return the name of the operator\n   */\n  @Override\n  public String getName() {\n    return \"MAPJOIN\";\n  }", "nl_input": "sorted merge join\nIf the input tables are sorted on the join key, and a mapjoin is being performed, it is useful to exploit the sorted properties of the table.\nThis can lead to substantial cpu savings - this needs to work across bucketed map joins also.\n\nSince, sorted properties of a table are not enforced currently, a new parameter can be added to specify to use the sort-merge join.\n", "code_len": 51, "nl_len": 90, "path": "ql/src/java/org/apache/hadoop/hive/ql/exec/SMBMapJoinOperator.java"}], "q1": [{"prediction": 0.38173165917396545, "code": "  private static DFSClient getDFSClient(final UserGroupInformation user,\n                                        final InetSocketAddress addr,\n                                        final Configuration conf\n                                        ) throws IOException,\n                                                 InterruptedException {\n    return\n      user.doAs(new PrivilegedExceptionAction<DFSClient>() {\n        public DFSClient run() throws IOException {\n          return new DFSClient(addr, conf);\n        }\n      });\n  }", "nl_input": "Allow browsing the filesystem over http using delegation tokens\nAssuming the user authenticates to the NameNode in the browser, allow them to browse the file system by adding a delegation token the the url when it is redirected to a datanode.", "code_len": 87, "nl_len": 53, "path": "src/java/org/apache/hadoop/hdfs/server/datanode/DatanodeJspHelper.java"}, {"prediction": 0.38202565908432007, "code": "\tpublic double getDouble(String parameterName) throws SQLException {\n\t\treturn DataTypeTransformer.getDouble(getObject(parameterName));\n\t}", "nl_input": "add support to MMCallableStatement for named parameter methods\nDefect Tracker #20152: Now that we support named parameters for procedure, we should implement the setter methods in CallableStatement having to do with named parameters.\n\nBe sure to update the list of Unsupported Methods in our JDBC driver, wherever that list is.  Last report, it was sent to Warren to be added as an appendix to some documentation.", "code_len": 28, "nl_len": 88, "path": "client/src/main/java/org/teiid/jdbc/CallableStatementImpl.java"}, {"prediction": 0.38205865025520325, "code": "    public String getRepositoryId()\n    {\n        return repositoryId;\n    }", "nl_input": "add advanced search options\nwe need to add the ability to query on particular fields and across some ranges.", "code_len": 19, "nl_len": 21, "path": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/SearchAction.java"}, {"prediction": 0.3825554847717285, "code": "    /**\n     * @param clause Clause to check recursively\n     * @return True if tree has outer joins, false otherwise\n     */\n    static boolean hasOuterJoins(FromClause clause) {\n    \tif (clause instanceof SubqueryFromClause) {\n    \t\tif (((SubqueryFromClause)clause).isLateral()) { \n    \t\t\treturn true;\n    \t\t}\n    \t\treturn false;\n    \t}\n        if(clause instanceof UnaryFromClause) {\n            return false;\n        }\n        JoinPredicate jp = (JoinPredicate) clause;\n        if(jp.getJoinType().isOuter()) {\n            return true;\n        }\n        // Walk children\n        boolean childHasOuter = hasOuterJoins(jp.getLeftClause());\n        if(childHasOuter) {\n            return true;\n        }\n        return hasOuterJoins(jp.getRightClause());\n    }", "nl_input": "Support Lateral join and procedure pushdown\nLateral joins of the form:\n\nselect ... from x inner join lateral (... x.col ...) as y on ...\n\nHave been supported for some time, but not the ability to push them to source.\n\nA highly related scenario is to be able to push procedures used directly or in lateral joins with the rest of their plan:\n\nselect ... from x inner join lateral (call proc(.. x.col ...)) as y on ...", "code_len": 202, "nl_len": 109, "path": "engine/src/main/java/org/teiid/query/optimizer/relational/rules/RuleCollapseSource.java"}, {"prediction": 0.3830324709415436, "code": "  /**\n   * @param className\n   *          The class name to be matched.\n   * @return True iff the class name matches a package filter.\n   */\n  public boolean matches(final String className) {\n    for (final String pattern : filters) {\n      boolean res;\n      if (pattern.endsWith(\"*\")) {\n        res = className.startsWith(pattern.substring(0, pattern.length()-1));\n      }\n      else {\n        res = className.equals(pattern);\n      }\n      if (res) {\n        return true;\n      }\n    }\n\n    return false;\n  }", "nl_input": "Exclude packages from ValidatorFactory generation\nIt is not possible to specify packages to be ignored during the generation of the ValidatorFactory", "code_len": 141, "nl_len": 24, "path": "errai-reflections/reflections/src/main/java/org/jboss/errai/reflections/util/SimplePackageFilter.java"}], "median": [{"prediction": 0.5741430521011353, "code": "  void close() throws IOException {\n    encoder.flush();\n    out.close();\n  }", "nl_input": "Modify JobHistory to use Avro for serialization instead of raw JSON\nMAPREDUCE-157 modifies JobHistory to log events using Json Format.  This can be modified to use Avro instead. ", "code_len": 22, "nl_len": 42, "path": "src/java/org/apache/hadoop/mapreduce/jobhistory/EventWriter.java"}, {"prediction": 0.5742442011833191, "code": "    public double getCacheHitRate()\n    {\n        return cache.getHitRate();\n    }", "nl_input": "caching repository query interface\nneed to be able to query the repository to see if artifacts exist, what versions are available, etc. This needs to interoperate with the indexing, and where applicable should cache information, balancing the need to keep a low memory overhead but avoid repetitive disk reads on metadata files.", "code_len": 22, "nl_len": 65, "path": "maven-repository-reports-standard/src/main/java/org/apache/maven/repository/reporting/CachedRepositoryQueryLayer.java"}, {"prediction": 0.5743911862373352, "code": "        @Override\n        public Object newInstance(String fqcn, ClassLoader classLoader) throws IllegalAccessException, InvocationTargetException, NamingException, InstantiationException, ClassNotFoundException {\n            return Class.forName(fqcn, false, classLoader).newInstance();\n        }", "nl_input": "Basic HTTP Gateway\nCreate support for a basic HTTP gateway.", "code_len": 52, "nl_len": 12, "path": "jboss-as7/extension/src/main/java/org/switchyard/as7/extension/http/JBossWebEndpointPublisher.java"}, {"prediction": 0.5747783780097961, "code": "      private void ensureQueueNameIsMutable() {\n        if (!((bitField0_ & 0x00000001) == 0x00000001)) {\n          queueName_ = new org.apache.hadoop.hbase.shaded.com.google.protobuf.LazyStringArrayList(queueName_);\n          bitField0_ |= 0x00000001;\n         }\n      }", "nl_input": "Shell tool to clear compaction queues\nscenario\uff1a\n1. Compact a table by mistake\n2. Compact is not completed within the specified time period\n\nIn this case, clearing the queue is a better choice, so as not to affect the stability of the cluster", "code_len": 77, "nl_len": 55, "path": "hbase-protocol-shaded/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/generated/AdminProtos.java"}, {"prediction": 0.5748048424720764, "code": "    public Object getFieldValue(int fieldID) {\n      switch (fieldID) {\n      case ID:\n        return new Integer(getId());\n\n      case NBROWS:\n        return new Integer(getNbRows());\n\n      default:\n        throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n      }\n    }", "nl_input": "Thrift should support next(nbRow) like functionality\nCurrently the java hbase api support calling next(number_of_rows) where as the thrift interface doesn't. We have a patch to get this working internally.", "code_len": 77, "nl_len": 46, "path": "src/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java"}], "q3": [{"prediction": 0.7338795065879822, "code": "  private static int getBufferSize(Configuration conf) {\n    return conf.getInt(IO_COMPRESSION_CODEC_ZSTD_BUFFER_SIZE_KEY,\n        IO_COMPRESSION_CODEC_ZSTD_BUFFER_SIZE_DEFAULT);\n  }", "nl_input": "Add Codec for ZStandard Compression\nZStandard: https://github.com/facebook/zstd has been used in production for 6 months by facebook now.  v1.0 was recently released.  Create a codec for this library.  ", "code_len": 51, "nl_len": 51, "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/ZStandardCodec.java"}, {"prediction": 0.7342775464057922, "code": "    @Override\n    public void reset() {\n        _reference.resetMessageMetrics();\n    }", "nl_input": "Add JMX support to core admin\nRegister the EventManager, created by the ServiceDomainManager, with JMX so that it can be accessed by applications outside of switchyard, and used to observe events.\n", "code_len": 22, "nl_len": 44, "path": "admin/src/main/java/org/switchyard/admin/mbean/internal/ManagedComponentReference.java"}, {"prediction": 0.734341025352478, "code": "      public org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.ClearCompactionQueuesRequest buildPartial() {\n        org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.ClearCompactionQueuesRequest result = new org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.ClearCompactionQueuesRequest(this);\n        int from_bitField0_ = bitField0_;\n        if (((bitField0_ & 0x00000001) == 0x00000001)) {\n          queueName_ = queueName_.getUnmodifiableView();\n          bitField0_ = (bitField0_ & ~0x00000001);\n        }\n        result.queueName_ = queueName_;\n        onBuilt();\n        return result;\n      }", "nl_input": "Shell tool to clear compaction queues\nscenario\uff1a\n1. Compact a table by mistake\n2. Compact is not completed within the specified time period\n\nIn this case, clearing the queue is a better choice, so as not to affect the stability of the cluster", "code_len": 173, "nl_len": 55, "path": "hbase-protocol-shaded/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/generated/AdminProtos.java"}, {"prediction": 0.7344977259635925, "code": "    /**\n\n     * Copy an XML event stream.\n\n     * @param reader The event reader.\n\n     * @param writer The event writer.\n\n     * @param omitDoc if true, ignore start/end document events.\n\n     * @throws XMLStreamException For errors writing to the XML event writer.\n\n     */\n\n    public static void copyXMLEventStream(final XMLEventReader reader, final XMLEventWriter writer, final boolean omitDoc)\n\n        throws XMLStreamException {\n\n        if (omitDoc) {\n\n            while (reader.hasNext()) {\n\n                final XMLEvent event = reader.nextEvent();\n\n                final int type = event.getEventType();\n\n                if ((type != XMLStreamConstants.START_DOCUMENT)\n\n                    && (type != XMLStreamConstants.END_DOCUMENT)) {\n\n                    writer.add(event);\n\n                }\n\n            }\n\n        } else {\n\n            writer.add(reader);\n\n        }\n\n        writer.flush();\n\n    }", "nl_input": "Basic SOAP Gateway\nCreate a basic SOAP Gateway that is capable of exposing SwitchYard services over SOAP/HTTP and also registering external SOAP/HTTP endpoints as local services on the bus.  Note that this is a single component and not two separate pieces (i.e. one component to send and one to receive).", "code_len": 234, "nl_len": 65, "path": "soap/src/main/java/org/switchyard/soap/util/XMLHelper.java"}, {"prediction": 0.7346807718276978, "code": "\tpublic void setVDBRepository(VDBRepository repo) {\n\t\tthis.vdbRepository = repo;\n\t}", "nl_input": "Provide a solution to  'merge' two VDBs\nBased on the conversation on this thread\n\nhttp://lists.jboss.org/pipermail/teiid-designer-dev/2010-March/000212.html\n\nTeiid and Designer needs a mechanism, where child VDB can be merged into parent VDB. Designer can use this mechanism to  provide the preview functionality.", "code_len": 28, "nl_len": 85, "path": "jboss-integration/src/main/java/org/teiid/jboss/deployers/RuntimeEngineDeployer.java"}], "highest": [{"prediction": 0.9490309357643127, "code": "  @Override\n  public void analyzeIndexDefinition(Table baseTable, Index index,\n      Table indexTable) throws HiveException {\n    StorageDescriptor storageDesc = index.getSd();\n    if (this.usesIndexTable() && indexTable != null) {\n      StorageDescriptor indexTableSd = storageDesc.deepCopy();\n      List<FieldSchema> indexTblCols = indexTableSd.getCols();\n      FieldSchema bucketFileName = new FieldSchema(\"_bucketname\", \"string\", \"\");\n      indexTblCols.add(bucketFileName);\n      FieldSchema offSets = new FieldSchema(\"_offset\", \"bigint\", \"\");\n      indexTblCols.add(offSets);\n      FieldSchema bitmaps = new FieldSchema(\"_bitmaps\", \"array<bigint>\", \"\");\n      indexTblCols.add(bitmaps);\n      indexTable.setSd(indexTableSd);\n    }\n  }", "nl_input": "Implement bitmap indexing in Hive\nImplement bitmap index handler to complement compact indexing.", "code_len": 194, "nl_len": 15, "path": "ql/src/java/org/apache/hadoop/hive/ql/index/bitmap/BitmapIndexHandler.java"}, {"prediction": 0.9519968628883362, "code": "\tvoid init(IterationRuntimeContext context) {\n\t\tthis.runtimeContext = context;\n\t\tthis.outVertex = new Vertex<K, VV>();\n\t\tthis.outMsg = new Tuple2<K, Message>();\n\t\tthis.edgeIterator = new EdgesIterator<K, EV>();\n\t}", "nl_input": "Add a Pregel iteration abstraction to Gelly\nThis issue proposes to add a Pregel/Giraph-like iteration abstraction to Gelly that will only expose one UDF to the user, {{compute()}}. {{compute()}} will have access to both the vertex state and the incoming messages, and will be able to produce messages and update the vertex value.", "code_len": 72, "nl_len": 76, "path": "flink-libraries/flink-gelly/src/main/java/org/apache/flink/graph/pregel/ComputeFunction.java"}, {"prediction": 0.9527264833450317, "code": "  /**\n   * Returns the column at `ordinal`.\n   */\n  public ColumnVector column(int ordinal) { return columns[ordinal]; }", "nl_input": "Implement columnar in memory representation\nTungsten can benefit from having a columnar in memory representation which can provide a few benefits:\n - Enables vectorized execution\n - Improves memory efficiency (memory is more tightly packed)\n - Enables cheap serialization/zero-copy transfer with third party components (e.g. numpy)\n ", "code_len": 32, "nl_len": 75, "path": "sql/core/src/main/java/org/apache/spark/sql/execution/vectorized/ColumnarBatch.java"}, {"prediction": 0.9561983942985535, "code": "    /**\n     * Override method to utilize the cache\n     */\n    protected Metadata getMetadata( Artifact artifact )\n        throws RepositoryQueryLayerException\n    {\n        Metadata metadata = null;\n        \n        if ( cacheMetadata.containsKey( artifact.getId() ) )\n        {\n            cacheHits++;\n            metadata = (Metadata) cacheMetadata.get( artifact.getId() );\n        }\n        else\n        {\n            metadata = super.getMetadata( artifact );\n            cacheMetadata.put( artifact.getId(), metadata );\n        }\n        \n        return metadata;\n    }", "nl_input": "caching repository query interface\nneed to be able to query the repository to see if artifacts exist, what versions are available, etc. This needs to interoperate with the indexing, and where applicable should cache information, balancing the need to keep a low memory overhead but avoid repetitive disk reads on metadata files.", "code_len": 127, "nl_len": 65, "path": "maven-repository-reports-standard/src/main/java/org/apache/maven/repository/reporting/CachedRepositoryQueryLayer.java"}, {"prediction": 0.9607883095741272, "code": "    /**\n     * Override method to utilize the cache\n     */\n    protected Metadata getMetadata( Artifact artifact )\n        throws RepositoryQueryLayerException\n    {\n        Metadata metadata = (Metadata) cache.get( artifact.getId() );\n        \n        if ( metadata == null )\n        {\n            metadata = super.getMetadata( artifact );\n            cache.put( artifact.getId(), metadata );\n        }\n        \n        return metadata;\n    }", "nl_input": "caching repository query interface\nneed to be able to query the repository to see if artifacts exist, what versions are available, etc. This needs to interoperate with the indexing, and where applicable should cache information, balancing the need to keep a low memory overhead but avoid repetitive disk reads on metadata files.", "code_len": 98, "nl_len": 65, "path": "maven-repository-reports-standard/src/main/java/org/apache/maven/repository/reporting/CachedRepositoryQueryLayer.java"}]}