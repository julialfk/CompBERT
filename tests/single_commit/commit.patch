From a55fd046961ac4f3f11e2502a7d6f98c799e9ed0 Mon Sep 17 00:00:00 2001
From: John Dennis Casey <jdcasey@apache.org>
Date: Mon, 13 Jun 2005 14:49:49 +0000
Subject: [PATCH] o Adding ${plugin.*} expression support for mojos.
 Specifically, added support for ${plugin.artifacts} to retrieve the plugin's
 classpath artifacts. NOTE: There may be artifacts which are FILTERED by the
 resolution process, since they are provided in the maven distro. NOT SURE HOW
 BEST TO RESOLVE THAT...but it'll cause problems with people forking certain
 mojos, undoubtedly.

May resolve: MNG-455



git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@190413 13f79535-47bb-0310-9956-ffa450edef68
---
 .../maven/plugin/coreit/CoreItMojo.java       |  7 +++
 .../maven/plugin/DefaultPluginManager.java    | 12 +++++-
 .../PluginParameterExpressionEvaluator.java   | 30 ++++++++++++-
 ...luginParameterExpressionEvaluatorTest.java | 43 +++++++++++++++----
 .../plugin/descriptor/PluginDescriptor.java   | 12 ++++++
 5 files changed, 93 insertions(+), 11 deletions(-)

diff --git a/maven-core-it-plugin/src/main/java/org/apache/maven/plugin/coreit/CoreItMojo.java b/maven-core-it-plugin/src/main/java/org/apache/maven/plugin/coreit/CoreItMojo.java
index 67ce6746b38..fa2869bd563 100644
--- a/maven-core-it-plugin/src/main/java/org/apache/maven/plugin/coreit/CoreItMojo.java
+++ b/maven-core-it-plugin/src/main/java/org/apache/maven/plugin/coreit/CoreItMojo.java
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.File;
 import java.io.FileWriter;
+import java.util.List;
 
 /**
  * @goal touch
@@ -39,6 +40,12 @@ public class CoreItMojo
      */
     private String outputDirectory;
 
+    /** Test setting of plugin-artifacts on the PluginDescriptor instance.
+     * @parameter expression="${plugin.artifacts}"
+     * @required
+     */
+    private List pluginArtifacts;
+
     /**
      * @parameter expression="target/test-basedir-alignment"
      */
diff --git a/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java b/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
index dd283ff9a8e..e088b316737 100644
--- a/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
+++ b/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
@@ -185,7 +185,6 @@ public PluginDescriptor verifyPlugin( String groupId, String artifactId, String
         // TODO: this should be possibly outside
         if ( version == null )
         {
-
             Plugin pluginConfig = null;
 
             for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext(); )
@@ -299,6 +298,12 @@ protected void addPlugin( String pluginKey, Artifact pluginArtifact, MavenProjec
             }
 
             container.createChildContainer( pluginKey, files, Collections.EMPTY_MAP, Collections.singletonList( this ) );
+            
+            // this plugin's descriptor should have been discovered by now, so we should be able to circle
+            // around and set the artifacts.
+            PluginDescriptor addedPlugin = (PluginDescriptor) pluginDescriptors.get( pluginKey );
+
+            addedPlugin.setArtifacts( new ArrayList( resolved.values() ) );
         }
         finally
         {
@@ -413,8 +418,11 @@ public void executeMojo( MavenSession session, GoalInstance goalInstance )
             //            PlexusConfiguration mergedConfiguration = mergeConfiguration( pomConfiguration,
             //                                                                          mojoDescriptor.getConfiguration() );
 
-            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, pathTranslator,
+            ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session,
+                                                                                              pluginDescriptor,
+                                                                                              pathTranslator,
                                                                                               getLogger() );
+            
             checkRequiredParameters( mojoDescriptor, mergedConfiguration, expressionEvaluator, plugin );
 
             populatePluginFields( plugin, mojoDescriptor, mergedConfiguration, pluginContainer, expressionEvaluator );
diff --git a/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java b/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
index d39d13c773f..000c569d041 100644
--- a/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
+++ b/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java
@@ -17,6 +17,7 @@
  */
 
 import org.apache.maven.execution.MavenSession;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.path.PathTranslator;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;
 import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluator;
@@ -39,9 +40,12 @@ public class PluginParameterExpressionEvaluator
 
     private final Logger logger;
 
-    public PluginParameterExpressionEvaluator( MavenSession context, PathTranslator pathTranslator, Logger logger )
+    private final PluginDescriptor pluginDescriptor;
+
+    public PluginParameterExpressionEvaluator( MavenSession context, PluginDescriptor pluginDescriptor, PathTranslator pathTranslator, Logger logger )
     {
         this.context = context;
+        this.pluginDescriptor = pluginDescriptor;
         this.pathTranslator = pathTranslator;
         this.logger = logger;
     }
@@ -108,6 +112,30 @@ else if ( expression.startsWith( "project" ) )
                                                          e );
             }
         }
+        else if ( expression.startsWith( "plugin" ) )
+        {
+            try
+            {
+                int pathSeparator = expression.indexOf( "/" );
+
+                if ( pathSeparator > 0 )
+                {
+                    String pathExpression = expression.substring( 1, pathSeparator );
+                    value = ReflectionValueExtractor.evaluate( pathExpression, pluginDescriptor );
+                    value = value + expression.substring( pathSeparator );
+                }
+                else
+                {
+                    value = ReflectionValueExtractor.evaluate( expression.substring( 1 ), pluginDescriptor );
+                }
+            }
+            catch ( Exception e )
+            {
+                // TODO: don't catch exception
+                throw new ExpressionEvaluationException( "Error evaluating plugin parameter expression: " + expression,
+                                                         e );
+            }
+        }
         else if ( "settings".equals( expression ) )
         {
             value = context.getSettings();
diff --git a/maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java b/maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
index 914caa1a4d8..01c673dfc14 100644
--- a/maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
+++ b/maven-core/src/test/java/org/apache/maven/plugin/PluginParameterExpressionEvaluatorTest.java
@@ -16,12 +16,15 @@
  * limitations under the License.
  */
 
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.DefaultArtifact;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;
 import org.apache.maven.execution.MavenSession;
 import org.apache.maven.model.Build;
 import org.apache.maven.model.Model;
 import org.apache.maven.monitor.event.DefaultEventDispatcher;
+import org.apache.maven.plugin.descriptor.PluginDescriptor;
 import org.apache.maven.project.MavenProject;
 import org.apache.maven.settings.Settings;
 import org.codehaus.plexus.PlexusContainer;
@@ -30,6 +33,7 @@
 
 import java.io.File;
 import java.util.Collections;
+import java.util.List;
 
 /**
  * @author <a href="mailto:jason@maven.org">Jason van Zyl </a>
@@ -53,7 +57,7 @@ public void testValueExtractionWithAPomValueContainingAPath()
         MavenProject project = new MavenProject( model );
         project.setFile( new File( "pom.xml" ).getCanonicalFile() );
 
-        ExpressionEvaluator expressionEvaluator = createExpressionEvaluator( project );
+        ExpressionEvaluator expressionEvaluator = createExpressionEvaluator( project, null );
 
         Object value = expressionEvaluator.evaluate( "${project.build.directory}/classes" );
         String actual = new File( value.toString() ).getCanonicalPath();
@@ -61,8 +65,7 @@ public void testValueExtractionWithAPomValueContainingAPath()
         assertEquals( expected, actual );
     }
 
-    private static MavenSession createSession( MavenProject project, PlexusContainer container,
-                                               ArtifactRepository repo )
+    private static MavenSession createSession( MavenProject project, PlexusContainer container, ArtifactRepository repo )
     {
         return new MavenSession( project, container, new Settings(), repo, new DefaultEventDispatcher(),
                                  Collections.EMPTY_LIST );
@@ -71,7 +74,7 @@ private static MavenSession createSession( MavenProject project, PlexusContainer
     public void testLocalRepositoryExtraction()
         throws Exception
     {
-        ExpressionEvaluator expressionEvaluator = createExpressionEvaluator( createDefaultProject() );
+        ExpressionEvaluator expressionEvaluator = createExpressionEvaluator( createDefaultProject(), null );
         Object value = expressionEvaluator.evaluate( "${localRepository}" );
 
         assertEquals( "local", ( (ArtifactRepository) value ).getId() );
@@ -87,19 +90,43 @@ public void testTwoExpressions()
         Model model = new Model();
         model.setBuild( build );
 
-        ExpressionEvaluator expressionEvaluator = createExpressionEvaluator( new MavenProject( model ) );
+        ExpressionEvaluator expressionEvaluator = createExpressionEvaluator( new MavenProject( model ), null );
 
         Object value = expressionEvaluator.evaluate( "${project.build.directory}/${project.build.finalName}" );
 
         assertEquals( "expected-directory/expected-finalName", value );
     }
 
+    public void testShouldExtractPluginArtifacts()
+        throws Exception
+    {
+        PluginDescriptor pd = new PluginDescriptor();
+
+        Artifact artifact = new DefaultArtifact( "testGroup", "testArtifact", "1.0", Artifact.SCOPE_COMPILE, "jar" );
+
+        pd.setArtifacts( Collections.singletonList( artifact ) );
+
+        ExpressionEvaluator ee = createExpressionEvaluator( createDefaultProject(), pd );
+
+        Object value = ee.evaluate( "${plugin.artifacts}" );
+
+        assertTrue( value instanceof List );
+
+        List artifacts = (List) value;
+
+        assertEquals( 1, artifacts.size() );
+
+        Artifact result = (Artifact) artifacts.get( 0 );
+
+        assertEquals( "testGroup", result.getGroupId() );
+    }
+
     private MavenProject createDefaultProject()
     {
         return new MavenProject( new Model() );
     }
 
-    private ExpressionEvaluator createExpressionEvaluator( MavenProject project )
+    private ExpressionEvaluator createExpressionEvaluator( MavenProject project, PluginDescriptor pluginDescriptor )
         throws Exception
     {
         ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup( ArtifactRepositoryLayout.ROLE,
@@ -110,8 +137,8 @@ private ExpressionEvaluator createExpressionEvaluator( MavenProject project )
         PlexusContainer container = getContainer();
         MavenSession session = createSession( project, container, repo );
 
-        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, null,
-                                                                                          container.getLogger() );
+        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, pluginDescriptor,
+                                                                                          null, container.getLogger() );
         return expressionEvaluator;
     }
 }
\ No newline at end of file
diff --git a/maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java b/maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
index e081947190c..e1d85373c1b 100644
--- a/maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
+++ b/maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java
@@ -40,6 +40,8 @@ public class PluginDescriptor
     private String source;
 
     private boolean inheritedByDefault = true;
+    
+    private List artifacts;
 
     // ----------------------------------------------------------------------
     //
@@ -189,6 +191,16 @@ public void setInheritedByDefault( boolean inheritedByDefault )
     {
         this.inheritedByDefault = inheritedByDefault;
     }
+    
+    public List getArtifacts()
+    {
+        return artifacts;
+    }
+
+    public void setArtifacts( List artifacts )
+    {
+        this.artifacts = artifacts;
+    }
 
     public boolean equals( Object object )
     {
