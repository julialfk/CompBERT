"{\"sha\":\"c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"node_id\":\"MDY6Q29tbWl0MTg2MjcxMjY6YzMwM2JhNzhjNzBhMjIwYzU0YjA1MDFiZjUyMzlmNTg3MGQwM2FkOQ==\",\"commit\":{\"author\":{\"name\":\"Maria Odea B. Ching\",\"email\":\"oching@apache.org\",\"date\":\"2008-10-20T05:59:47Z\"},\"committer\":{\"name\":\"Maria Odea B. Ching\",\"email\":\"oching@apache.org\",\"date\":\"2008-10-20T05:59:47Z\"},\"message\":\"merged MRM-124 branch (-r706118) - archiva web services\\n\\n\\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@706126 13f79535-47bb-0310-9956-ffa450edef68\",\"tree\":{\"sha\":\"6d95b53c96b67ccf0ddba0054080440e49d2d42b\",\"url\":\"https://api.github.com/repos/apache/archiva/git/trees/6d95b53c96b67ccf0ddba0054080440e49d2d42b\"},\"url\":\"https://api.github.com/repos/apache/archiva/git/commits/c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"comment_count\":0,\"verification\":{\"verified\":false,\"reason\":\"unsigned\",\"signature\":null,\"payload\":null}},\"url\":\"https://api.github.com/repos/apache/archiva/commits/c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"html_url\":\"https://github.com/apache/archiva/commit/c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"comments_url\":\"https://api.github.com/repos/apache/archiva/commits/c303ba78c70a220c54b0501bf5239f5870d03ad9/comments\",\"author\":{\"login\":\"oching\",\"id\":310522,\"node_id\":\"MDQ6VXNlcjMxMDUyMg==\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/310522?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/oching\",\"html_url\":\"https://github.com/oching\",\"followers_url\":\"https://api.github.com/users/oching/followers\",\"following_url\":\"https://api.github.com/users/oching/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/oching/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/oching/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/oching/subscriptions\",\"organizations_url\":\"https://api.github.com/users/oching/orgs\",\"repos_url\":\"https://api.github.com/users/oching/repos\",\"events_url\":\"https://api.github.com/users/oching/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/oching/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"oching\",\"id\":310522,\"node_id\":\"MDQ6VXNlcjMxMDUyMg==\",\"avatar_url\":\"https://avatars.githubusercontent.com/u/310522?v=4\",\"gravatar_id\":\"\",\"url\":\"https://api.github.com/users/oching\",\"html_url\":\"https://github.com/oching\",\"followers_url\":\"https://api.github.com/users/oching/followers\",\"following_url\":\"https://api.github.com/users/oching/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/oching/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/oching/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/oching/subscriptions\",\"organizations_url\":\"https://api.github.com/users/oching/orgs\",\"repos_url\":\"https://api.github.com/users/oching/repos\",\"events_url\":\"https://api.github.com/users/oching/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/oching/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"c64358cfd11f1c506afcc9cc2a4df5bc4f01b69a\",\"url\":\"https://api.github.com/repos/apache/archiva/commits/c64358cfd11f1c506afcc9cc2a4df5bc4f01b69a\",\"html_url\":\"https://github.com/apache/archiva/commit/c64358cfd11f1c506afcc9cc2a4df5bc4f01b69a\"}],\"stats\":{\"total\":3595,\"additions\":3484,\"deletions\":111},\"files\":[{\"sha\":\"5ff3c783bad5cf3d3bae94902cd3dc01d1e996aa\",\"filename\":\"archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/AbstractLegacyRepositoryContent.java\",\"status\":\"modified\",\"additions\":5,\"deletions\":0,\"changes\":5,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FAbstractLegacyRepositoryContent.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FAbstractLegacyRepositoryContent.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FAbstractLegacyRepositoryContent.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -117,4 +117,9 @@ private String getDirectory( String classifier, String type )\\n         // Default process.\\n         return type + \\\"s\\\";\\n     }\\n+    \\n+    public void setLegacyPathParser( PathParser parser )\\n+    {\\n+        this.legacyPathParser = parser;\\n+    }\\n }\"},{\"sha\":\"93545f3dd082b8eadcf3875945ad76b06cd85645\",\"filename\":\"archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java\",\"status\":\"modified\",\"additions\":4,\"deletions\":0,\"changes\":4,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FManagedDefaultRepositoryContent.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FManagedDefaultRepositoryContent.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FManagedDefaultRepositoryContent.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -78,6 +78,10 @@ public void deleteVersion( VersionedReference reference )\\n                 // TODO: log this somewhere?\\n             }\\n         }\\n+        else\\n+        {\\n+            throw new ContentNotFoundException( \\\"Unable to delete non-existing project directory.\\\" );\\n+        }\\n     }\\n \\n     public String getId()\"},{\"sha\":\"03216fd8a5e8bef699925a970ecf22b807cae9d1\",\"filename\":\"archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java\",\"status\":\"modified\",\"additions\":5,\"deletions\":0,\"changes\":5,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FManagedLegacyRepositoryContent.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FManagedLegacyRepositoryContent.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-repository-layer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Frepository%2Fcontent%2FManagedLegacyRepositoryContent.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -454,4 +454,9 @@ private void getVersionedVersions( File typeDir, VersionedReference reference, S\\n             }\\n         }\\n     }\\n+    \\n+    public void setFileTypes( FileTypes fileTypes )\\n+    {\\n+        this.filetypes = fileTypes;\\n+    }\\n }\"},{\"sha\":\"c26889d55c747d9eeaa020b3aaf9c1ebad271857\",\"filename\":\"archiva-modules/archiva-base/archiva-xml-tools/src/test/java/org/apache/maven/archiva/xml/AbstractArchivaXmlTestCase.java\",\"status\":\"modified\",\"additions\":4,\"deletions\":1,\"changes\":5,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-xml-tools%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fxml%2FAbstractArchivaXmlTestCase.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-base%2Farchiva-xml-tools%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fxml%2FAbstractArchivaXmlTestCase.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-base%2Farchiva-xml-tools%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fxml%2FAbstractArchivaXmlTestCase.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -33,10 +33,13 @@ public abstract class AbstractArchivaXmlTestCase\\n     extends TestCase\\n {\\n     protected static final String OSLASH = \\\"\\\\u00f8\\\";\\n+\\n     protected static final String TRYGVIS = \\\"Trygve Laugst\\\" + OSLASH + \\\"l\\\";\\n+\\n     protected static final String INFIN = \\\"\\\\u221e\\\";\\n+\\n     protected static final String INFINITE_ARCHIVA = \\\"The \\\" + INFIN + \\\" Archiva\\\";\\n-    \\n+\\n     protected File getExampleXml( String filename )\\n     {\\n         File examplesDir = new File( \\\"src/test/examples\\\" );\"},{\"sha\":\"4307022baf9b6ad5b65561ea42e0d3ead44c7255\",\"filename\":\"archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraint.java\",\"status\":\"modified\",\"additions\":7,\"deletions\":5,\"changes\":12,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-database%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fdatabase%2Fconstraints%2FArtifactVersionsConstraint.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-database%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fdatabase%2Fconstraints%2FArtifactVersionsConstraint.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-database%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fdatabase%2Fconstraints%2FArtifactVersionsConstraint.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -35,26 +35,28 @@ public class ArtifactVersionsConstraint\\n     \\n     private String sortColumn = \\\"repositoryId\\\";\\n     \\n-    public ArtifactVersionsConstraint( String repoId, String groupId, String artifactId )\\n+    public ArtifactVersionsConstraint( String repoId, String groupId, String artifactId, boolean includeWhenGathered )\\n     {        \\n         if( repoId != null )\\n         {   \\n-            whereClause = \\\"repositoryId.equals(selectedRepoId) && groupId.equals(selectedGroupId) && artifactId.equals(selectedArtifactId) \\\" +\\n-            \\t\\t\\\"&& whenGathered != null\\\";\\n+            whereClause = \\\"repositoryId.equals(selectedRepoId) && groupId.equals(selectedGroupId) && artifactId.equals(selectedArtifactId) \\\" \\n+                + ( includeWhenGathered ? \\\"&& whenGathered != null\\\" : \\\"\\\" );                \\n             declParams = new String[] { \\\"String selectedRepoId\\\", \\\"String selectedGroupId\\\", \\\"String selectedArtifactId\\\" };\\n             params = new Object[] { repoId, groupId, artifactId };\\n         }\\n         else\\n         {\\n-            whereClause = \\\"groupId.equals(selectedGroupId) && artifactId.equals(selectedArtifactId) && this.whenGathered != null\\\";            \\n+            whereClause =\\n+                \\\"groupId.equals(selectedGroupId) && artifactId.equals(selectedArtifactId) \\\" +                        \\n+                    ( includeWhenGathered ? \\\"&& whenGathered != null\\\" : \\\"\\\" );            \\n             declParams = new String[] { \\\"String selectedGroupId\\\", \\\"String selectedArtifactId\\\" };\\n             params = new Object[] { groupId, artifactId };\\n         }\\n     }\\n     \\n     public ArtifactVersionsConstraint( String repoId, String groupId, String artifactId, String sortColumn )\\n     {   \\n-        this( repoId, groupId, artifactId );\\n+        this( repoId, groupId, artifactId, true );\\n         this.sortColumn = sortColumn;        \\n     }\\n         \"},{\"sha\":\"d00c6dcf58c61131e04039036278f4c2e0ff57ae\",\"filename\":\"archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java\",\"status\":\"modified\",\"additions\":2,\"deletions\":2,\"changes\":4,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-database%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fdatabase%2Fconstraints%2FArtifactVersionsConstraintTest.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-database%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fdatabase%2Fconstraints%2FArtifactVersionsConstraintTest.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-database%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fmaven%2Farchiva%2Fdatabase%2Fconstraints%2FArtifactVersionsConstraintTest.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -87,14 +87,14 @@ public void testQueryAllVersionsOfArtifactAcrossRepos() throws Exception\\n     {        \\n         populateDb();\\n         assertConstraint( \\\"Artifacts By Repository\\\", 3, \\n-                          new ArtifactVersionsConstraint( null, \\\"org.apache.archiva\\\", \\\"artifact-one\\\" ) );\\n+                          new ArtifactVersionsConstraint( null, \\\"org.apache.archiva\\\", \\\"artifact-one\\\", true ) );\\n     }    \\n     \\n     public void testQueryAllVersionsOfArtifactInARepo() throws Exception\\n     {\\n         populateDb();\\n         assertConstraint( \\\"Artifacts By Repository\\\", 2, \\n-                          new ArtifactVersionsConstraint( TEST_REPO, \\\"org.apache.archiva\\\", \\\"artifact-one\\\" ) );\\n+                          new ArtifactVersionsConstraint( TEST_REPO, \\\"org.apache.archiva\\\", \\\"artifact-one\\\", true ) );\\n     }\\n     \\n     private void assertConstraint( String msg, int count, ArtifactVersionsConstraint constraint )\"},{\"sha\":\"127d08b25aeec0a1e376dae2d2f1afb035c74020\",\"filename\":\"archiva-modules/archiva-web/archiva-webapp/pom.xml\",\"status\":\"modified\",\"additions\":17,\"deletions\":0,\"changes\":17,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fpom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fpom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fpom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -84,6 +84,18 @@\\n       <groupId>org.apache.archiva</groupId>\\n       <artifactId>archiva-rss</artifactId>\\n     </dependency>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-xmlrpc-api</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-xmlrpc-services</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-xmlrpc-security</artifactId>\\n+    </dependency>\\n     <dependency>\\n       <groupId>javax.servlet</groupId>\\n       <artifactId>servlet-api</artifactId>\\n@@ -221,6 +233,11 @@\\n       <artifactId>commons-logging-api</artifactId>\\n       <version>1.1</version>\\n     </dependency>\\n+    <dependency>\\n+      <groupId>com.atlassian.xmlrpc</groupId>\\n+      <artifactId>atlassian-xmlrpc-binder-server-spring</artifactId>\\n+      <scope>runtime</scope>\\n+    </dependency>\\n   </dependencies>\\n   <build>\\n     <resources>\"},{\"sha\":\"d8604065c52817bdaf336f4efad7b30cccc4cf77\",\"filename\":\"archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/applicationContext.xml\",\"status\":\"modified\",\"additions\":23,\"deletions\":0,\"changes\":23,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FapplicationContext.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FapplicationContext.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2FapplicationContext.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -30,4 +30,27 @@\\n   <bean id=\\\"propertyPlaceholder\\\" class=\\\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\\\">\\n     <property name=\\\"location\\\" value=\\\"classpath:application.properties\\\" />\\n   </bean>\\n+  \\n+  <bean name=\\\"testXmlRpcService\\\" lazy-init=\\\"true\\\" scope=\\\"singleton\\\" class=\\\"org.apache.archiva.web.xmlrpc.services.PingServiceImpl\\\"/>\\n+  \\n+  <bean name=\\\"administrationService\\\" lazy-init=\\\"true\\\" scope=\\\"singleton\\\" class=\\\"org.apache.archiva.web.xmlrpc.services.AdministrationServiceImpl\\\">\\n+    <constructor-arg ref=\\\"archivaConfiguration\\\"/>\\n+    <constructor-arg ref=\\\"repositoryContentConsumers\\\"/>\\n+    <constructor-arg ref=\\\"databaseConsumers\\\"/>\\n+    <constructor-arg ref=\\\"repositoryContentFactory\\\"/>\\n+    <constructor-arg ref=\\\"artifactDAO#jdo\\\"/>\\n+    <constructor-arg ref=\\\"databaseCleanupConsumer#not-present-remove-db-artifact\\\"/>\\n+    <constructor-arg ref=\\\"databaseCleanupConsumer#not-present-remove-db-project\\\"/> \\n+    <constructor-arg ref=\\\"archivaTaskScheduler\\\"/>       \\n+  </bean> \\n+\\n+  <bean name=\\\"xmlrpcServicesList\\\" lazy-init=\\\"true\\\" scope=\\\"singleton\\\" class=\\\"java.util.ArrayList\\\">\\n+    <constructor-arg ref=\\\"administrationService\\\"/>\\n+  </bean>\\n+    \\n+  <bean name=\\\"xmlRpcAuthenticator\\\" class=\\\"org.apache.archiva.web.xmlrpc.security.XmlRpcAuthenticator\\\">\\n+      <constructor-arg>\\n+         <ref bean=\\\"securitySystem\\\"/>\\n+      </constructor-arg>\\n+  </bean>\\n </beans>\"},{\"sha\":\"a8c61356e0d4154263d34196e1db950002e51b34\",\"filename\":\"archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/web.xml\",\"status\":\"modified\",\"additions\":139,\"deletions\":102,\"changes\":241,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-webapp%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -1,4 +1,4 @@\\n-<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\n+<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n <!--\\n   ~ Licensed to the Apache Software Foundation (ASF) under one\\n   ~ or more contributor license agreements.  See the NOTICE file\\n@@ -18,106 +18,143 @@\\n   ~ under the License.\\n   -->\\n \\n-<web-app xmlns=\\\"http://java.sun.com/xml/ns/j2ee\\\" version=\\\"2.4\\\"\\n-         xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n-         xsi:schemaLocation=\\\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\\\">\\n-\\n-  <display-name>Apache Archiva</display-name>\\n-\\n-  <filter>\\n-    <filter-name>webwork-cleanup</filter-name>\\n-    <filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>\\n-  </filter>\\n-\\n-  <filter>\\n-    <filter-name>sitemesh</filter-name>\\n-    <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>\\n-  </filter>\\n-\\n-  <filter>\\n-    <filter-name>webwork</filter-name>\\n-    <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>\\n-  </filter>\\n-\\n-  <!-- this must be before the sitemesh filter -->\\n-  <filter-mapping>\\n-    <filter-name>webwork-cleanup</filter-name>\\n-    <url-pattern>/*</url-pattern>\\n-  </filter-mapping>\\n-\\n-  <filter-mapping>\\n-    <filter-name>sitemesh</filter-name>\\n-    <url-pattern>/*</url-pattern>\\n-  </filter-mapping>\\n-\\n-  <filter-mapping>\\n-    <filter-name>webwork</filter-name>\\n-    <url-pattern>/*</url-pattern>\\n-  </filter-mapping>\\n-\\n-  <listener>\\n-    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\\n-  </listener>\\n-  <listener>\\n-    <!-- TODO: some Spring technique for this? -->\\n-  \\t<listener-class>org.apache.maven.archiva.web.startup.ArchivaStartup</listener-class>\\n-  </listener>\\n-\\n-  <context-param>\\n-    <param-name>contextClass</param-name>\\n-    <param-value>org.codehaus.plexus.spring.PlexusWebApplicationContext</param-value>\\n-  </context-param>\\n-\\n-  <context-param>\\n-    <param-name>contextConfigLocation</param-name>\\n-    <param-value>\\n-        classpath*:META-INF/plexus/components.xml\\n-        classpath*:META-INF/spring-context.xml\\n-        /WEB-INF/classes/META-INF/plexus/application.xml\\n-        /WEB-INF/classes/META-INF/plexus/components.xml\\n-        /WEB-INF/applicationContext.xml\\n-    </param-value>\\n-  </context-param>\\n-\\n-  <servlet>\\n-    <servlet-name>RepositoryServlet</servlet-name>\\n-    <servlet-class>org.apache.maven.archiva.webdav.RepositoryServlet</servlet-class>\\n-    <!-- Loading this on startup so as to take advantage of configuration listeners -->\\n-    <load-on-startup>1</load-on-startup>\\n-  </servlet>\\n-  \\n-  <servlet>\\n-    <servlet-name>RssFeedServlet</servlet-name>\\n-    <servlet-class>org.apache.maven.archiva.web.rss.RssFeedServlet</servlet-class>\\n-  </servlet>\\n-  \\n-  <servlet-mapping>\\n-     <servlet-name>RssFeedServlet</servlet-name>\\n-     <url-pattern>/feeds/*</url-pattern>\\n-  </servlet-mapping>\\n-  \\n-  <servlet-mapping>\\n-    <servlet-name>RepositoryServlet</servlet-name>\\n-    <url-pattern>/repository/*</url-pattern>\\n-  </servlet-mapping>\\n-\\n-  <resource-ref>\\n-    <res-ref-name>jdbc/users</res-ref-name>\\n-    <res-type>javax.sql.DataSource</res-type>\\n-    <res-auth>Container</res-auth>\\n-    <res-sharing-scope>Shareable</res-sharing-scope>\\n-  </resource-ref>\\n-  <resource-ref>\\n-    <res-ref-name>jdbc/archiva</res-ref-name>\\n-    <res-type>javax.sql.DataSource</res-type>\\n-    <res-auth>Container</res-auth>\\n-    <res-sharing-scope>Shareable</res-sharing-scope>\\n-  </resource-ref>\\n-  <resource-ref>\\n-    <res-ref-name>mail/Session</res-ref-name>\\n-    <res-type>javax.mail.Session</res-type>\\n-    <res-auth>Container</res-auth>\\n-    <res-sharing-scope>Shareable</res-sharing-scope>\\n-  </resource-ref>\\n+<web-app version=\\\"2.4\\\" xmlns=\\\"http://java.sun.com/xml/ns/j2ee\\\"\\n+\\txmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n+\\txsi:schemaLocation=\\\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\\\">\\n+\\n+\\t<display-name>Apache Archiva</display-name>\\n+\\n+        <filter>\\n+          <filter-name>webwork-cleanup</filter-name>\\n+          <filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>\\n+        </filter>\\n+\\n+\\t<filter>\\n+\\t\\t<filter-name>sitemesh</filter-name>\\n+\\t\\t<filter-class>\\n+\\t\\t\\tcom.opensymphony.module.sitemesh.filter.PageFilter\\n+\\t\\t</filter-class>\\n+\\t</filter>\\n+\\n+        <filter>\\n+          <filter-name>webwork</filter-name>\\n+          <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>\\n+        </filter>\\n+\\n+\\t<!-- this must be before the sitemesh filter -->\\n+\\t<filter-mapping>\\n+\\t\\t<filter-name>webwork-cleanup</filter-name>\\n+\\t\\t<url-pattern>/*</url-pattern>\\n+\\t</filter-mapping>\\n+\\n+\\t<filter-mapping>\\n+\\t\\t<filter-name>sitemesh</filter-name>\\n+\\t\\t<url-pattern>/*</url-pattern>\\n+\\t</filter-mapping>\\n+\\n+\\t<filter-mapping>\\n+\\t\\t<filter-name>webwork</filter-name>\\n+\\t\\t<url-pattern>/*</url-pattern>\\n+\\t</filter-mapping>\\n+\\n+\\t<listener>\\n+\\t\\t<listener-class>\\n+\\t\\t\\torg.springframework.web.context.ContextLoaderListener\\n+\\t\\t</listener-class>\\n+\\t</listener>\\n+\\t<listener>\\n+\\t\\t<!-- TODO: some Spring technique for this? -->\\n+\\t\\t<listener-class>\\n+\\t\\t\\torg.apache.maven.archiva.web.startup.ArchivaStartup\\n+\\t\\t</listener-class>\\n+\\t</listener>\\n+\\n+\\t<context-param>\\n+\\t\\t<param-name>contextClass</param-name>\\n+\\t\\t<param-value>\\n+\\t\\t\\torg.codehaus.plexus.spring.PlexusWebApplicationContext\\n+\\t\\t</param-value>\\n+\\t</context-param>\\n+\\n+\\t<context-param>\\n+\\t\\t<param-name>contextConfigLocation</param-name>\\n+\\t\\t<param-value>\\n+\\t\\t\\tclasspath*:META-INF/plexus/components.xml\\n+\\t\\t\\tclasspath*:META-INF/spring-context.xml\\n+\\t\\t\\t/WEB-INF/classes/META-INF/plexus/application.xml\\n+\\t\\t\\t/WEB-INF/classes/META-INF/plexus/components.xml\\n+\\t\\t\\t/WEB-INF/applicationContext.xml\\n+\\t\\t</param-value>\\n+\\t</context-param>\\n+\\n+\\t<servlet>\\n+\\t\\t<servlet-name>RepositoryServlet</servlet-name>\\n+\\t\\t<servlet-class>\\n+\\t\\t\\torg.apache.maven.archiva.webdav.RepositoryServlet\\n+\\t\\t</servlet-class>\\n+\\t\\t<!-- Loading this on startup so as to take advantage of configuration listeners -->\\n+\\t\\t<load-on-startup>1</load-on-startup>\\n+\\t</servlet>\\n+\\n+\\t<servlet>\\n+\\t\\t<servlet-name>XmlRpcServlet</servlet-name>\\n+\\t\\t<servlet-class>\\n+\\t\\t\\tcom.atlassian.xmlrpc.spring.BinderSpringXmlRpcServlet\\n+\\t\\t</servlet-class>\\n+\\t\\t<init-param>\\n+\\t\\t\\t<param-name>serviceListBeanName</param-name>\\n+\\t\\t\\t<param-value>xmlrpcServicesList</param-value>\\n+\\t\\t</init-param>\\n+\\t\\t<init-param>\\n+\\t\\t\\t<param-name>authHandlerBeanName</param-name>\\n+\\t\\t\\t<param-value>xmlRpcAuthenticator</param-value>\\n+\\t\\t</init-param>\\n+\\t\\t<init-param>\\n+\\t\\t  <param-name>enabledForExtensions</param-name>\\n+\\t\\t  <param-value>true</param-value>\\n+\\t\\t</init-param>\\n+\\t\\t<load-on-startup>1</load-on-startup>\\n+\\t</servlet>\\n+\\n+\\t<servlet>\\n+\\t\\t<servlet-name>RssFeedServlet</servlet-name>\\n+\\t\\t<servlet-class>\\n+\\t\\t\\torg.apache.maven.archiva.web.rss.RssFeedServlet\\n+\\t\\t</servlet-class>\\n+\\t</servlet>\\n+\\n+\\t<servlet-mapping>\\n+\\t\\t<servlet-name>RssFeedServlet</servlet-name>\\n+\\t\\t<url-pattern>/feeds/*</url-pattern>\\n+\\t</servlet-mapping>\\n+\\n+\\t<servlet-mapping>\\n+\\t\\t<servlet-name>RepositoryServlet</servlet-name>\\n+\\t\\t<url-pattern>/repository/*</url-pattern>\\n+\\t</servlet-mapping>\\n+\\n+\\t<servlet-mapping>\\n+\\t\\t<servlet-name>XmlRpcServlet</servlet-name>\\n+\\t\\t<url-pattern>/xmlrpc</url-pattern>\\n+\\t</servlet-mapping>\\n+\\n+\\t<resource-ref>\\n+\\t\\t<res-ref-name>jdbc/users</res-ref-name>\\n+\\t\\t<res-type>javax.sql.DataSource</res-type>\\n+\\t\\t<res-auth>Container</res-auth>\\n+\\t\\t<res-sharing-scope>Shareable</res-sharing-scope>\\n+\\t</resource-ref>\\n+\\t<resource-ref>\\n+\\t\\t<res-ref-name>jdbc/archiva</res-ref-name>\\n+\\t\\t<res-type>javax.sql.DataSource</res-type>\\n+\\t\\t<res-auth>Container</res-auth>\\n+\\t\\t<res-sharing-scope>Shareable</res-sharing-scope>\\n+\\t</resource-ref>\\n+\\t<resource-ref>\\n+\\t\\t<res-ref-name>mail/Session</res-ref-name>\\n+\\t\\t<res-type>javax.mail.Session</res-type>\\n+\\t\\t<res-auth>Container</res-auth>\\n+\\t\\t<res-sharing-scope>Shareable</res-sharing-scope>\\n+\\t</resource-ref>\\n \\n </web-app>\"},{\"sha\":\"ac145568f9d9765b620832c8315ede66e4e05283\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/pom.xml\",\"status\":\"added\",\"additions\":40,\"deletions\":0,\"changes\":40,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fpom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fpom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fpom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,40 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+<!--\\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\\n+  ~ or more contributor license agreements.  See the NOTICE file\\n+  ~ distributed with this work for additional information\\n+  ~ regarding copyright ownership.  The ASF licenses this file\\n+  ~ to you under the Apache License, Version 2.0 (the\\n+  ~ \\\"License\\\"); you may not use this file except in compliance\\n+  ~ with the License.  You may obtain a copy of the License at\\n+  ~\\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\\n+  ~\\n+  ~ Unless required by applicable law or agreed to in writing,\\n+  ~ software distributed under the License is distributed on an\\n+  ~ \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+  ~ KIND, either express or implied.  See the License for the\\n+  ~ specific language governing permissions and limitations\\n+  ~ under the License.\\n+  -->\\n+\\n+<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\"\\n+\\txmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n+\\txsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\n+\\t\\n+  <modelVersion>4.0.0</modelVersion>\\n+  <parent>\\n+    <groupId>org.apache.archiva</groupId>\\n+    <artifactId>archiva-xmlrpc</artifactId>\\n+    <version>1.2-SNAPSHOT</version>\\n+    <relativePath>../pom.xml</relativePath>\\n+  </parent>\\n+  <artifactId>archiva-xmlrpc-api</artifactId>\\n+  <name>Archiva Web :: XML-RPC API</name>\\n+  <dependencies>\\n+    <dependency>\\n+      <groupId>com.atlassian.xmlrpc</groupId>\\n+      <artifactId>atlassian-xmlrpc-binder-annotations</artifactId>\\n+    </dependency>\\n+  </dependencies>  \\n+</project>\"},{\"sha\":\"8149334464b298987136f5aec09f6c24bca4ba8b\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/AdministrationService.java\",\"status\":\"added\",\"additions\":115,\"deletions\":0,\"changes\":115,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FAdministrationService.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FAdministrationService.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FAdministrationService.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,115 @@\\n+package org.apache.archiva.web.xmlrpc.api;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import java.util.List;\\n+\\n+import org.apache.archiva.web.xmlrpc.api.beans.ManagedRepository;\\n+import org.apache.archiva.web.xmlrpc.api.beans.RemoteRepository;\\n+\\n+import com.atlassian.xmlrpc.ServiceObject;\\n+\\n+@ServiceObject( \\\"AdministrationService\\\" )\\n+public interface AdministrationService\\n+{    \\n+    /**\\n+     * Executes repository scanner on the given repository.\\n+     *  \\n+     * @param repoId id of the repository to be scanned\\n+     * @return\\n+     * @throws Exception\\n+     */\\n+    public Boolean executeRepositoryScanner( String repoId ) throws Exception;\\n+   \\n+    /**\\n+     * Executes the database scanner.\\n+     * \\n+     * @return\\n+     * @throws Exception\\n+     */\\n+    public Boolean executeDatabaseScanner() throws Exception;\\n+\\n+    /**\\n+     * Gets all available database consumers.\\n+     * @return\\n+     */\\n+    public List<String> getAllDatabaseConsumers();\\n+   \\n+    /**\\n+     * Configures (enable or disable) database consumer.\\n+     * \\n+     * @param consumerId id of the database consumer\\n+     * @param enable flag whether to enable or disable the specified consumer\\n+     * @return\\n+     * @throws Exception\\n+     */\\n+    public Boolean configureDatabaseConsumer( String consumerId, boolean enable ) throws Exception;\\n+\\n+    /**\\n+     * Gets all available repository consumers.\\n+     * \\n+     * @return\\n+     */\\n+    public List<String> getAllRepositoryConsumers();\\n+    \\n+ // TODO should we already implement config of consumers per repository?\\n+    /**\\n+     * Configures (enable or disable) repository consumer.\\n+     * \\n+     * @param repoId\\n+     * @param consumerId\\n+     * @param enable\\n+     * @return\\n+     * @throws Exception\\n+     */    \\n+    public Boolean configureRepositoryConsumer( String repoId, String consumerId, boolean enable ) throws Exception;\\n+\\n+    /**\\n+     * Gets all managed repositories.\\n+     * \\n+     * @return\\n+     */\\n+    public List<ManagedRepository> getAllManagedRepositories();\\n+\\n+    /**\\n+     * Gets all remote repositories.\\n+     * \\n+     * @return\\n+     */\\n+    public List<RemoteRepository> getAllRemoteRepositories();\\n+\\n+    /**\\n+     * Deletes given artifact from the specified repository.\\n+     * \\n+     * @param repoId id of the repository where the artifact to be deleted resides\\n+     * @param groupId groupId of the artifact to be deleted\\n+     * @param artifactId artifactId of the artifact to be deleted\\n+     * @param version version of the artifact to be deleted\\n+     * @return\\n+     * @throws Exception\\n+     */\\n+    public Boolean deleteArtifact( String repoId, String groupId, String artifactId, String version )\\n+        throws Exception;    \\n+    \\n+    //TODO \\n+    // consider the following as additional services:\\n+    // - getAllConfiguredRepositoryConsumers( String repoId ) - list all enabled consumers for the repo\\n+    // - getAllConfiguredDatabaseConsumers() - list all enabled db consumers\\n+}\"},{\"sha\":\"cbc47547f0e7c05593ba8b7566ca4653b65f1c60\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/SearchService.java\",\"status\":\"added\",\"additions\":28,\"deletions\":0,\"changes\":28,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FSearchService.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FSearchService.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FSearchService.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,28 @@\\n+package org.apache.archiva.web.xmlrpc.api;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import com.atlassian.xmlrpc.ServiceObject;\\n+\\n+@ServiceObject(\\\"Search\\\")\\n+public interface SearchService\\n+{\\n+\\n+}\"},{\"sha\":\"5eba5144d9cf7bb71e14782f2d24c6385ee6d505\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/TestService.java\",\"status\":\"added\",\"additions\":28,\"deletions\":0,\"changes\":28,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FTestService.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FTestService.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2FTestService.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,28 @@\\n+package org.apache.archiva.web.xmlrpc.api;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import com.atlassian.xmlrpc.ServiceObject;\\n+\\n+@ServiceObject(\\\"Test\\\")\\n+public interface TestService\\n+{\\n+    public String ping();\\n+}\"},{\"sha\":\"fd0f9ef4fd3c07557cd3f92dfb2f645ab508127f\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java\",\"status\":\"added\",\"additions\":152,\"deletions\":0,\"changes\":152,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2Fbeans%2FManagedRepository.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2Fbeans%2FManagedRepository.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2Fbeans%2FManagedRepository.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,152 @@\\n+package org.apache.archiva.web.xmlrpc.api.beans;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *   http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import java.io.Serializable;\\n+\\n+import com.atlassian.xmlrpc.ServiceBean;\\n+import com.atlassian.xmlrpc.ServiceBeanField;\\n+\\n+@ServiceBean\\n+public class ManagedRepository\\n+    implements Serializable\\n+{    \\n+    private String id;\\n+   \\n+    private String name;\\n+   \\n+    private String url;\\n+\\n+    private String layout;\\n+\\n+    private boolean snapshots = false;\\n+\\n+    private boolean releases = false;\\n+   \\n+    public ManagedRepository()\\n+    {\\n+        \\n+    }\\n+    \\n+    public ManagedRepository( String id, String name, String url, String layout, boolean snapshots, boolean releases )\\n+    {\\n+        this.id = id;\\n+        this.name = name;\\n+        this.url = url;\\n+        this.layout = layout;\\n+        this.snapshots = snapshots;\\n+        this.releases = releases;\\n+    }\\n+    \\n+    public boolean equals(Object other)\\n+    {\\n+        if ( this == other)\\n+        {\\n+            return true;\\n+        }\\n+        \\n+        if ( !(other instanceof ManagedRepository) )\\n+        {\\n+            return false;\\n+        }\\n+        \\n+        ManagedRepository that = (ManagedRepository) other;\\n+        boolean result = true;\\n+        result = result && ( getId() == null ? that.getId() == null : getId().equals( that.getId() ) );\\n+        return result;\\n+    } \\n+    \\n+    public String getId()\\n+    {\\n+        return this.id;\\n+    } \\n+\\n+    public String getLayout()\\n+    {\\n+        return this.layout;\\n+    } \\n+\\n+    public String getName()\\n+    {\\n+        return this.name;\\n+    }\\n+    \\n+    public String getUrl()\\n+    {\\n+        return this.url;\\n+    } \\n+    \\n+    public int hashCode()\\n+    {\\n+        int result = 17;\\n+        long tmp;\\n+        result = 37 * result + ( id != null ? id.hashCode() : 0 );\\n+        return result;\\n+    } \\n+\\n+    public boolean isReleases()\\n+    {\\n+        return this.releases;\\n+    } \\n+\\n+    /**\\n+     * Get null\\n+     */\\n+    public boolean isSnapshots()\\n+    {\\n+        return this.snapshots;\\n+    } \\n+    \\n+    @ServiceBeanField( \\\"id\\\" )\\n+    public void setId(String id)\\n+    {\\n+        this.id = id;\\n+    } \\n+    \\n+    @ServiceBeanField( \\\"layout\\\" )\\n+    public void setLayout(String layout)\\n+    {\\n+        this.layout = layout;\\n+    } \\n+\\n+    @ServiceBeanField( \\\"name\\\" )\\n+    public void setName(String name)\\n+    {\\n+        this.name = name;\\n+    } \\n+    \\n+    @ServiceBeanField( \\\"releases\\\" )\\n+    public void setReleases(boolean releases)\\n+    {\\n+        this.releases = releases;\\n+    } \\n+\\n+    @ServiceBeanField( \\\"snapshots\\\" )\\n+    public void setSnapshots(boolean snapshots)\\n+    {\\n+        this.snapshots = snapshots;\\n+    } \\n+\\n+    @ServiceBeanField( \\\"url\\\" )\\n+    public void setUrl(String url)\\n+    {\\n+        this.url = url;\\n+    }\\n+}\\n\\\\ No newline at end of file\"},{\"sha\":\"399b59e574c531d6b64ebc10ed87ab288b052c01\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/RemoteRepository.java\",\"status\":\"added\",\"additions\":121,\"deletions\":0,\"changes\":121,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2Fbeans%2FRemoteRepository.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2Fbeans%2FRemoteRepository.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fapi%2Fbeans%2FRemoteRepository.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,121 @@\\n+package org.apache.archiva.web.xmlrpc.api.beans;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *   http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import java.io.Serializable;\\n+\\n+import com.atlassian.xmlrpc.ServiceBean;\\n+import com.atlassian.xmlrpc.ServiceBeanField;\\n+\\n+@ServiceBean\\n+public class RemoteRepository\\n+    implements Serializable\\n+{   \\n+    private String id;\\n+\\n+    private String name;\\n+\\n+    private String url;\\n+    \\n+    private String layout;\\n+\\n+    public RemoteRepository()\\n+    {\\n+        \\n+    }\\n+    \\n+    public RemoteRepository( String id, String name, String url, String layout )\\n+    {\\n+        this.id = id;\\n+        this.name = name;\\n+        this.url = url;\\n+        this.layout = layout;\\n+    }\\n+    \\n+    public boolean equals(Object other)\\n+    {\\n+        if ( this == other)\\n+        {\\n+            return true;\\n+        }\\n+        \\n+        if ( !(other instanceof RemoteRepository) )\\n+        {\\n+            return false;\\n+        }\\n+        \\n+        RemoteRepository that = (RemoteRepository) other;\\n+        boolean result = true;\\n+        result = result && ( getId() == null ? that.getId() == null : getId().equals( that.getId() ) );\\n+        return result;\\n+    } \\n+    \\n+    public String getId()\\n+    {\\n+        return this.id;\\n+    } \\n+    \\n+    public String getLayout()\\n+    {\\n+        return this.layout;\\n+    } \\n+    \\n+    public String getName()\\n+    {\\n+        return this.name;\\n+    } \\n+    \\n+    public String getUrl()\\n+    {\\n+        return this.url;\\n+    }\\n+    \\n+    public int hashCode()\\n+    {\\n+        int result = 17;\\n+        long tmp;\\n+        result = 37 * result + ( id != null ? id.hashCode() : 0 );\\n+        return result;\\n+    }\\n+    \\n+    @ServiceBeanField( \\\"id\\\" )\\n+    public void setId(String id)\\n+    {\\n+        this.id = id;\\n+    }\\n+    \\n+    @ServiceBeanField( \\\"layout\\\" )\\n+    public void setLayout(String layout)\\n+    {\\n+        this.layout = layout;\\n+    }\\n+    \\n+    @ServiceBeanField( \\\"name\\\" )\\n+    public void setName(String name)\\n+    {\\n+        this.name = name;\\n+    } \\n+    \\n+    @ServiceBeanField( \\\"url\\\" )\\n+    public void setUrl(String url)\\n+    {\\n+        this.url = url;\\n+    }     \\n+}\\n\\\\ No newline at end of file\"},{\"sha\":\"1e73dc9332612a19dfa4ce46d8895cb6de3ca605\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-client/pom.xml\",\"status\":\"added\",\"additions\":94,\"deletions\":0,\"changes\":94,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-client%2Fpom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-client%2Fpom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-client%2Fpom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,94 @@\\n+<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n+<!--\\n+  ~ Copyright 2005-2006 The Apache Software Foundation.\\n+  ~\\n+  ~ Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n+  ~ you may not use this file except in compliance with the License.\\n+  ~ You may obtain a copy of the License at\\n+  ~\\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\\n+  ~\\n+  ~ Unless required by applicable law or agreed to in writing, software\\n+  ~ distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n+  ~ See the License for the specific language governing permissions and\\n+  ~ limitations under the License.\\n+  -->\\n+\\n+<project>\\n+  <parent>\\n+    <artifactId>archiva-xmlrpc</artifactId>\\n+    <groupId>org.apache.archiva</groupId>\\n+    <version>1.2-SNAPSHOT</version>\\n+  </parent>\\n+  <modelVersion>4.0.0</modelVersion>\\n+  <artifactId>archiva-xmlrpc-client</artifactId>\\n+  <name>Archiva Web :: XML-RPC Client</name>\\n+  <dependencies>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-xmlrpc-api</artifactId>\\n+      <version>${project.version}</version>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.apache.xmlrpc</groupId>\\n+      <artifactId>xmlrpc-client</artifactId>\\n+      <version>3.1</version>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>commons-beanutils</groupId>\\n+      <artifactId>commons-beanutils</artifactId>\\n+      <version>1.8.0</version>\\n+    </dependency>\\n+  </dependencies>\\n+  <build>\\n+    <plugins>\\n+      <plugin>\\n+        <groupId>org.codehaus.mojo</groupId>\\n+        <artifactId>exec-maven-plugin</artifactId>\\n+        <configuration>\\n+          <executable>java</executable>\\n+          <mainClass>org.apache.archiva.web.xmlrpc.client.SampleClient</mainClass>\\n+          <arguments>\\n+            <!-- \\n+                 URL: ex. http://127.0.0.1:8080/archiva/xmlrpc \\n+                 USERNAME & PASSWORD: Archiva credentials  \\n+            --> \\n+            <argument>URL</argument>\\n+            <argument>USERNAME</argument>\\n+            <argument>PASSWORD</argument>\\n+          </arguments>\\n+        </configuration>\\n+      </plugin>\\n+      <!-- override parent config, commons-logging cannot be excluded from commons-beanutils - NoClassDef error occurs -->\\n+      <plugin>\\n+        <groupId>org.apache.maven.plugins</groupId>\\n+        <artifactId>maven-enforcer-plugin</artifactId>\\n+        <version>1.0-alpha-3</version>\\n+        <executions>\\n+          <execution>\\n+            <goals>\\n+              <goal>enforce</goal>\\n+            </goals>\\n+            <configuration>\\n+              <rules>\\n+                <bannedDependencies>\\n+                  <excludes>\\n+                    <exclude>org.codehaus.plexus:plexus-container-default</exclude>                    \\n+                    <exclude>velocity:velocity-dep</exclude>\\n+                    <exclude>classworlds:classworlds</exclude>\\n+                    <exclude>javax.transaction:jta</exclude>\\n+                    <exclude>javax.sql:jdbc-stdext</exclude>\\n+                    <exclude>ant:ant-optional</exclude>\\n+                    <!-- exclude>org.apache.maven.wagon:wagon-http-lightweight</exclude -->\\n+                    <exclude>xom:xom</exclude>\\n+                  </excludes>\\n+                </bannedDependencies>\\n+              </rules>\\n+            </configuration>\\n+          </execution>\\n+        </executions>\\n+      </plugin>\\n+    </plugins>\\n+  </build>\\n+</project>\"},{\"sha\":\"7f94734a1cd73b50731d616f1d1ab9bbce2713de\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-client/src/main/java/org/apache/archiva/web/xmlrpc/client/SampleClient.java\",\"status\":\"added\",\"additions\":193,\"deletions\":0,\"changes\":193,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fclient%2FSampleClient.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fclient%2FSampleClient.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fclient%2FSampleClient.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,193 @@\\n+package org.apache.archiva.web.xmlrpc.client;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import java.lang.reflect.InvocationTargetException;\\n+import java.net.MalformedURLException;\\n+import java.net.URL;\\n+import java.util.Iterator;\\n+import java.util.List;\\n+import java.util.Map;\\n+import java.util.Set;\\n+\\n+import org.apache.archiva.web.xmlrpc.api.AdministrationService;\\n+import org.apache.archiva.web.xmlrpc.api.beans.ManagedRepository;\\n+import org.apache.archiva.web.xmlrpc.api.beans.RemoteRepository;\\n+import org.apache.commons.beanutils.BeanUtils;\\n+import org.apache.xmlrpc.XmlRpcException;\\n+import org.apache.xmlrpc.client.XmlRpcClient;\\n+import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;\\n+import org.apache.xmlrpc.client.XmlRpcClientRequestImpl;\\n+import org.apache.xmlrpc.client.util.ClientFactory;\\n+\\n+/**\\n+ * TestClient\\n+ * \\n+ * Test client for Archiva Web Services. \\n+ * To execute:\\n+ * \\n+ * 1. set the <arguments> in the exec-maven-plugin config in the pom.xml in the following order:\\n+ *    - url\\n+ *    - username\\n+ *    - password\\n+ * 2. execute 'mvn exec:java' from the command-line\\n+ * \\n+ * @author \\n+ * @version $Id$\\n+ */\\n+public class SampleClient\\n+{   \\n+    public static void main( String[] args ) \\n+    {       \\n+        try\\n+        {\\n+            XmlRpcClient client = new XmlRpcClient();\\n+            \\n+            XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();\\n+            config.setServerURL( new URL( args[0] ) );\\n+            config.setBasicUserName( args[1] );\\n+            config.setBasicPassword( args[2] );\\n+            config.setEnabledForExtensions( true );\\n+            \\n+            client.setConfig( config );\\n+            \\n+            /* managed repositories */\\n+            Object[] params = new Object[]{};\\n+            Object[] managedRepos = (Object[])\\n+                 client.execute( \\\"AdministrationService.getAllManagedRepositories\\\", params );                        \\n+            \\n+            System.out.println( \\\"\\\\n******** Managed Repositories ********\\\" );\\n+            for( int i = 0; i < managedRepos.length; i++ )\\n+            {\\n+                System.out.println( \\\"=================================\\\" );\\n+                ManagedRepository managedRepo = new ManagedRepository(); \\n+                try\\n+                {   \\n+                    BeanUtils.populate( managedRepo, (Map)managedRepos[i] );\\n+                }\\n+                catch ( IllegalAccessException e )\\n+                {\\n+                    e.printStackTrace();\\n+                }\\n+                catch ( InvocationTargetException e )\\n+                {\\n+                    e.printStackTrace();\\n+                }\\n+                System.out.println( \\\"Id: \\\" + managedRepo.getId() );\\n+                System.out.println( \\\"Name: \\\" + managedRepo.getName() );\\n+                System.out.println( \\\"Layout: \\\" + managedRepo.getLayout() );\\n+                System.out.println( \\\"URL: \\\" + managedRepo.getUrl() );\\n+                System.out.println( \\\"Releases: \\\" + managedRepo.isReleases() );\\n+                System.out.println( \\\"Snapshots: \\\" + managedRepo.isSnapshots() );\\n+            }\\n+                        \\n+            /* remote repositories */\\n+            params = new Object[]{};\\n+            Object[] remoteRepos = (Object[])\\n+                 client.execute( \\\"AdministrationService.getAllRemoteRepositories\\\", params );\\n+            \\n+            System.out.println( \\\"\\\\n******** Remote Repositories ********\\\" );\\n+            for( int i = 0; i < remoteRepos.length; i++ )\\n+            {\\n+                System.out.println( \\\"=================================\\\" );\\n+                RemoteRepository remoteRepo = new RemoteRepository();\\n+                \\n+                try\\n+                {   \\n+                    BeanUtils.populate( remoteRepo, (Map) remoteRepos[i] );\\n+                }\\n+                catch ( IllegalAccessException e )\\n+                {\\n+                    e.printStackTrace();\\n+                }\\n+                catch ( InvocationTargetException e )\\n+                {\\n+                    e.printStackTrace();\\n+                }\\n+                System.out.println( \\\"Id: \\\" + remoteRepo.getId() );\\n+                System.out.println( \\\"Name: \\\" + remoteRepo.getName() );\\n+                System.out.println( \\\"Layout: \\\" + remoteRepo.getLayout() );\\n+                System.out.println( \\\"URL: \\\" + remoteRepo.getUrl() );                    \\n+            }\\n+            \\n+            /* repo consumers */\\n+            params = new Object[]{};\\n+            Object[] repoConsumers = (Object[])\\n+                 client.execute( \\\"AdministrationService.getAllRepositoryConsumers\\\", params );\\n+            \\n+            System.out.println( \\\"\\\\n******** Repository Consumers ********\\\" );\\n+            for( int i = 0; i < repoConsumers.length; i++ )\\n+            {   \\n+                System.out.println( repoConsumers[i] );                    \\n+            }\\n+            \\n+            /* db consumers */\\n+            params = new Object[]{};\\n+            Object[] dbConsumers = (Object[])\\n+                 client.execute( \\\"AdministrationService.getAllDatabaseConsumers\\\", params );\\n+            \\n+            System.out.println( \\\"\\\\n******** Database Consumers ********\\\" );\\n+            for( int i = 0; i < dbConsumers.length; i++ )\\n+            {   \\n+                System.out.println( dbConsumers[i] );                    \\n+            }\\n+            \\n+            /* configure repo consumer */\\n+            Object[] configureRepoConsumerParams = new Object[] { \\\"internal\\\", \\\"repository-purge\\\", true };            \\n+            Object configured = client.execute( \\\"AdministrationService.configureRepositoryConsumer\\\", configureRepoConsumerParams );            \\n+            System.out.println( \\\"\\\\nConfigured repo consumer 'repository-purge' : \\\" + ( ( Boolean ) configured ).booleanValue() );\\n+            \\n+            \\n+            /* configure db consumer */\\n+            Object[] configureDbConsumerParams = new Object[] { \\\"update-db-bytecode-stats\\\", false };            \\n+            configured = client.execute( \\\"AdministrationService.configureDatabaseConsumer\\\", configureDbConsumerParams );            \\n+            System.out.println( \\\"\\\\nConfigured db consumer 'update-db-bytecode-stats' : \\\" + ( ( Boolean ) configured ).booleanValue() );            \\n+            \\n+            \\n+            /* execute repo scanner */\\n+            Object[] executeRepoScanParams = new Object[] { \\\"internal\\\" };            \\n+            configured = client.execute( \\\"AdministrationService.executeRepositoryScanner\\\", executeRepoScanParams );            \\n+            System.out.println( \\\"\\\\nExecuted repo scanner of repository 'internal' : \\\" + ( ( Boolean ) configured ).booleanValue() );\\n+            \\n+            \\n+            /* execute db scanner */\\n+            Object[] executeDbScanParams = new Object[] {};            \\n+            configured = client.execute( \\\"AdministrationService.executeDatabaseScanner\\\", executeDbScanParams );\\n+            System.out.println( \\\"\\\\nExecuted database scanner : \\\" + ( ( Boolean ) configured ).booleanValue() );\\n+            \\n+            /* delete artifact */\\n+            /* \\n+             * NOTE: before enabling & invoking deleteArtifact, make sure that the repository and artifact exists first!            \\n+            Object[] deleteArtifactParams = new Object[] { \\\"internal\\\", \\\"javax.activation\\\", \\\"activation\\\", \\\"1.1\\\" };\\n+            Object artifactDeleted = client.execute( \\\"AdministrationService.deleteArtifact\\\", deleteArtifactParams );\\n+            System.out.println( \\\"\\\\nDeleted artifact 'javax.activation:activation:1.1' from repository 'internal' : \\\" +\\n+                ( (Boolean) artifactDeleted ).booleanValue() );    \\n+            */ \\n+        }\\n+        catch ( MalformedURLException e )\\n+        {\\n+            e.printStackTrace();\\n+        }\\n+        catch ( XmlRpcException e )\\n+        {\\n+            e.printStackTrace();\\n+        }           \\n+    }\\n+}\"},{\"sha\":\"8736f80710d25302c3557b913e47f0e1a6ff5afc\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/pom.xml\",\"status\":\"added\",\"additions\":83,\"deletions\":0,\"changes\":83,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fpom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fpom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fpom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,83 @@\\n+<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n+<!--\\n+  ~ Copyright 2005-2006 The Apache Software Foundation.\\n+  ~\\n+  ~ Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n+  ~ you may not use this file except in compliance with the License.\\n+  ~ You may obtain a copy of the License at\\n+  ~\\n+  ~      http://www.apache.org/licenses/LICENSE-2.0\\n+  ~\\n+  ~ Unless required by applicable law or agreed to in writing, software\\n+  ~ distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n+  ~ See the License for the specific language governing permissions and\\n+  ~ limitations under the License.\\n+  -->\\n+  \\n+<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\"\\n+\\txmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n+\\txsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\n+\\t\\n+  <modelVersion>4.0.0</modelVersion>\\n+  <parent>\\n+    <groupId>org.apache.archiva</groupId>\\n+    <artifactId>archiva-xmlrpc</artifactId>\\n+    <version>1.2-SNAPSHOT</version>\\n+    <relativePath>../pom.xml</relativePath>\\n+  </parent>\\n+  <artifactId>archiva-xmlrpc-security</artifactId>\\n+  <name>Archiva Web :: XML-RPC Security</name>\\n+  <dependencies>\\n+    <dependency>\\n+      <groupId>org.apache.xmlrpc</groupId>\\n+      <artifactId>xmlrpc-server</artifactId>\\n+      <exclusions>\\n+        <exclusion>\\n+          <groupId>commons-logging</groupId>\\n+          <artifactId>commons-logging</artifactId>\\n+        </exclusion>\\n+      </exclusions>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.codehaus.redback</groupId>\\n+      <artifactId>redback-system</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-security</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.codehaus.plexus</groupId>\\n+      <artifactId>plexus-spring</artifactId>\\n+      <scope>test</scope>\\n+    </dependency>\\n+    <!-- use spring for the unit tests?\\n+    <dependency>\\n+      <groupId>org.springframework</groupId>\\n+      <artifactId>spring-test</artifactId>\\n+      <scope>test</scope>\\n+    </dependency>\\n+     -->\\n+    <dependency>\\n+      <groupId>org.codehaus.redback</groupId>\\n+      <artifactId>redback-authorization-rbac</artifactId>\\n+      <scope>test</scope>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.codehaus.redback</groupId>\\n+      <artifactId>redback-keys-memory</artifactId>\\n+      <scope>test</scope>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.codehaus.redback</groupId>\\n+      <artifactId>redback-users-memory</artifactId>\\n+      <scope>test</scope>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.codehaus.redback</groupId>\\n+      <artifactId>redback-rbac-memory</artifactId>\\n+      <scope>test</scope>\\n+    </dependency>\\n+  </dependencies>\\n+</project>\"},{\"sha\":\"333b4218ef368a465e15978088ab5663a8b414cf\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/main/java/org/apache/archiva/web/xmlrpc/security/ServiceMethodsPermissionsMapping.java\",\"status\":\"added\",\"additions\":69,\"deletions\":0,\"changes\":69,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fsecurity%2FServiceMethodsPermissionsMapping.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fsecurity%2FServiceMethodsPermissionsMapping.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fsecurity%2FServiceMethodsPermissionsMapping.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,69 @@\\n+package org.apache.archiva.web.xmlrpc.security;\\n+\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import java.util.ArrayList;\\n+import java.util.List;\\n+\\n+/**\\n+ * ServiceMethodsPermissionsMapping\\n+ * \\n+ * Used by the XmlRpcAuthenticationHandler to check the permissions specific to the requested service method.\\n+ * New methods in exposed services must be registered in the appropriate operation below. \\n+ * \\n+ * @version $Id: ServiceMethodsPermissionsMapping.java\\n+ */\\n+public class ServiceMethodsPermissionsMapping\\n+{   \\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_MANAGE_CONFIGURATION = new ArrayList<String>()\\n+    {\\n+        {\\n+            add( \\\"AdministrationService.configureRepositoryConsumer\\\" );\\n+            add( \\\"AdministrationService.configureDatabaseConsumer\\\" );\\n+            add( \\\"AdministrationService.executeDatabaseScanner\\\" );\\n+            add( \\\"AdministrationService.getAllManagedRepositories\\\" );\\n+            add( \\\"AdministrationService.getAllRemoteRepositories\\\" );\\n+            add( \\\"AdministrationService.getAllDatabaseConsumers\\\" );\\n+            add( \\\"AdministrationService.getAllRepositoryConsumers\\\" );\\n+            add( \\\"AdministrationService.deleteArtifact\\\" );\\n+        }\\n+    };\\n+\\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_RUN_INDEXER = new ArrayList<String>() \\n+    { \\n+        {\\n+            add( \\\"AdministrationService.executeRepositoryScanner\\\"); \\n+        }\\n+    };    \\n+    \\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_ACCESS_REPORT = new ArrayList<String>();\\n+    \\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_REPOSITORY_ACCESS = new ArrayList<String>();\\n+    \\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_ADD_REPOSITORY = new ArrayList<String>();\\n+    \\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_DELETE_REPOSITORY = new ArrayList<String>();\\n+    \\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_EDIT_REPOSITORY = new ArrayList<String>();\\n+    \\n+    public static final List<String> SERVICE_METHODS_FOR_OPERATION_REPOSITORY_UPLOAD = new ArrayList<String>();\\n+    \\n+}\"},{\"sha\":\"40ee2fd6fd690f2a8c898c7d6414c873da96d60b\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/main/java/org/apache/archiva/web/xmlrpc/security/XmlRpcAuthenticator.java\",\"status\":\"added\",\"additions\":117,\"deletions\":0,\"changes\":117,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticator.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticator.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticator.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,117 @@\\n+package org.apache.archiva.web.xmlrpc.security;\\r\\n+\\r\\n+/*\\r\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\r\\n+ * or more contributor license agreements.  See the NOTICE file\\r\\n+ * distributed with this work for additional information\\r\\n+ * regarding copyright ownership.  The ASF licenses this file\\r\\n+ * to you under the Apache License, Version 2.0 (the\\r\\n+ * \\\"License\\\"); you may not use this file except in compliance\\r\\n+ * with the License.  You may obtain a copy of the License at\\r\\n+ *\\r\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\r\\n+ *\\r\\n+ * Unless required by applicable law or agreed to in writing,\\r\\n+ * software distributed under the License is distributed on an\\r\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\r\\n+ * KIND, either express or implied.  See the License for the\\r\\n+ * specific language governing permissions and limitations\\r\\n+ * under the License.\\r\\n+ */\\r\\n+\\r\\n+import org.apache.maven.archiva.security.ArchivaRoleConstants;\\r\\n+import org.apache.xmlrpc.XmlRpcException;\\r\\n+import org.apache.xmlrpc.XmlRpcRequest;\\r\\n+import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;\\r\\n+import org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping.AuthenticationHandler;\\r\\n+import org.codehaus.plexus.redback.authentication.AuthenticationException;\\r\\n+import org.codehaus.plexus.redback.authentication.PasswordBasedAuthenticationDataSource;\\r\\n+import org.codehaus.plexus.redback.authorization.AuthorizationException;\\r\\n+import org.codehaus.plexus.redback.authorization.AuthorizationResult;\\r\\n+import org.codehaus.plexus.redback.policy.AccountLockedException;\\r\\n+import org.codehaus.plexus.redback.system.SecuritySession;\\r\\n+import org.codehaus.plexus.redback.system.SecuritySystem;\\r\\n+import org.codehaus.plexus.redback.users.UserNotFoundException;\\r\\n+\\r\\n+/**\\r\\n+ * XmlRpcAuthenticator\\r\\n+ * \\r\\n+ * Custom authentication and authorization handler for xmlrpc requests.\\r\\n+ * \\r\\n+ * @version $Id \\r\\n+ */\\r\\n+public class XmlRpcAuthenticator\\r\\n+    implements AuthenticationHandler\\r\\n+{\\r\\n+    private final SecuritySystem securitySystem;\\r\\n+\\r\\n+    public XmlRpcAuthenticator( SecuritySystem securitySystem )\\r\\n+    {\\r\\n+        this.securitySystem = securitySystem;\\r\\n+    }\\r\\n+\\r\\n+    public boolean isAuthorized( XmlRpcRequest pRequest )\\r\\n+        throws XmlRpcException\\r\\n+    {   \\r\\n+        if ( pRequest.getConfig() instanceof XmlRpcHttpRequestConfigImpl )\\r\\n+        {\\r\\n+            XmlRpcHttpRequestConfigImpl config = (XmlRpcHttpRequestConfigImpl) pRequest.getConfig();\\r\\n+            SecuritySession session =\\r\\n+                authenticate( new PasswordBasedAuthenticationDataSource( config.getBasicUserName(),\\r\\n+                                                                         config.getBasicPassword() ) );\\r\\n+            String method = pRequest.getMethodName();            \\r\\n+            AuthorizationResult result = authorize( session, method );\\r\\n+            \\r\\n+            return result.isAuthorized();\\r\\n+        }\\r\\n+\\r\\n+        throw new XmlRpcException( \\\"Unsupported transport (must be http)\\\" );\\r\\n+    }\\r\\n+\\r\\n+    private SecuritySession authenticate( PasswordBasedAuthenticationDataSource authenticationDataSource )\\r\\n+        throws XmlRpcException\\r\\n+    {\\r\\n+        try\\r\\n+        {\\r\\n+            return securitySystem.authenticate( authenticationDataSource );\\r\\n+        }\\r\\n+        catch ( AccountLockedException e )\\r\\n+        {\\r\\n+            throw new XmlRpcException( 401, e.getMessage(), e );\\r\\n+        }\\r\\n+        catch ( AuthenticationException e )\\r\\n+        {\\r\\n+            throw new XmlRpcException( 401, e.getMessage(), e );\\r\\n+        }\\r\\n+        catch ( UserNotFoundException e )\\r\\n+        {\\r\\n+            throw new XmlRpcException( 401, e.getMessage(), e );\\r\\n+        }\\r\\n+    }\\r\\n+\\r\\n+    private AuthorizationResult authorize( SecuritySession session, String methodName )\\r\\n+        throws XmlRpcException\\r\\n+    {   \\r\\n+        try\\r\\n+        {     \\r\\n+            // sample attempt at simplifying authorization checking of requested service method\\r\\n+            // TODO test with a sample client to see if this would work!\\r\\n+            if ( ServiceMethodsPermissionsMapping.SERVICE_METHODS_FOR_OPERATION_MANAGE_CONFIGURATION.contains( methodName ) )\\r\\n+            {                \\r\\n+                return securitySystem.authorize( session, ArchivaRoleConstants.OPERATION_MANAGE_CONFIGURATION );\\r\\n+            }\\r\\n+            else if ( ServiceMethodsPermissionsMapping.SERVICE_METHODS_FOR_OPERATION_RUN_INDEXER.contains( methodName ) )\\r\\n+            {                \\r\\n+                return securitySystem.authorize( session, ArchivaRoleConstants.OPERATION_RUN_INDEXER );\\r\\n+            }\\r\\n+            else\\r\\n+            {\\r\\n+                return securitySystem.authorize( session, ArchivaRoleConstants.GLOBAL_REPOSITORY_MANAGER_ROLE );\\r\\n+            }\\r\\n+        }\\r\\n+        catch ( AuthorizationException e )\\r\\n+        {\\r\\n+            throw new XmlRpcException( 401, e.getMessage(), e );\\r\\n+        }\\r\\n+    }\\r\\n+}\\r\"},{\"sha\":\"721aa828deec41311e731164a7d247fa6e2beb2c\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/java/org/apache/archiva/xmlrpc/security/XmlRpcAuthenticatorTest.java\",\"status\":\"added\",\"additions\":220,\"deletions\":0,\"changes\":220,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticatorTest.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticatorTest.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticatorTest.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,220 @@\\n+package org.apache.archiva.xmlrpc.security;\\r\\n+\\r\\n+/*\\r\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\r\\n+ * or more contributor license agreements.  See the NOTICE file\\r\\n+ * distributed with this work for additional information\\r\\n+ * regarding copyright ownership.  The ASF licenses this file\\r\\n+ * to you under the Apache License, Version 2.0 (the\\r\\n+ * \\\"License\\\"); you may not use this file except in compliance\\r\\n+ * with the License.  You may obtain a copy of the License at\\r\\n+ *\\r\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\r\\n+ *\\r\\n+ * Unless required by applicable law or agreed to in writing,\\r\\n+ * software distributed under the License is distributed on an\\r\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\r\\n+ * KIND, either express or implied.  See the License for the\\r\\n+ * specific language governing permissions and limitations\\r\\n+ * under the License.\\r\\n+ */\\r\\n+\\r\\n+import org.apache.archiva.web.xmlrpc.security.XmlRpcAuthenticator;\\r\\n+import org.apache.maven.archiva.security.ArchivaRoleConstants;\\r\\n+import org.apache.xmlrpc.XmlRpcRequest;\\r\\n+import org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl;\\r\\n+import org.codehaus.plexus.redback.role.RoleManager;\\r\\n+import org.codehaus.plexus.redback.system.SecuritySystem;\\r\\n+import org.codehaus.plexus.redback.users.User;\\r\\n+import org.codehaus.plexus.redback.users.UserManager;\\r\\n+import org.codehaus.plexus.redback.users.UserNotFoundException;\\r\\n+import org.codehaus.plexus.spring.PlexusInSpringTestCase;\\r\\n+import org.easymock.MockControl;\\r\\n+import org.easymock.classextension.MockClassControl;\\r\\n+\\r\\n+/**\\r\\n+ * XmlRpcAuthenticatorTest\\r\\n+ * \\r\\n+ * @version $Id XmlRpcAuthenticatorTest.java\\r\\n+ */\\r\\n+public class XmlRpcAuthenticatorTest\\r\\n+//extends AbstractDependencyInjectionSpringContextTests\\r\\n+    extends PlexusInSpringTestCase\\r\\n+{\\r\\n+    protected static final String USER_GUEST = \\\"guest\\\";\\r\\n+\\r\\n+    protected static final String USER_ADMIN = \\\"admin\\\";\\r\\n+\\r\\n+    protected static final String USER_ALPACA = \\\"alpaca\\\";\\r\\n+\\r\\n+    private static final String PASSWORD = \\\"password123\\\";\\r\\n+\\r\\n+    protected SecuritySystem securitySystem;\\r\\n+\\r\\n+    protected RoleManager roleManager;\\r\\n+    \\r\\n+    private MockControl xmlRpcRequestControl;\\r\\n+    \\r\\n+    private XmlRpcRequest xmlRpcRequest;\\r\\n+    \\r\\n+    private XmlRpcAuthenticator authenticator;\\r\\n+    \\r\\n+    private MockControl configControl;\\r\\n+    \\r\\n+    private XmlRpcHttpRequestConfigImpl config; \\r\\n+    \\r\\n+    public void setUp()\\r\\n+        throws Exception\\r\\n+    {\\r\\n+        super.setUp();\\r\\n+        \\r\\n+        securitySystem = (SecuritySystem) lookup( SecuritySystem.class, \\\"testable\\\" );        \\r\\n+        roleManager = (RoleManager) lookup( RoleManager.class, \\\"default\\\" );\\r\\n+        \\r\\n+        // Some basic asserts.\\r\\n+        assertNotNull( securitySystem );        \\r\\n+        assertNotNull( roleManager );\\r\\n+        \\r\\n+        // Setup Admin User.\\r\\n+        User adminUser = createUser( USER_ADMIN, \\\"Admin User\\\", null );\\r\\n+        roleManager.assignRole( ArchivaRoleConstants.TEMPLATE_SYSTEM_ADMIN, adminUser.getPrincipal().toString() );\\r\\n+\\r\\n+        // Setup Guest User.\\r\\n+        User guestUser = createUser( USER_GUEST, \\\"Guest User\\\", null );\\r\\n+        roleManager.assignRole( ArchivaRoleConstants.TEMPLATE_GUEST, guestUser.getPrincipal().toString() );\\r\\n+        \\r\\n+        configControl = MockClassControl.createControl( XmlRpcHttpRequestConfigImpl.class );\\r\\n+        config = ( XmlRpcHttpRequestConfigImpl ) configControl.getMock();\\r\\n+        \\r\\n+        xmlRpcRequestControl = MockControl.createControl( XmlRpcRequest.class );\\r\\n+        xmlRpcRequest = ( XmlRpcRequest ) xmlRpcRequestControl.getMock();    \\r\\n+        \\r\\n+        authenticator = new XmlRpcAuthenticator( securitySystem );        \\r\\n+    }\\r\\n+            \\r\\n+    private User createUser( String principal, String fullname, String password )\\r\\n+        throws UserNotFoundException\\r\\n+    {\\r\\n+        UserManager userManager = securitySystem.getUserManager();\\r\\n+    \\r\\n+        User user = userManager.createUser( principal, fullname, principal + \\\"@testable.archiva.apache.org\\\" );\\r\\n+        securitySystem.getPolicy().setEnabled( false );\\r\\n+        userManager.addUser( user );\\r\\n+        securitySystem.getPolicy().setEnabled( true );\\r\\n+        \\r\\n+        user.setPassword( password );        \\r\\n+        userManager.updateUser( user );\\r\\n+        \\r\\n+        return user;\\r\\n+    }\\r\\n+    \\r\\n+    public void testIsAuthorizedUserExistsButNotAuthorized()\\r\\n+        throws Exception\\r\\n+    {\\r\\n+        createUser( USER_ALPACA, \\\"Al 'Archiva' Paca\\\", PASSWORD );\\r\\n+        \\r\\n+        UserManager userManager = securitySystem.getUserManager();\\r\\n+        try\\r\\n+        {\\r\\n+            User user  = userManager.findUser( USER_ALPACA );\\r\\n+            assertEquals( USER_ALPACA, user.getPrincipal() );\\r\\n+        }\\r\\n+        catch ( UserNotFoundException e )\\r\\n+        {\\r\\n+            fail( \\\"User should exist in the database.\\\" );                        \\r\\n+        }\\r\\n+        \\r\\n+        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getConfig(), config, 2 );\\r\\n+        \\r\\n+        configControl.expectAndReturn( config.getBasicUserName(), USER_ALPACA );\\r\\n+        \\r\\n+        configControl.expectAndReturn( config.getBasicPassword(), PASSWORD );\\r\\n+        \\r\\n+        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getMethodName(),\\r\\n+                                              \\\"AdministrationService.getAllManagedRepositories\\\" );\\r\\n+        \\r\\n+        xmlRpcRequestControl.replay();\\r\\n+        configControl.replay();\\r\\n+        \\r\\n+        boolean isAuthorized = authenticator.isAuthorized( xmlRpcRequest );\\r\\n+        \\r\\n+        xmlRpcRequestControl.verify();\\r\\n+        configControl.verify();\\r\\n+        \\r\\n+        assertFalse( isAuthorized );\\r\\n+    }\\r\\n+    \\r\\n+    public void testIsAuthorizedUserExistsAndAuthorized()\\r\\n+        throws Exception\\r\\n+    {\\r\\n+        createUser( USER_ALPACA, \\\"Al 'Archiva' Paca\\\", PASSWORD );\\r\\n+        \\r\\n+        UserManager userManager = securitySystem.getUserManager();\\r\\n+        try\\r\\n+        {\\r\\n+            User user  = userManager.findUser( USER_ALPACA );\\r\\n+            assertEquals( USER_ALPACA, user.getPrincipal() );\\r\\n+        }\\r\\n+        catch ( UserNotFoundException e )\\r\\n+        {\\r\\n+            fail( \\\"User should exist in the database.\\\" );                        \\r\\n+        }\\r\\n+        \\r\\n+        //TODO cannot assign global repo manager role - it says role does not exist :|\\r\\n+        \\r\\n+        //roleManager.assignRole( ArchivaRoleConstants.GLOBAL_REPOSITORY_MANAGER_ROLE, USER_ALPACA );\\r\\n+        \\r\\n+        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getConfig(), config, 2 );\\r\\n+        \\r\\n+        configControl.expectAndReturn( config.getBasicUserName(), USER_ALPACA );\\r\\n+        \\r\\n+        configControl.expectAndReturn( config.getBasicPassword(), PASSWORD );\\r\\n+        \\r\\n+        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getMethodName(),\\r\\n+                                              \\\"AdministrationService.getAllManagedRepositories\\\" );\\r\\n+        \\r\\n+        xmlRpcRequestControl.replay();\\r\\n+        configControl.replay();\\r\\n+        \\r\\n+        boolean isAuthorized = authenticator.isAuthorized( xmlRpcRequest );\\r\\n+        \\r\\n+        xmlRpcRequestControl.verify();\\r\\n+        configControl.verify();\\r\\n+        \\r\\n+        //assertTrue( isAuthorized );\\r\\n+    }\\r\\n+    \\r\\n+    public void testIsAuthorizedUserDoesNotExist()\\r\\n+        throws Exception\\r\\n+    {   \\r\\n+        UserManager userManager = securitySystem.getUserManager();\\r\\n+        try\\r\\n+        {\\r\\n+            userManager.findUser( USER_ALPACA );\\r\\n+            fail( \\\"User should not exist in the database.\\\" );\\r\\n+        }\\r\\n+        catch ( UserNotFoundException e )\\r\\n+        {\\r\\n+            assertEquals( \\\"Unable to find user 'alpaca'\\\", e.getMessage() );            \\r\\n+        }\\r\\n+        \\r\\n+        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getConfig(), config, 2 );\\r\\n+        \\r\\n+        configControl.expectAndReturn( config.getBasicUserName(), USER_ALPACA );\\r\\n+        \\r\\n+        configControl.expectAndReturn( config.getBasicPassword(), PASSWORD );\\r\\n+        \\r\\n+        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getMethodName(),\\r\\n+                                              \\\"AdministrationService.getAllManagedRepositories\\\" );\\r\\n+        \\r\\n+        xmlRpcRequestControl.replay();\\r\\n+        configControl.replay();\\r\\n+        \\r\\n+        boolean isAuthorized = authenticator.isAuthorized( xmlRpcRequest );\\r\\n+                \\r\\n+        xmlRpcRequestControl.verify();\\r\\n+        configControl.verify();\\r\\n+        \\r\\n+        assertFalse( isAuthorized );\\r\\n+    }    \\r\\n+}\\r\"},{\"sha\":\"289043991a4543f12934cc6b3ac08e9efcf4c7d9\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/resources/META-INF/redback/redback-core.xml\",\"status\":\"added\",\"additions\":210,\"deletions\":0,\"changes\":210,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fredback%2Fredback-core.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fredback%2Fredback-core.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fredback%2Fredback-core.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,210 @@\\n+<redback-role-model>\\n+  <modelVersion>1.0.0</modelVersion>\\n+  <applications>\\n+    <application>\\n+      <id>Redback XWork Integration Security Core</id>\\n+      <version>1.0</version>\\n+      <resources>\\n+        <resource>\\n+          <id>global</id>\\n+          <name>*</name>\\n+          <permanent>true</permanent>\\n+          <description>\\n+            global resource implies full access for authorization\\n+          </description>\\n+        </resource>\\n+        <resource>\\n+          <id>username</id>\\n+          <name>${username}</name>\\n+          <permanent>true</permanent>\\n+          <description>\\n+            replaced with the username of the principal at authorization\\n+            check time\\n+          </description>\\n+        </resource>\\n+      </resources>\\n+      <operations>\\n+        <operation>\\n+          <id>configuration-edit</id>\\n+          <name>configuration-edit</name>\\n+          <description>edit configuration</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-user-create</id>\\n+          <name>user-management-user-create</name>\\n+          <description>create user</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-user-edit</id>\\n+          <name>user-management-user-edit</name>\\n+          <description>edit user</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-user-role</id>\\n+          <name>user-management-user-role</name>\\n+          <description>user roles</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-user-delete</id>\\n+          <name>user-management-user-delete</name>\\n+          <description>delete user</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-user-list</id>\\n+          <name>user-management-user-list</name>\\n+          <description>list users</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-role-grant</id>\\n+          <name>user-management-role-grant</name>\\n+          <description>grant role</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-role-drop</id>\\n+          <name>user-management-role-drop</name>\\n+          <description>drop role</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>user-management-rbac-admin</id>\\n+          <name>user-management-rbac-admin</name>\\n+          <description>administer rbac</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>guest-access</id>\\n+          <name>guest-access</name>\\n+          <description>access guest</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+        <operation>\\n+          <id>add-repository</id>\\n+          <name>add-repository</name>\\n+          <description>add repository</description>\\n+          <permanent>true</permanent>\\n+        </operation>\\n+      </operations>\\n+      <roles>\\n+        <role>\\n+          <id>system-administrator</id>\\n+          <name>System Administrator</name>\\n+          <permanent>true</permanent>\\n+          <assignable>true</assignable>\\n+          <permissions>\\n+            <permission>\\n+              <id>edit-redback-configuration</id>\\n+              <name>Edit Redback Configuration</name>\\n+              <operation>configuration-edit</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+            <permission>\\n+              <id>manage-rbac-setup</id>\\n+              <name>User RBAC Management</name>\\n+              <operation>user-management-rbac-admin</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+          </permissions>\\n+          <childRoles>\\n+            <childRole>user-administrator</childRole>\\n+          </childRoles>\\n+        </role>\\n+        <role>\\n+          <id>user-administrator</id>\\n+          <name>User Administrator</name>\\n+          <permanent>true</permanent>\\n+          <assignable>true</assignable>\\n+          <permissions>\\n+            <permission>\\n+              <id>drop-roles-for-anyone</id>\\n+              <name>Drop Roles for Anyone</name>\\n+              <operation>user-management-role-drop</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+            <permission>\\n+              <id>grant-roles-for-anyone</id>\\n+              <name>Grant Roles for Anyone</name>\\n+              <operation>user-management-role-grant</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+            <permission>\\n+              <id>user-create</id>\\n+              <name>Create Users</name>\\n+              <operation>user-management-user-create</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+            <permission>\\n+              <id>user-delete</id>\\n+              <name>Delete Users</name>\\n+              <operation>user-management-user-delete</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+            <permission>\\n+              <id>user-edit</id>\\n+              <name>Edit Users</name>\\n+              <operation>user-management-user-edit</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+            <permission>\\n+              <id>access-users-roles</id>\\n+              <name>Access Users Roles</name>\\n+              <operation>user-management-user-role</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+            <permission>\\n+              <id>access-user-list</id>\\n+              <name>Access User List</name>\\n+              <operation>user-management-user-list</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+          </permissions>\\n+        </role>\\n+        <role>\\n+          <id>registered-user</id>\\n+          <name>Registered User</name>\\n+          <permanent>true</permanent>\\n+          <assignable>true</assignable>\\n+          <permissions>\\n+            <permission>\\n+              <id>edit-user-by-username</id>\\n+              <name>Edit User Data by Username</name>\\n+              <operation>user-management-user-edit</operation>\\n+              <resource>username</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+          </permissions>\\n+        </role>\\n+        <role>\\n+          <id>guest</id>\\n+          <name>Guest</name>\\n+          <permanent>true</permanent>\\n+          <assignable>true</assignable>\\n+          <permissions>\\n+            <permission>\\n+              <id>guest-permission</id>\\n+              <name>Guest Permission</name>\\n+              <operation>guest-access</operation>\\n+              <resource>global</resource>\\n+              <permanent>true</permanent>\\n+            </permission>\\n+          </permissions>\\n+        </role>        \\n+      </roles>\\n+    </application>\\n+  </applications>\\n+</redback-role-model>\\n\\\\ No newline at end of file\"},{\"sha\":\"9c7b9344f4f72704e22f8d87c741e7a466a9e723\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/resources/org/apache/archiva/xmlrpc/security/XmlRpcAuthenticatorTest.xml\",\"status\":\"added\",\"additions\":192,\"deletions\":0,\"changes\":192,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Farchiva%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticatorTest.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Farchiva%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticatorTest.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-security%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Farchiva%2Fxmlrpc%2Fsecurity%2FXmlRpcAuthenticatorTest.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,192 @@\\n+<?xml version=\\\"1.0\\\" ?>\\n+<component-set>\\n+  <components>\\n+     \\n+    <!-- x  \\n+    <component>\\n+      <role>org.apache.maven.archiva.security.UserRepositories</role>\\n+      <role-hint>default</role-hint>\\n+      <implementation>org.apache.maven.archiva.security.DefaultUserRepositories</implementation>\\n+      <description>DefaultUserRepositories</description>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.system.SecuritySystem</role>\\n+          <role-hint>testable</role-hint>\\n+          <field-name>securitySystem</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.rbac.RBACManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>rbacManager</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.role.RoleManager</role>\\n+          <role-hint>default</role-hint>\\n+          <field-name>roleManager</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.apache.maven.archiva.configuration.ArchivaConfiguration</role>\\n+          <field-name>archivaConfiguration</field-name>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+     -->\\n+    \\n+    <component>\\n+      <role>org.codehaus.plexus.redback.system.SecuritySystem</role>\\n+      <role-hint>testable</role-hint>\\n+      <implementation>org.codehaus.plexus.redback.system.DefaultSecuritySystem</implementation>\\n+      <description>DefaultSecuritySystem:</description>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.authentication.AuthenticationManager</role>\\n+          <field-name>authnManager</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.authorization.Authorizer</role>\\n+          <role-hint>rbac</role-hint>\\n+          <field-name>authorizer</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.users.UserManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>userManager</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.keys.KeyManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>keyManager</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.policy.UserSecurityPolicy</role>\\n+          <field-name>policy</field-name>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    \\n+    <component>\\n+      <role>org.codehaus.plexus.redback.authorization.Authorizer</role>\\n+      <role-hint>rbac</role-hint>\\n+      <implementation>org.codehaus.plexus.redback.authorization.rbac.RbacAuthorizer</implementation>\\n+      <description>RbacAuthorizer:</description>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.rbac.RBACManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>manager</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.users.UserManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>userManager</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.authorization.rbac.evaluator.PermissionEvaluator</role>\\n+          <role-hint>default</role-hint>\\n+          <field-name>evaluator</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.configuration.UserConfiguration</role>\\n+          <role-hint>default</role-hint>\\n+          <field-name>config</field-name>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    \\n+    <component>\\n+      <role>org.codehaus.plexus.redback.authorization.rbac.evaluator.PermissionEvaluator</role>\\n+      <role-hint>default</role-hint>\\n+      <implementation>org.codehaus.plexus.redback.authorization.rbac.evaluator.DefaultPermissionEvaluator</implementation>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.users.UserManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>userManager</field-name>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    \\n+    <component>\\n+      <role>org.codehaus.plexus.redback.role.RoleManager</role>\\n+      <role-hint>default</role-hint>\\n+      <implementation>org.codehaus.plexus.redback.role.DefaultRoleManager</implementation>\\n+      <description>RoleProfileManager:</description>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.role.validator.RoleModelValidator</role>\\n+          <role-hint>default</role-hint>\\n+          <field-name>modelValidator</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.role.processor.RoleModelProcessor</role>\\n+          <role-hint>default</role-hint>\\n+          <field-name>modelProcessor</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.role.template.RoleTemplateProcessor</role>\\n+          <role-hint>default</role-hint>\\n+          <field-name>templateProcessor</field-name>\\n+        </requirement>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.rbac.RBACManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>rbacManager</field-name>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    \\n+    <component>\\n+      <role>org.codehaus.plexus.redback.role.processor.RoleModelProcessor</role>\\n+      <role-hint>default</role-hint>\\n+      <implementation>org.codehaus.plexus.redback.role.processor.DefaultRoleModelProcessor</implementation>\\n+      <description>DefaultRoleModelProcessor: inserts the components of the model that can be populated into the rbac manager</description>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.rbac.RBACManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>rbacManager</field-name>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    \\n+    <component>\\n+      <role>org.codehaus.plexus.redback.role.template.RoleTemplateProcessor</role>\\n+      <role-hint>default</role-hint>\\n+      <implementation>org.codehaus.plexus.redback.role.template.DefaultRoleTemplateProcessor</implementation>\\n+      <description>DefaultRoleTemplateProcessor: inserts the components of a template into the rbac manager</description>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.redback.rbac.RBACManager</role>\\n+          <role-hint>memory</role-hint>\\n+          <field-name>rbacManager</field-name>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    \\n+    <!-- \\n+    <component>\\n+      <role>org.apache.maven.archiva.configuration.ArchivaConfiguration</role>\\n+      <implementation>org.apache.maven.archiva.configuration.DefaultArchivaConfiguration</implementation>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.registry.Registry</role>\\n+          <role-hint>configured</role-hint>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    <component>\\n+      <role>org.codehaus.plexus.registry.Registry</role>\\n+      <role-hint>configured</role-hint>\\n+      <implementation>org.codehaus.plexus.registry.commons.CommonsConfigurationRegistry</implementation>\\n+      <configuration>\\n+        <properties>\\n+          <system/>\\n+          <xml fileName=\\\"${basedir}/target/test-conf/archiva.xml\\\"\\n+               config-name=\\\"org.apache.maven.archiva.base\\\" config-at=\\\"org.apache.maven.archiva\\\"/>\\n+        </properties>\\n+      </configuration>\\n+    </component>\\n+     -->\\n+     \\n+  </components>\\n+</component-set>\\n\\\\ No newline at end of file\"},{\"sha\":\"8d68c8df35a34c64695fefe4a23d7353ddd0e92b\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/pom.xml\",\"status\":\"added\",\"additions\":60,\"deletions\":0,\"changes\":60,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fpom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fpom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fpom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,60 @@\\n+<?xml version=\\\"1.0\\\"?>\\n+<!--\\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\\n+  ~ or more contributor license agreements.  See the NOTICE file\\n+  ~ distributed with this work for additional information\\n+  ~ regarding copyright ownership.  The ASF licenses this file\\n+  ~ to you under the Apache License, Version 2.0 (the\\n+  ~ \\\"License\\\"); you may not use this file except in compliance\\n+  ~ with the License.  You may obtain a copy of the License at\\n+  ~\\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\\n+  ~\\n+  ~ Unless required by applicable law or agreed to in writing,\\n+  ~ software distributed under the License is distributed on an\\n+  ~ \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+  ~ KIND, either express or implied.  See the License for the\\n+  ~ specific language governing permissions and limitations\\n+  ~ under the License.\\n+  -->\\n+\\n+<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\"\\n+\\txmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n+\\txsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\n+\\t\\n+  <modelVersion>4.0.0</modelVersion>\\n+  <parent>\\n+    <groupId>org.apache.archiva</groupId>\\n+    <artifactId>archiva-xmlrpc</artifactId>\\n+    <version>1.2-SNAPSHOT</version>\\n+    <relativePath>../pom.xml</relativePath>\\n+  </parent>\\n+  <artifactId>archiva-xmlrpc-services</artifactId>\\n+  <name>Archiva Web :: XML-RPC Services</name>\\n+  <dependencies>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-xmlrpc-api</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-configuration</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.apache.archiva</groupId>\\n+      <artifactId>archiva-scheduled</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>javax.servlet</groupId>\\n+      <artifactId>servlet-api</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.springframework</groupId>\\n+      <artifactId>spring-web</artifactId>\\n+    </dependency>\\n+    <dependency>\\n+      <groupId>org.codehaus.plexus</groupId>\\n+      <artifactId>plexus-spring</artifactId>\\n+    </dependency>\\n+  </dependencies>\\n+</project>\"},{\"sha\":\"7bb2882b246595fe98401eeffd3f09ead5a8b481\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java\",\"status\":\"added\",\"additions\":440,\"deletions\":0,\"changes\":440,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImpl.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImpl.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImpl.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,440 @@\\n+package org.apache.archiva.web.xmlrpc.services;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import java.util.ArrayList;\\n+import java.util.List;\\n+\\n+import org.apache.archiva.web.xmlrpc.api.AdministrationService;\\n+import org.apache.archiva.web.xmlrpc.api.beans.ManagedRepository;\\n+import org.apache.archiva.web.xmlrpc.api.beans.RemoteRepository;\\n+import org.apache.maven.archiva.configuration.ArchivaConfiguration;\\n+import org.apache.maven.archiva.configuration.Configuration;\\n+import org.apache.maven.archiva.configuration.DatabaseScanningConfiguration;\\n+import org.apache.maven.archiva.configuration.IndeterminateConfigurationException;\\n+import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;\\n+import org.apache.maven.archiva.configuration.RemoteRepositoryConfiguration;\\n+import org.apache.maven.archiva.configuration.RepositoryScanningConfiguration;\\n+import org.apache.maven.archiva.consumers.ConsumerException;\\n+import org.apache.maven.archiva.consumers.DatabaseCleanupConsumer;\\n+import org.apache.maven.archiva.consumers.DatabaseUnprocessedArtifactConsumer;\\n+import org.apache.maven.archiva.consumers.InvalidRepositoryContentConsumer;\\n+import org.apache.maven.archiva.consumers.KnownRepositoryContentConsumer;\\n+import org.apache.maven.archiva.database.ArchivaDatabaseException;\\n+import org.apache.maven.archiva.database.ArtifactDAO;\\n+import org.apache.maven.archiva.database.constraints.ArtifactVersionsConstraint;\\n+import org.apache.maven.archiva.database.updater.DatabaseConsumers;\\n+import org.apache.maven.archiva.model.ArchivaArtifact;\\n+import org.apache.maven.archiva.model.VersionedReference;\\n+import org.apache.maven.archiva.repository.ContentNotFoundException;\\n+import org.apache.maven.archiva.repository.ManagedRepositoryContent;\\n+import org.apache.maven.archiva.repository.RepositoryContentFactory;\\n+import org.apache.maven.archiva.repository.RepositoryException;\\n+import org.apache.maven.archiva.repository.RepositoryNotFoundException;\\n+import org.apache.maven.archiva.repository.scanner.RepositoryContentConsumers;\\n+import org.apache.maven.archiva.scheduled.ArchivaTaskScheduler;\\n+import org.apache.maven.archiva.scheduled.DefaultArchivaTaskScheduler;\\n+import org.apache.maven.archiva.scheduled.tasks.ArchivaTask;\\n+import org.apache.maven.archiva.scheduled.tasks.DatabaseTask;\\n+import org.apache.maven.archiva.scheduled.tasks.RepositoryTask;\\n+import org.codehaus.plexus.registry.RegistryException;\\n+\\n+/**\\n+ * AdministrationServiceImpl\\n+ * \\n+ * @version $Id: AdministrationServiceImpl.java\\n+ */\\n+public class AdministrationServiceImpl\\n+    implements AdministrationService\\n+{    \\n+    private ArchivaConfiguration archivaConfiguration;\\n+        \\n+    private RepositoryContentConsumers repoConsumersUtil;\\n+        \\n+    private DatabaseConsumers dbConsumersUtil;\\n+            \\n+    private RepositoryContentFactory repoFactory;\\n+    \\n+    private ArtifactDAO artifactDAO;\\n+    \\n+    private DatabaseCleanupConsumer cleanupArtifacts;\\n+   \\n+    private DatabaseCleanupConsumer cleanupProjects;\\n+    \\n+    private ArchivaTaskScheduler taskScheduler;\\n+    \\n+    public AdministrationServiceImpl( ArchivaConfiguration archivaConfig, RepositoryContentConsumers repoConsumersUtil,\\n+                                      DatabaseConsumers dbConsumersUtil, RepositoryContentFactory repoFactory,\\n+                                      ArtifactDAO artifactDAO, DatabaseCleanupConsumer cleanupArtifacts,\\n+                                      DatabaseCleanupConsumer cleanupProjects, ArchivaTaskScheduler taskScheduler )\\n+    {   \\n+        this.archivaConfiguration = archivaConfig;\\n+        this.repoConsumersUtil = repoConsumersUtil;\\n+        this.dbConsumersUtil = dbConsumersUtil;\\n+        this.repoFactory = repoFactory;\\n+        this.artifactDAO = artifactDAO;\\n+        this.cleanupArtifacts = cleanupArtifacts;\\n+        this.cleanupProjects = cleanupProjects;             \\n+        this.taskScheduler = taskScheduler;\\n+    }\\n+        \\n+    /**\\n+     * @see AdministrationService#configureDatabaseConsumer(String, boolean)\\n+     */\\n+    public Boolean configureDatabaseConsumer( String consumerId, boolean enable ) throws Exception\\n+    {\\n+        List<DatabaseCleanupConsumer> cleanupConsumers = dbConsumersUtil.getAvailableCleanupConsumers();\\n+        List<DatabaseUnprocessedArtifactConsumer> unprocessedConsumers =\\n+            dbConsumersUtil.getAvailableUnprocessedConsumers();\\n+        \\n+        boolean found = false;\\n+        boolean isCleanupConsumer = false;        \\n+        for( DatabaseCleanupConsumer consumer : cleanupConsumers )\\n+        {\\n+            if( consumer.getId().equals( consumerId ) )\\n+            {\\n+                found = true;\\n+                isCleanupConsumer = true;\\n+                break;\\n+            }\\n+        }\\n+        \\n+        if( !found )\\n+        {\\n+            for( DatabaseUnprocessedArtifactConsumer consumer : unprocessedConsumers )\\n+            {\\n+                if( consumer.getId().equals( consumerId ) )\\n+                {\\n+                    found = true;\\n+                    break;\\n+                }\\n+            }\\n+        }\\n+        \\n+        if( !found )\\n+        {\\n+            throw new Exception( \\\"Invalid database consumer.\\\" );\\n+        }\\n+        \\n+        Configuration config = archivaConfiguration.getConfiguration();\\n+        DatabaseScanningConfiguration dbScanningConfig = config.getDatabaseScanning();\\n+        \\n+        if( isCleanupConsumer )\\n+        {\\n+            dbScanningConfig.addCleanupConsumer( consumerId );            \\n+        }\\n+        else\\n+        {\\n+            dbScanningConfig.addUnprocessedConsumer( consumerId );\\n+        }\\n+        \\n+        config.setDatabaseScanning( dbScanningConfig );        \\n+        saveConfiguration( config );\\n+        \\n+        return new Boolean( true );\\n+    }\\n+\\n+    /**\\n+     * @see AdministrationService#configureRepositoryConsumer(String, String, boolean)\\n+     */\\n+    public Boolean configureRepositoryConsumer( String repoId, String consumerId, boolean enable )\\n+        throws Exception\\n+    {\\n+        // TODO use repoId once consumers are configured per repository! (MRM-930)\\n+        \\n+        List<KnownRepositoryContentConsumer> knownConsumers = repoConsumersUtil.getAvailableKnownConsumers();\\n+        List<InvalidRepositoryContentConsumer> invalidConsumers = repoConsumersUtil.getAvailableInvalidConsumers();\\n+        \\n+        boolean found = false;\\n+        boolean isKnownContentConsumer = false;\\n+        for( KnownRepositoryContentConsumer consumer : knownConsumers )\\n+        {\\n+            if( consumer.getId().equals( consumerId ) )\\n+            {\\n+                found = true;\\n+                isKnownContentConsumer = true;\\n+                break;\\n+            }\\n+        }\\n+        \\n+        if( !found )\\n+        {\\n+            for( InvalidRepositoryContentConsumer consumer : invalidConsumers )\\n+            {\\n+                if( consumer.getId().equals( consumerId ) )\\n+                {\\n+                    found = true;\\n+                    break;\\n+                }\\n+            }\\n+        }\\n+        \\n+        if( !found )\\n+        {\\n+            throw new Exception( \\\"Invalid repository consumer.\\\" );\\n+        }\\n+        \\n+        Configuration config = archivaConfiguration.getConfiguration();\\n+        RepositoryScanningConfiguration repoScanningConfig = config.getRepositoryScanning();\\n+        \\n+        if( isKnownContentConsumer )\\n+        {\\n+            repoScanningConfig.addKnownContentConsumer( consumerId );\\n+        }\\n+        else\\n+        {\\n+            repoScanningConfig.addInvalidContentConsumer( consumerId );\\n+        }\\n+        \\n+        config.setRepositoryScanning( repoScanningConfig );        \\n+        saveConfiguration( config );\\n+        \\n+        return new Boolean( true );\\n+    }\\n+    \\n+    /**\\n+     * @see AdministrationService#deleteArtifact(String, String, String, String)\\n+     */\\n+    public Boolean deleteArtifact( String repoId, String groupId, String artifactId, String version )\\n+        throws Exception\\n+    {\\n+        Configuration config = archivaConfiguration.getConfiguration();\\n+        ManagedRepositoryConfiguration repoConfig = config.findManagedRepositoryById( repoId );\\n+        \\n+        if( repoConfig == null )\\n+        {\\n+            throw new Exception( \\\"Repository does not exist.\\\" );\\n+        }\\n+            \\n+        try\\n+        {\\n+            ManagedRepositoryContent repoContent = repoFactory.getManagedRepositoryContent( repoId );            \\n+            VersionedReference ref = new VersionedReference();\\n+            ref.setGroupId( groupId );\\n+            ref.setArtifactId( artifactId );\\n+            ref.setVersion( version );\\n+                   \\n+            // delete from file system\\n+            repoContent.deleteVersion( ref );\\n+            \\n+            ArtifactVersionsConstraint constraint = new ArtifactVersionsConstraint( repoId, groupId, artifactId, false );\\n+            List<ArchivaArtifact> artifacts = null;\\n+            \\n+            try\\n+            {\\n+                artifacts = artifactDAO.queryArtifacts( constraint );\\n+                if( artifacts == null )\\n+                {\\n+                    return true;\\n+                }\\n+            }\\n+            catch ( ArchivaDatabaseException e )\\n+            {\\n+                throw new Exception( \\\"Error occurred while cleaning up database.\\\" );\\n+            }            \\n+               \\n+            // cleanup db manually? or use the cleanup consumers as what is done now?\\n+            for( ArchivaArtifact artifact : artifacts )\\n+            {\\n+                if( artifact.getVersion().equals( version ) )\\n+                {\\n+                    try\\n+                    {\\n+                        cleanupArtifacts.processArchivaArtifact( artifact );\\n+                        cleanupProjects.processArchivaArtifact( artifact );\\n+                    }\\n+                    catch ( ConsumerException ce )\\n+                    {\\n+                        // log error\\n+                        continue;\\n+                    }                   \\n+                }\\n+            }\\n+        }\\n+        catch ( ContentNotFoundException e )\\n+        {\\n+            throw new Exception( \\\"Artifact does not exist.\\\" );\\n+        }\\n+        catch ( RepositoryNotFoundException e )\\n+        {\\n+            throw new Exception( \\\"Repository does not exist.\\\" );\\n+        }\\n+        catch ( RepositoryException e )\\n+        {\\n+            throw new Exception( \\\"Repository exception occurred.\\\" );\\n+        }\\n+        \\n+        return new Boolean( true );\\n+    }\\n+\\n+    /**\\n+     * @see AdministrationService#executeDatabaseScanner()\\n+     */\\n+    public Boolean executeDatabaseScanner() throws Exception\\n+    {\\n+        if ( taskScheduler.isProcessingDatabaseTask() )\\n+        {\\n+            return false;\\n+        }\\n+\\n+        DatabaseTask task = new DatabaseTask();\\n+        task.setName( DefaultArchivaTaskScheduler.DATABASE_JOB + \\\":user-requested-via-web-service\\\" );\\n+        task.setQueuePolicy( ArchivaTask.QUEUE_POLICY_WAIT );\\n+        \\n+        taskScheduler.queueDatabaseTask( task );           \\n+        \\n+        return new Boolean( true );\\n+    }\\n+\\n+    /**\\n+     * @see AdministrationService#executeRepositoryScanner(String)\\n+     */\\n+    public Boolean executeRepositoryScanner( String repoId ) throws Exception\\n+    {\\n+        Configuration config = archivaConfiguration.getConfiguration();\\n+        if( config.findManagedRepositoryById( repoId ) == null )\\n+        {\\n+            throw new Exception( \\\"Repository does not exist.\\\" );\\n+        }\\n+        \\n+        if ( taskScheduler.isProcessingAnyRepositoryTask() )\\n+        {\\n+            if ( taskScheduler.isProcessingRepositoryTask( repoId ) )\\n+            {\\n+                return false;\\n+            }\\n+        }\\n+\\n+        RepositoryTask task = new RepositoryTask();\\n+        task.setRepositoryId( repoId );\\n+        task.setName( DefaultArchivaTaskScheduler.REPOSITORY_JOB + \\\":\\\" + repoId );\\n+        task.setQueuePolicy( ArchivaTask.QUEUE_POLICY_WAIT );\\n+\\n+        taskScheduler.queueRepositoryTask( task );          \\n+        \\n+        return new Boolean( true );\\n+    }\\n+\\n+    /**\\n+     * @see AdministrationService#getAllDatabaseConsumers()\\n+     */\\n+    public List<String> getAllDatabaseConsumers()\\n+    {\\n+        List<String> consumers = new ArrayList<String>();\\n+        \\n+        List<DatabaseCleanupConsumer> cleanupConsumers = dbConsumersUtil.getAvailableCleanupConsumers();\\n+        List<DatabaseUnprocessedArtifactConsumer> unprocessedConsumers = dbConsumersUtil.getAvailableUnprocessedConsumers();\\n+        \\n+        for( DatabaseCleanupConsumer consumer : cleanupConsumers )\\n+        {\\n+            consumers.add( consumer.getId() );\\n+        }  \\n+        \\n+        for( DatabaseUnprocessedArtifactConsumer consumer : unprocessedConsumers )\\n+        {\\n+            consumers.add( consumer.getId() );\\n+        } \\n+        \\n+        return consumers;\\n+    }\\n+\\n+    /**\\n+     * @see AdministrationService#getAllRepositoryConsumers()\\n+     */\\n+    public List<String> getAllRepositoryConsumers()\\n+    {\\n+        List<String> consumers = new ArrayList<String>();\\n+                \\n+        List<KnownRepositoryContentConsumer> knownConsumers = repoConsumersUtil.getAvailableKnownConsumers();\\n+        List<InvalidRepositoryContentConsumer> invalidConsumers = repoConsumersUtil.getAvailableInvalidConsumers();\\n+        \\n+        for( KnownRepositoryContentConsumer consumer : knownConsumers )\\n+        {\\n+            consumers.add( consumer.getId() );\\n+        }\\n+        \\n+        for( InvalidRepositoryContentConsumer consumer : invalidConsumers )\\n+        {\\n+            consumers.add( consumer.getId() );\\n+        }\\n+\\n+        return consumers;\\n+    }\\n+\\n+    /**\\n+     * @see AdministrationService#getAllManagedRepositories()\\n+     */\\n+    public List<ManagedRepository> getAllManagedRepositories()\\n+    {\\n+        List<ManagedRepository> managedRepos = new ArrayList<ManagedRepository>();\\n+        \\n+        Configuration config = archivaConfiguration.getConfiguration();\\n+        List<ManagedRepositoryConfiguration> managedRepoConfigs = config.getManagedRepositories();\\n+        \\n+        for( ManagedRepositoryConfiguration repoConfig : managedRepoConfigs )\\n+        {\\n+            // TODO fix resolution of repo url!            \\n+            ManagedRepository repo =\\n+                new ManagedRepository( repoConfig.getId(), repoConfig.getName(), \\\"URL\\\", repoConfig.getLayout(),\\n+                                       repoConfig.isSnapshots(), repoConfig.isReleases() );  \\n+            managedRepos.add( repo );\\n+        }\\n+        \\n+        return managedRepos;\\n+    }\\n+\\n+    /**\\n+     * @see AdministrationService#getAllRemoteRepositories()\\n+     */\\n+    public List<RemoteRepository> getAllRemoteRepositories()\\n+    {\\n+        List<RemoteRepository> remoteRepos = new ArrayList<RemoteRepository>();\\n+        \\n+        Configuration config = archivaConfiguration.getConfiguration();\\n+        List<RemoteRepositoryConfiguration> remoteRepoConfigs = config.getRemoteRepositories();\\n+        \\n+        for( RemoteRepositoryConfiguration repoConfig : remoteRepoConfigs )\\n+        {\\n+            RemoteRepository repo =\\n+                new RemoteRepository( repoConfig.getId(), repoConfig.getName(), repoConfig.getUrl(),\\n+                                      repoConfig.getLayout() );\\n+            remoteRepos.add( repo );\\n+        }\\n+        \\n+        return remoteRepos;\\n+    }\\n+\\n+    private void saveConfiguration( Configuration config )\\n+        throws Exception\\n+    {\\n+        try\\n+        {\\n+            archivaConfiguration.save( config );\\n+        }\\n+        catch(  RegistryException e )\\n+        {\\n+            throw new Exception( \\\"Error occurred in the registry.\\\" );\\n+        }\\n+        catch ( IndeterminateConfigurationException e )\\n+        {\\n+            throw new Exception( \\\"Error occurred while saving the configuration.\\\" );    \\n+        }\\n+    }    \\n+}\"},{\"sha\":\"aa47f5f0e2dff9c4a02cb71f95a4e6e7774544e1\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/PingServiceImpl.java\",\"status\":\"added\",\"additions\":30,\"deletions\":0,\"changes\":30,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FPingServiceImpl.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FPingServiceImpl.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FPingServiceImpl.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,30 @@\\n+package org.apache.archiva.web.xmlrpc.services;\\r\\n+\\r\\n+/*\\r\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\r\\n+ * or more contributor license agreements.  See the NOTICE file\\r\\n+ * distributed with this work for additional information\\r\\n+ * regarding copyright ownership.  The ASF licenses this file\\r\\n+ * to you under the Apache License, Version 2.0 (the\\r\\n+ * \\\"License\\\"); you may not use this file except in compliance\\r\\n+ * with the License.  You may obtain a copy of the License at\\r\\n+ *\\r\\n+ *  http://www.apache.org/licenses/LICENSE-2.0\\r\\n+ *\\r\\n+ * Unless required by applicable law or agreed to in writing,\\r\\n+ * software distributed under the License is distributed on an\\r\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\r\\n+ * KIND, either express or implied.  See the License for the\\r\\n+ * specific language governing permissions and limitations\\r\\n+ * under the License.\\r\\n+ */\\r\\n+\\r\\n+import org.apache.archiva.web.xmlrpc.api.TestService;\\r\\n+\\r\\n+public class PingServiceImpl implements TestService\\r\\n+{\\r\\n+    public String ping()\\r\\n+    {\\r\\n+        return \\\"pong\\\";\\r\\n+    }\\r\\n+}\\r\"},{\"sha\":\"a7f85f7e13a03646d0ce491dc699fa746c4739b0\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java\",\"status\":\"added\",\"additions\":954,\"deletions\":0,\"changes\":954,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImplTest.java\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImplTest.java\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImplTest.java?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,954 @@\\n+package org.apache.archiva.web.xmlrpc.services;\\n+\\n+/*\\n+ * Licensed to the Apache Software Foundation (ASF) under one\\n+ * or more contributor license agreements.  See the NOTICE file\\n+ * distributed with this work for additional information\\n+ * regarding copyright ownership.  The ASF licenses this file\\n+ * to you under the Apache License, Version 2.0 (the\\n+ * \\\"License\\\"); you may not use this file except in compliance\\n+ * with the License.  You may obtain a copy of the License at\\n+ *\\n+ *   http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing,\\n+ * software distributed under the License is distributed on an\\n+ * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+ * KIND, either express or implied.  See the License for the\\n+ * specific language governing permissions and limitations\\n+ * under the License.\\n+ */\\n+\\n+import java.io.File;\\n+import java.util.ArrayList;\\n+import java.util.List;\\n+\\n+import org.apache.archiva.web.xmlrpc.api.beans.ManagedRepository;\\n+import org.apache.archiva.web.xmlrpc.api.beans.RemoteRepository;\\n+import org.apache.maven.archiva.configuration.ArchivaConfiguration;\\n+import org.apache.maven.archiva.configuration.Configuration;\\n+import org.apache.maven.archiva.configuration.DatabaseScanningConfiguration;\\n+import org.apache.maven.archiva.configuration.FileTypes;\\n+import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;\\n+import org.apache.maven.archiva.configuration.RemoteRepositoryConfiguration;\\n+import org.apache.maven.archiva.configuration.RepositoryScanningConfiguration;\\n+import org.apache.maven.archiva.consumers.DatabaseCleanupConsumer;\\n+import org.apache.maven.archiva.consumers.DatabaseUnprocessedArtifactConsumer;\\n+import org.apache.maven.archiva.consumers.InvalidRepositoryContentConsumer;\\n+import org.apache.maven.archiva.consumers.KnownRepositoryContentConsumer;\\n+import org.apache.maven.archiva.database.ArtifactDAO;\\n+import org.apache.maven.archiva.database.updater.DatabaseConsumers;\\n+import org.apache.maven.archiva.model.ArchivaArtifact;\\n+import org.apache.maven.archiva.model.ArchivaArtifactModel;\\n+import org.apache.maven.archiva.model.ArtifactReference;\\n+import org.apache.maven.archiva.repository.RepositoryContentFactory;\\n+import org.apache.maven.archiva.repository.content.ManagedDefaultRepositoryContent;\\n+import org.apache.maven.archiva.repository.content.ManagedLegacyRepositoryContent;\\n+import org.apache.maven.archiva.repository.content.PathParser;\\n+import org.apache.maven.archiva.repository.layout.LayoutException;\\n+import org.apache.maven.archiva.repository.scanner.RepositoryContentConsumers;\\n+import org.apache.maven.archiva.scheduled.ArchivaTaskScheduler;\\n+import org.apache.maven.archiva.scheduled.tasks.DatabaseTask;\\n+import org.apache.maven.archiva.scheduled.tasks.RepositoryTask;\\n+import org.codehaus.plexus.spring.PlexusInSpringTestCase;\\n+import org.easymock.MockControl;\\n+import org.easymock.classextension.MockClassControl;\\n+\\n+/**\\n+ * AdministrationServiceImplTest\\n+ * \\n+ * @version $Id: AdministrationServiceImplTest.java\\n+ */\\n+public class AdministrationServiceImplTest\\n+    extends PlexusInSpringTestCase\\n+{    \\n+    private MockControl archivaConfigControl;\\n+    \\n+    private ArchivaConfiguration archivaConfig;\\n+    \\n+    private MockControl configControl;\\n+    \\n+    private Configuration config;\\n+    \\n+    private AdministrationServiceImpl service;\\n+    \\n+    private MockControl taskSchedulerControl;\\n+    \\n+    private ArchivaTaskScheduler taskScheduler;\\n+    \\n+    // repository consumers\\n+    private MockControl repoConsumerUtilsControl;\\n+    \\n+    private RepositoryContentConsumers repoConsumersUtil;\\n+    \\n+    private MockControl knownContentConsumerControl;\\n+\\n+    private MockControl invalidContentConsumerControl;\\n+\\n+    private KnownRepositoryContentConsumer indexArtifactConsumer;\\n+\\n+    private KnownRepositoryContentConsumer indexPomConsumer;\\n+\\n+    private InvalidRepositoryContentConsumer checkPomConsumer;\\n+\\n+    private InvalidRepositoryContentConsumer checkMetadataConsumer;\\n+    \\n+    // database consumers\\n+    private MockControl dbConsumersUtilControl;\\n+    \\n+    private DatabaseConsumers dbConsumersUtil;\\n+    \\n+    private MockControl unprocessedConsumersControl;\\n+    \\n+    private MockControl cleanupConsumersControl;\\n+    \\n+    private DatabaseUnprocessedArtifactConsumer processArtifactConsumer;\\n+    \\n+    private DatabaseUnprocessedArtifactConsumer processPomConsumer;\\n+    \\n+    private DatabaseCleanupConsumer cleanupIndexConsumer;\\n+    \\n+    private DatabaseCleanupConsumer cleanupDbConsumer;\\n+    \\n+    // delete artifact    \\n+    private MockControl repoFactoryControl;\\n+    \\n+    private RepositoryContentFactory repositoryFactory;\\n+    \\n+    private MockControl artifactDaoControl;\\n+    \\n+    private ArtifactDAO artifactDao;\\n+    \\n+    private MockControl cleanupControl;\\n+    \\n+    private DatabaseCleanupConsumer cleanupConsumer;\\n+        \\n+    protected void setUp()\\n+        throws Exception\\n+    {\\n+        super.setUp();\\n+        \\n+        archivaConfigControl = MockControl.createControl( ArchivaConfiguration.class );\\n+        archivaConfig = ( ArchivaConfiguration ) archivaConfigControl.getMock();\\n+        \\n+        configControl = MockClassControl.createControl( Configuration.class );\\n+        config = ( Configuration ) configControl.getMock();      \\n+        \\n+        taskSchedulerControl = MockControl.createControl( ArchivaTaskScheduler.class );\\n+        taskScheduler = ( ArchivaTaskScheduler ) taskSchedulerControl.getMock();\\n+        \\n+        // repo consumers\\n+        repoConsumerUtilsControl = MockClassControl.createControl( RepositoryContentConsumers.class );\\n+        repoConsumersUtil = ( RepositoryContentConsumers ) repoConsumerUtilsControl.getMock();\\n+        \\n+        knownContentConsumerControl = MockControl.createControl( KnownRepositoryContentConsumer.class );\\n+        indexArtifactConsumer = ( KnownRepositoryContentConsumer ) knownContentConsumerControl.getMock();\\n+        indexPomConsumer = ( KnownRepositoryContentConsumer ) knownContentConsumerControl.getMock();\\n+        \\n+        invalidContentConsumerControl = MockControl.createControl( InvalidRepositoryContentConsumer.class );\\n+        checkPomConsumer = ( InvalidRepositoryContentConsumer ) invalidContentConsumerControl.getMock();\\n+        checkMetadataConsumer = ( InvalidRepositoryContentConsumer ) invalidContentConsumerControl.getMock();\\n+        \\n+        // db consumers\\n+        dbConsumersUtilControl = MockClassControl.createControl( DatabaseConsumers.class );\\n+        dbConsumersUtil = ( DatabaseConsumers ) dbConsumersUtilControl.getMock();\\n+                \\n+        cleanupConsumersControl = MockControl.createControl( DatabaseCleanupConsumer.class );\\n+        cleanupIndexConsumer = ( DatabaseCleanupConsumer ) cleanupConsumersControl.getMock();\\n+        cleanupDbConsumer = ( DatabaseCleanupConsumer ) cleanupConsumersControl.getMock();\\n+        \\n+        unprocessedConsumersControl = MockControl.createControl( DatabaseUnprocessedArtifactConsumer.class );\\n+        processArtifactConsumer = ( DatabaseUnprocessedArtifactConsumer ) unprocessedConsumersControl.getMock();\\n+        processPomConsumer = ( DatabaseUnprocessedArtifactConsumer ) unprocessedConsumersControl.getMock();\\n+        \\n+        // delete artifact\\n+        repoFactoryControl = MockClassControl.createControl( RepositoryContentFactory.class );\\n+        repositoryFactory = ( RepositoryContentFactory ) repoFactoryControl.getMock();\\n+        \\n+        artifactDaoControl = MockControl.createControl( ArtifactDAO.class );\\n+        artifactDao = ( ArtifactDAO ) artifactDaoControl.getMock();\\n+                \\n+        cleanupControl = MockClassControl.createControl( DatabaseCleanupConsumer.class );\\n+        cleanupConsumer = ( DatabaseCleanupConsumer ) cleanupControl.getMock();\\n+         \\n+        service = new AdministrationServiceImpl( archivaConfig, repoConsumersUtil, dbConsumersUtil, \\n+                         repositoryFactory, artifactDao, cleanupConsumer, cleanupConsumer, taskScheduler );\\n+    }\\n+  \\n+/* Tests for database consumers  */\\n+    \\n+    public void testGetAllDbConsumers()\\n+        throws Exception\\n+    {   \\n+        recordDbConsumers();\\n+        \\n+        dbConsumersUtilControl.replay();\\n+        cleanupConsumersControl.replay();\\n+        unprocessedConsumersControl.replay();\\n+        \\n+        List<String> dbConsumers = service.getAllDatabaseConsumers();\\n+        \\n+        dbConsumersUtilControl.verify();\\n+        cleanupConsumersControl.verify();\\n+        unprocessedConsumersControl.verify();\\n+        \\n+        assertNotNull( dbConsumers );\\n+        assertEquals( 4, dbConsumers.size() );\\n+        assertTrue( dbConsumers.contains( \\\"cleanup-index\\\" ) );\\n+        assertTrue( dbConsumers.contains( \\\"cleanup-database\\\" ) );\\n+        assertTrue( dbConsumers.contains( \\\"process-artifact\\\" ) );\\n+        assertTrue( dbConsumers.contains( \\\"process-pom\\\" ) );\\n+    }\\n+    \\n+    public void testConfigureValidDatabaseConsumer()\\n+        throws Exception\\n+    {\\n+        DatabaseScanningConfiguration dbScanning = new DatabaseScanningConfiguration();\\n+        dbScanning.addCleanupConsumer( \\\"cleanup-index\\\" );\\n+        dbScanning.addCleanupConsumer( \\\"cleanup-database\\\" );\\n+        dbScanning.addUnprocessedConsumer( \\\"process-artifact\\\" );\\n+        \\n+        recordDbConsumers();\\n+        \\n+     // test enable \\\"process-pom\\\" db consumer\\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.getDatabaseScanning(), dbScanning );\\n+        \\n+        config.setDatabaseScanning( dbScanning );\\n+        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        configControl.setVoidCallable();\\n+        \\n+        archivaConfig.save( config );\\n+        archivaConfigControl.setVoidCallable();\\n+        \\n+        dbConsumersUtilControl.replay();\\n+        cleanupConsumersControl.replay();\\n+        unprocessedConsumersControl.replay();\\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        \\n+        try\\n+        {\\n+            boolean success = service.configureDatabaseConsumer( \\\"process-pom\\\", true );\\n+            assertTrue( success );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            fail( \\\"An exception should not have been thrown.\\\" );\\n+        }\\n+        \\n+        dbConsumersUtilControl.verify();\\n+        cleanupConsumersControl.verify();\\n+        unprocessedConsumersControl.verify();\\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+                \\n+      // test disable \\\"process-pom\\\" db consumer        \\n+        dbConsumersUtilControl.reset();\\n+        cleanupConsumersControl.reset();\\n+        unprocessedConsumersControl.reset();\\n+        archivaConfigControl.reset();\\n+        configControl.reset();\\n+                \\n+        dbScanning.addUnprocessedConsumer( \\\"process-pom\\\" );\\n+        \\n+        recordDbConsumers();\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.getDatabaseScanning(), dbScanning );\\n+        \\n+        config.setDatabaseScanning( dbScanning );\\n+        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        configControl.setVoidCallable();\\n+        \\n+        archivaConfig.save( config );\\n+        archivaConfigControl.setVoidCallable();\\n+        \\n+        dbConsumersUtilControl.replay();\\n+        cleanupConsumersControl.replay();\\n+        unprocessedConsumersControl.replay();\\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        \\n+        try\\n+        {\\n+            boolean success = service.configureDatabaseConsumer( \\\"process-pom\\\", false );\\n+            assertTrue( success );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            fail( \\\"An exception should not have been thrown.\\\" );\\n+        }\\n+        \\n+        dbConsumersUtilControl.verify();\\n+        cleanupConsumersControl.verify();\\n+        unprocessedConsumersControl.verify();\\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+    }\\n+    \\n+    public void testConfigureInvalidDatabaseConsumer()\\n+        throws Exception\\n+    {\\n+        recordDbConsumers();\\n+        \\n+        dbConsumersUtilControl.replay();\\n+        cleanupConsumersControl.replay();\\n+        unprocessedConsumersControl.replay();\\n+        \\n+        try\\n+        {\\n+            service.configureDatabaseConsumer( \\\"invalid-consumer\\\", true );\\n+            fail( \\\"An exception should have been thrown.\\\" );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            assertEquals( \\\"Invalid database consumer.\\\", e.getMessage() );\\n+        }\\n+        \\n+        dbConsumersUtilControl.verify();\\n+        cleanupConsumersControl.verify();\\n+        unprocessedConsumersControl.verify();\\n+    }\\n+        \\n+/* Tests for repository consumers  */\\n+    \\n+    public void testGetAllRepoConsumers()\\n+        throws Exception\\n+    {   \\n+        recordRepoConsumers();\\n+        \\n+        repoConsumerUtilsControl.replay();\\n+        knownContentConsumerControl.replay();\\n+        invalidContentConsumerControl.replay();\\n+                \\n+        List<String> repoConsumers = service.getAllRepositoryConsumers(); \\n+        \\n+        repoConsumerUtilsControl.verify();\\n+        knownContentConsumerControl.verify();\\n+        invalidContentConsumerControl.verify();\\n+                        \\n+        assertNotNull( repoConsumers );\\n+        assertEquals( 4, repoConsumers.size() );\\n+        assertTrue( repoConsumers.contains( \\\"index-artifact\\\" ) );\\n+        assertTrue( repoConsumers.contains( \\\"index-pom\\\" ) );\\n+        assertTrue( repoConsumers.contains( \\\"check-pom\\\" ) );\\n+        assertTrue( repoConsumers.contains( \\\"check-metadata\\\" ) );\\n+    }\\n+    \\n+    public void testConfigureValidRepositoryConsumer()\\n+        throws Exception\\n+    {   \\n+        RepositoryScanningConfiguration repoScanning = new RepositoryScanningConfiguration();\\n+        repoScanning.addKnownContentConsumer( \\\"index-artifact\\\" );\\n+        repoScanning.addKnownContentConsumer( \\\"index-pom\\\" );\\n+        repoScanning.addInvalidContentConsumer( \\\"check-pom\\\" );        \\n+        \\n+     // test enable \\\"check-metadata\\\" consumer\\n+        recordRepoConsumers();\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.getRepositoryScanning(), repoScanning );\\n+        \\n+        config.setRepositoryScanning( repoScanning );                \\n+        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        configControl.setVoidCallable();\\n+        \\n+        archivaConfig.save( config );\\n+        archivaConfigControl.setVoidCallable();\\n+                \\n+        repoConsumerUtilsControl.replay();\\n+        knownContentConsumerControl.replay();\\n+        invalidContentConsumerControl.replay();\\n+        archivaConfigControl.replay();\\n+        configControl.replay();        \\n+        \\n+        try\\n+        {\\n+            boolean success = service.configureRepositoryConsumer( null, \\\"check-metadata\\\", true );\\n+            assertTrue( success );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            fail( \\\"An exception should not have been thrown.\\\" );\\n+        }\\n+        \\n+        repoConsumerUtilsControl.verify();\\n+        knownContentConsumerControl.verify();\\n+        invalidContentConsumerControl.verify();        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+                \\n+     // test disable \\\"check-metadata\\\" consumer \\n+        repoConsumerUtilsControl.reset();\\n+        knownContentConsumerControl.reset();\\n+        invalidContentConsumerControl.reset();        \\n+        archivaConfigControl.reset();\\n+        configControl.reset();\\n+        \\n+        repoScanning.addInvalidContentConsumer( \\\"check-metadata\\\" );\\n+\\n+        recordRepoConsumers();\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.getRepositoryScanning(), repoScanning );\\n+        \\n+        config.setRepositoryScanning( repoScanning );\\n+        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        configControl.setVoidCallable();\\n+        \\n+        archivaConfig.save( config );\\n+        archivaConfigControl.setVoidCallable();\\n+                \\n+        repoConsumerUtilsControl.replay();\\n+        knownContentConsumerControl.replay();\\n+        invalidContentConsumerControl.replay();\\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        \\n+        try\\n+        {\\n+            boolean success = service.configureRepositoryConsumer( null, \\\"check-metadata\\\", false );\\n+            \\n+            repoConsumerUtilsControl.verify();\\n+            knownContentConsumerControl.verify();\\n+            invalidContentConsumerControl.verify();        \\n+            archivaConfigControl.verify();\\n+            configControl.verify();\\n+            \\n+            assertTrue( success );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            fail( \\\"An excecption should not have been thrown.\\\" );\\n+        }     \\n+    }\\n+ \\n+    \\n+    public void testConfigureInvalidRepositoryConsumer()\\n+        throws Exception\\n+    {\\n+        recordRepoConsumers();\\n+        \\n+        repoConsumerUtilsControl.replay();\\n+        knownContentConsumerControl.replay();\\n+        invalidContentConsumerControl.replay();\\n+        \\n+        try\\n+        {\\n+            service.configureRepositoryConsumer( null, \\\"invalid-consumer\\\", true );\\n+            fail( \\\"An exception should have been thrown.\\\" );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            assertEquals( \\\"Invalid repository consumer.\\\", e.getMessage() );\\n+        }\\n+        \\n+        repoConsumerUtilsControl.verify();\\n+        knownContentConsumerControl.verify();\\n+        invalidContentConsumerControl.verify(); \\n+    }\\n+\\n+/* Tests for delete artifact  */\\n+    \\n+    public void testDeleteM2ArtifactArtifactExists()\\n+        throws Exception\\n+    {\\n+        File file = new File( getBasedir(), \\\"/target/test-classes/default-repo/\\\" ); \\n+        assertTrue( file.exists() );\\n+        \\n+        ManagedRepositoryConfiguration managedRepo = createManagedRepo( \\\"internal\\\", \\\"default\\\", \\\"Internal Repository\\\", true, false );\\n+        managedRepo.setLocation( file.getAbsolutePath() );\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.findManagedRepositoryById( \\\"internal\\\" ), managedRepo );\\n+        \\n+        ManagedDefaultRepositoryContent repoContent = new ManagedDefaultRepositoryContent();\\n+        repoContent.setRepository( managedRepo );\\n+        \\n+        repoFactoryControl.expectAndReturn( repositoryFactory.getManagedRepositoryContent( \\\"internal\\\" ), repoContent );\\n+                \\n+        List<ArchivaArtifact> artifacts = getArtifacts();\\n+        \\n+        artifactDao.queryArtifacts( null );\\n+        artifactDaoControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        artifactDaoControl.setReturnValue( artifacts );\\n+        \\n+        cleanupConsumer.processArchivaArtifact( artifacts.get( 0 ) );\\n+        cleanupControl.setVoidCallable( 2 );\\n+                  \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        repoFactoryControl.replay();    \\n+        artifactDaoControl.replay();\\n+        cleanupControl.replay();\\n+       \\n+        try\\n+        {\\n+            boolean success = service.deleteArtifact( \\\"internal\\\", \\\"org.apache.archiva\\\", \\\"archiva-test\\\", \\\"1.0\\\" );\\n+            assertTrue( success ); \\n+        }\\n+        catch ( Exception e )\\n+        {            \\n+            fail( \\\"An exception should not have been thrown.\\\" );\\n+        }\\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+        repoFactoryControl.verify();\\n+        artifactDaoControl.verify();\\n+        cleanupControl.verify();\\n+        \\n+        assertFalse( new File( getBasedir(), \\\"/target/test-classes/default-repo/org/apache/archiva/archiva-test/1.0\\\" ).exists() );\\n+        assertTrue( new File( getBasedir(), \\\"/target/test-classes/default-repo/org/apache/archiva/archiva-test/1.1\\\" ).exists() );\\n+    }\\n+    \\n+    public void testDeleteM1ArtifactArtifactExists()\\n+        throws Exception\\n+    {\\n+        MockControl fileTypesControl = MockClassControl.createControl( FileTypes.class );\\n+        FileTypes fileTypes = ( FileTypes ) fileTypesControl.getMock();\\n+        \\n+        MockControl pathParserControl = MockClassControl.createControl( PathParser.class );\\n+        PathParser parser = ( PathParser ) pathParserControl.getMock();\\n+        \\n+        File file = new File( getBasedir(), \\\"/target/test-classes/legacy-repo/\\\" ); \\n+        assertTrue( file.exists() );\\n+        \\n+        ManagedRepositoryConfiguration managedRepo = createManagedRepo( \\\"internal\\\", \\\"legacy\\\", \\\"Internal Repository\\\", true, false );\\n+        managedRepo.setLocation( file.getAbsolutePath() );\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.findManagedRepositoryById( \\\"internal\\\" ), managedRepo );\\n+                \\n+        ManagedLegacyRepositoryContent repoContent = new ManagedLegacyRepositoryContent();\\n+        repoContent.setRepository( managedRepo );\\n+        repoContent.setFileTypes( fileTypes );\\n+        repoContent.setLegacyPathParser( parser );\\n+                \\n+        repoFactoryControl.expectAndReturn( repositoryFactory.getManagedRepositoryContent( \\\"internal\\\" ), repoContent );\\n+        \\n+        recordInManagedLegacyRepoContent( fileTypesControl, fileTypes, pathParserControl, parser );\\n+        \\n+        List<ArchivaArtifact> artifacts = getArtifacts();\\n+        \\n+        artifactDao.queryArtifacts( null );\\n+        artifactDaoControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        artifactDaoControl.setReturnValue( artifacts );\\n+                \\n+        cleanupConsumer.processArchivaArtifact( artifacts.get( 0 ) );\\n+        cleanupControl.setVoidCallable( 2 );\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        repoFactoryControl.replay();\\n+        artifactDaoControl.replay();\\n+        cleanupControl.replay();\\n+        fileTypesControl.replay();\\n+        pathParserControl.replay();\\n+       \\n+        try\\n+        {\\n+            boolean success = service.deleteArtifact( \\\"internal\\\", \\\"org.apache.archiva\\\", \\\"archiva-test\\\", \\\"1.0\\\" );\\n+            assertTrue( success ); \\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            fail( \\\"An exception should not have been thrown.\\\" );\\n+        }\\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+        repoFactoryControl.verify();\\n+        artifactDaoControl.verify();\\n+        cleanupControl.verify();\\n+        fileTypesControl.verify();\\n+        pathParserControl.verify();\\n+        \\n+        assertFalse( new File( getBasedir(), \\\"/target/test-classes/legacy-repo/org.apache.archiva/jars/archiva-test-1.0.jar\\\" ).exists() );\\n+        assertFalse( new File( getBasedir(), \\\"/target/test-classes/legacy-repo/org.apache.archiva/poms/archiva-test-1.0.pom\\\" ).exists() );\\n+        \\n+        assertTrue( new File( getBasedir(), \\\"/target/test-classes/legacy-repo/org.apache.archiva/jars/archiva-test-1.1.jar\\\" ).exists() );\\n+        assertTrue( new File( getBasedir(), \\\"/target/test-classes/legacy-repo/org.apache.archiva/jars/archiva-diff-1.0.jar\\\" ).exists() );\\n+        assertTrue( new File( getBasedir(), \\\"/target/test-classes/legacy-repo/org.apache.archiva/poms/archiva-test-1.1.pom\\\" ).exists() );\\n+        assertTrue( new File( getBasedir(), \\\"/target/test-classes/legacy-repo/org.apache.archiva/poms/archiva-diff-1.0.pom\\\" ).exists() );\\n+    }\\n+\\n+    public void testDeleteArtifactArtifactDoesNotExist()\\n+        throws Exception\\n+    {\\n+        File file = new File( getBasedir(), \\\"/target/test-classes/default-repo/\\\" ); \\n+        assertTrue( file.exists() );\\n+        \\n+        ManagedRepositoryConfiguration managedRepo = createManagedRepo( \\\"internal\\\", \\\"default\\\", \\\"Internal Repository\\\", true, false );\\n+        managedRepo.setLocation( file.getAbsolutePath() );\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.findManagedRepositoryById( \\\"internal\\\" ), managedRepo );\\n+        \\n+        ManagedDefaultRepositoryContent repoContent = new ManagedDefaultRepositoryContent();\\n+        repoContent.setRepository( managedRepo );\\n+        \\n+        repoFactoryControl.expectAndReturn( repositoryFactory.getManagedRepositoryContent( \\\"internal\\\" ), repoContent );\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        repoFactoryControl.replay();\\n+       \\n+        try\\n+        {\\n+            service.deleteArtifact( \\\"internal\\\", \\\"org.apache.archiva\\\", \\\"archiva-non-existing\\\", \\\"1.0\\\" );\\n+            fail( \\\"An exception should have been thrown.\\\" );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            assertEquals( \\\"Artifact does not exist.\\\", e.getMessage() );\\n+        }\\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+        repoFactoryControl.verify();\\n+    }\\n+    \\n+    public void testDeleteArtifacRepositoryDoesNotExist()\\n+        throws Exception\\n+    {   \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.findManagedRepositoryById( \\\"non-existing-repo\\\" ), null );\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+       \\n+        try\\n+        {\\n+            service.deleteArtifact( \\\"non-existing-repo\\\", \\\"org.apache.archiva\\\", \\\"archiva-test\\\", \\\"1.0\\\" );\\n+            fail( \\\"An exception should have been thrown.\\\" );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            assertEquals( \\\"Repository does not exist.\\\", e.getMessage() );\\n+        }\\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+    }\\n+    \\n+/* Tests for repository scanning  */\\n+    \\n+    public void testExecuteRepoScannerRepoExistsAndNotBeingScanned()\\n+        throws Exception\\n+    {        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.findManagedRepositoryById( \\\"internal\\\" ),\\n+                                       createManagedRepo( \\\"internal\\\", \\\"default\\\", \\\"Internal Repository\\\", true, false ) );\\n+        \\n+        RepositoryTask task = new RepositoryTask();\\n+        \\n+        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingAnyRepositoryTask(), true );\\n+        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingRepositoryTask( \\\"internal\\\" ), false );\\n+        \\n+        taskScheduler.queueRepositoryTask( task );\\n+        taskSchedulerControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        taskSchedulerControl.setVoidCallable();\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        taskSchedulerControl.replay();\\n+\\n+        try\\n+        {\\n+            boolean success = service.executeRepositoryScanner( \\\"internal\\\" );\\n+            assertTrue( success );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            fail( \\\"An exception should not have been thrown.\\\" );\\n+        }\\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+        taskSchedulerControl.verify();\\n+    }\\n+    \\n+    public void testExecuteRepoScannerRepoExistsButBeingScanned()\\n+        throws Exception\\n+    {        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.findManagedRepositoryById( \\\"internal\\\" ),\\n+                                       createManagedRepo( \\\"internal\\\", \\\"default\\\", \\\"Internal Repository\\\", true, false ) );\\n+        \\n+        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingAnyRepositoryTask(), true );\\n+        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingRepositoryTask( \\\"internal\\\" ), true);\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        taskSchedulerControl.replay();\\n+    \\n+        try\\n+        {\\n+            boolean success = service.executeRepositoryScanner( \\\"internal\\\" );\\n+            assertFalse( success );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            fail( \\\"An exception should not have been thrown.\\\" );\\n+        }\\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+        taskSchedulerControl.verify();\\n+    }\\n+    \\n+    public void testExecuteRepoScannerRepoDoesNotExist()\\n+        throws Exception\\n+    {\\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.findManagedRepositoryById( \\\"internal\\\" ), null );\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+       \\n+        try\\n+        {\\n+            service.executeRepositoryScanner( \\\"internal\\\" );\\n+            fail( \\\"An exception should have been thrown.\\\" );\\n+        }\\n+        catch ( Exception e )\\n+        {\\n+            assertEquals( \\\"Repository does not exist.\\\", e.getMessage() );\\n+        }\\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+    }\\n+    \\n+/* Tests for db scanning  */\\n+    \\n+    public void testExecuteDbScannerDbNotBeingScanned()\\n+        throws Exception\\n+    {\\n+        DatabaseTask task = new DatabaseTask();\\n+        \\n+        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingDatabaseTask(), false );\\n+                \\n+        taskScheduler.queueDatabaseTask( task );\\n+        taskSchedulerControl.setMatcher( MockControl.ALWAYS_MATCHER );\\n+        taskSchedulerControl.setVoidCallable();\\n+        \\n+        taskSchedulerControl.replay();\\n+\\n+        boolean success = service.executeDatabaseScanner();\\n+        \\n+        taskSchedulerControl.verify();        \\n+        \\n+        assertTrue( success );\\n+    }\\n+    \\n+    public void testExecuteDbScannerDbIsBeingScanned()\\n+        throws Exception\\n+    {        \\n+        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingDatabaseTask(), true );\\n+                \\n+        taskSchedulerControl.replay();\\n+\\n+        boolean success = service.executeDatabaseScanner();\\n+        \\n+        taskSchedulerControl.verify();        \\n+        \\n+        assertFalse( success );\\n+    }\\n+     \\n+/* Tests for querying repositories  */\\n+    \\n+    public void testGetAllManagedRepositories()\\n+        throws Exception\\n+    {\\n+        List<ManagedRepositoryConfiguration> managedRepos = new ArrayList<ManagedRepositoryConfiguration>();        \\n+        managedRepos.add( createManagedRepo( \\\"internal\\\", \\\"default\\\", \\\"Internal Repository\\\", true, false ) );\\n+        managedRepos.add( createManagedRepo( \\\"snapshots\\\", \\\"default\\\", \\\"Snapshots Repository\\\", false, true ) );\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.getManagedRepositories(), managedRepos );\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        \\n+        List<ManagedRepository> repos = service.getAllManagedRepositories(); \\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+        \\n+        assertNotNull( repos );\\n+        assertEquals( 2, repos.size() );\\n+                \\n+        assertManagedRepo( ( ManagedRepository ) repos.get( 0 ), managedRepos.get( 0 ) );\\n+        assertManagedRepo( ( ManagedRepository ) repos.get( 1 ), managedRepos.get( 1 ) );\\n+    }\\n+\\n+    public void testGetAllRemoteRepositories()\\n+        throws Exception\\n+    {\\n+        List<RemoteRepositoryConfiguration> remoteRepos = new ArrayList<RemoteRepositoryConfiguration>(); \\n+        remoteRepos.add( createRemoteRepository( \\\"central\\\", \\\"Central Repository\\\", \\\"default\\\", \\\"http://repo1.maven.org/maven2\\\") );\\n+        remoteRepos.add( createRemoteRepository( \\\"dummy\\\", \\\"Dummy Remote Repository\\\", \\\"legacy\\\", \\\"http://dummy.com/dummy\\\") );\\n+        \\n+        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\\n+        configControl.expectAndReturn( config.getRemoteRepositories(), remoteRepos );\\n+        \\n+        archivaConfigControl.replay();\\n+        configControl.replay();\\n+        \\n+        List<RemoteRepository> repos = service.getAllRemoteRepositories(); \\n+        \\n+        archivaConfigControl.verify();\\n+        configControl.verify();\\n+        \\n+        assertNotNull( repos );\\n+        assertEquals( 2, repos.size() );\\n+         \\n+        assertRemoteRepo( (RemoteRepository) repos.get( 0 ), remoteRepos.get( 0 ) );\\n+        assertRemoteRepo( (RemoteRepository) repos.get( 1 ), remoteRepos.get( 1 ) );        \\n+    }\\n+    \\n+/* private methods  */\\n+    \\n+    private void assertRemoteRepo( RemoteRepository remoteRepo, RemoteRepositoryConfiguration expectedRepoConfig )\\n+    {\\n+        assertEquals( expectedRepoConfig.getId(), remoteRepo.getId() );\\n+        assertEquals( expectedRepoConfig.getLayout(), remoteRepo.getLayout() );\\n+        assertEquals( expectedRepoConfig.getName(), remoteRepo.getName() );\\n+        assertEquals( expectedRepoConfig.getUrl(), remoteRepo.getUrl() );       \\n+    }\\n+    \\n+    private RemoteRepositoryConfiguration createRemoteRepository(String id, String name, String layout, String url)\\n+    {\\n+        RemoteRepositoryConfiguration remoteConfig = new RemoteRepositoryConfiguration();\\n+        remoteConfig.setId( id );\\n+        remoteConfig.setName( name );\\n+        remoteConfig.setLayout( layout );\\n+        remoteConfig.setUrl( url );\\n+        \\n+        return remoteConfig;\\n+    }\\n+    \\n+    private void assertManagedRepo( ManagedRepository managedRepo, ManagedRepositoryConfiguration expectedRepoConfig )\\n+    {\\n+        assertEquals( expectedRepoConfig.getId(), managedRepo.getId() );\\n+        assertEquals( expectedRepoConfig.getLayout(), managedRepo.getLayout() );\\n+        assertEquals( expectedRepoConfig.getName(), managedRepo.getName() );\\n+        \\n+        //TODO enable assert once fixed in AdministrationServiceImpl!\\n+        //assertEquals( \\\"http://localhost:8080/archiva/repository/\\\" + expectedRepoConfig.getId(), managedRepo.getUrl() );\\n+        assertEquals( expectedRepoConfig.isReleases(), managedRepo.isReleases() );\\n+        assertEquals( expectedRepoConfig.isSnapshots(), managedRepo.isSnapshots() );\\n+    }\\n+\\n+    private ManagedRepositoryConfiguration createManagedRepo( String id, String layout, String name,\\n+                                                              boolean hasReleases, boolean hasSnapshots )\\n+    {\\n+        ManagedRepositoryConfiguration repoConfig = new ManagedRepositoryConfiguration();\\n+        repoConfig.setId( id );\\n+        repoConfig.setLayout( layout );\\n+        repoConfig.setName( name );\\n+        repoConfig.setReleases( hasReleases );\\n+        repoConfig.setSnapshots( hasSnapshots );\\n+        \\n+        return repoConfig;\\n+    }\\n+    \\n+    private void recordRepoConsumers()\\n+    {\\n+        List<KnownRepositoryContentConsumer> availableKnownConsumers = new ArrayList<KnownRepositoryContentConsumer>();\\n+        availableKnownConsumers.add( indexArtifactConsumer );\\n+        availableKnownConsumers.add( indexPomConsumer );\\n+        \\n+        List<InvalidRepositoryContentConsumer> availableInvalidConsumers = new ArrayList<InvalidRepositoryContentConsumer>();\\n+        availableInvalidConsumers.add( checkPomConsumer );\\n+        availableInvalidConsumers.add( checkMetadataConsumer );\\n+        \\n+        repoConsumerUtilsControl.expectAndReturn( repoConsumersUtil.getAvailableKnownConsumers(), availableKnownConsumers );\\n+        knownContentConsumerControl.expectAndReturn( indexArtifactConsumer.getId(), \\\"index-artifact\\\" );\\n+        knownContentConsumerControl.expectAndReturn( indexPomConsumer.getId(), \\\"index-pom\\\" );\\n+        \\n+        repoConsumerUtilsControl.expectAndReturn( repoConsumersUtil.getAvailableInvalidConsumers(), availableInvalidConsumers );\\n+        invalidContentConsumerControl.expectAndReturn( checkPomConsumer.getId(), \\\"check-pom\\\" );\\n+        invalidContentConsumerControl.expectAndReturn( checkMetadataConsumer.getId(), \\\"check-metadata\\\" );\\n+    }\\n+    \\n+    private void recordDbConsumers()\\n+    {\\n+        List<DatabaseCleanupConsumer> cleanupConsumers = new ArrayList<DatabaseCleanupConsumer>();\\n+        cleanupConsumers.add( cleanupIndexConsumer );\\n+        cleanupConsumers.add( cleanupDbConsumer );\\n+        \\n+        List<DatabaseUnprocessedArtifactConsumer> unprocessedConsumers =\\n+            new ArrayList<DatabaseUnprocessedArtifactConsumer>();\\n+        unprocessedConsumers.add( processArtifactConsumer );\\n+        unprocessedConsumers.add( processPomConsumer );\\n+        \\n+        dbConsumersUtilControl.expectAndReturn( dbConsumersUtil.getAvailableCleanupConsumers(), cleanupConsumers );\\n+        cleanupConsumersControl.expectAndReturn( cleanupIndexConsumer.getId(), \\\"cleanup-index\\\" );\\n+        cleanupConsumersControl.expectAndReturn( cleanupDbConsumer.getId(), \\\"cleanup-database\\\" );\\n+        \\n+        dbConsumersUtilControl.expectAndReturn( dbConsumersUtil.getAvailableUnprocessedConsumers(), unprocessedConsumers );\\n+        unprocessedConsumersControl.expectAndReturn( processArtifactConsumer.getId(), \\\"process-artifact\\\" );\\n+        unprocessedConsumersControl.expectAndReturn( processPomConsumer.getId(), \\\"process-pom\\\" );\\n+    }    \\n+    \\n+    private void recordInManagedLegacyRepoContent( MockControl fileTypesControl, FileTypes fileTypes,\\n+                                                   MockControl pathParserControl, PathParser parser )\\n+        throws LayoutException\\n+    {\\n+        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \\\"org.apache.archiva/poms/archiva-test-1.0.pom\\\" ), true );\\n+        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \\\"org.apache.archiva/poms/archiva-test-1.1.pom\\\" ), true );\\n+        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \\\"org.apache.archiva/poms/archiva-diff-1.0.pom\\\" ), true );\\n+        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \\\"org.apache.archiva/jars/archiva-diff-1.0.jar\\\" ), true );\\n+        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \\\"org.apache.archiva/jars/archiva-test-1.0.jar\\\" ), true );\\n+        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \\\"org.apache.archiva/jars/archiva-test-1.1.jar\\\" ), true );\\n+        \\n+        ArtifactReference aRef = createArtifactReference(\\\"archiva-test\\\", \\\"org.apache.archiva\\\", \\\"1.1\\\", \\\"pom\\\");\\n+        pathParserControl.expectAndReturn( parser.toArtifactReference( \\\"org.apache.archiva/poms/archiva-test-1.1.pom\\\" ), aRef );\\n+        \\n+        aRef = createArtifactReference(\\\"archiva-test\\\", \\\"org.apache.archiva\\\", \\\"1.0\\\", \\\"pom\\\");                \\n+        pathParserControl.expectAndReturn( parser.toArtifactReference( \\\"org.apache.archiva/poms/archiva-test-1.0.pom\\\" ), aRef );\\n+        \\n+        aRef = createArtifactReference(\\\"archiva-diff\\\", \\\"org.apache.archiva\\\", \\\"1.0\\\", \\\"pom\\\");\\n+        pathParserControl.expectAndReturn( parser.toArtifactReference( \\\"org.apache.archiva/poms/archiva-diff-1.0.pom\\\" ), aRef );\\n+        \\n+        aRef = createArtifactReference(\\\"archiva-diff\\\", \\\"org.apache.archiva\\\", \\\"1.0\\\", \\\"jar\\\");                \\n+        pathParserControl.expectAndReturn( parser.toArtifactReference( \\\"org.apache.archiva/jars/archiva-diff-1.0.jar\\\" ), aRef );\\n+        \\n+        aRef = createArtifactReference(\\\"archiva-test\\\", \\\"org.apache.archiva\\\", \\\"1.0\\\", \\\"jar\\\");\\n+        pathParserControl.expectAndReturn( parser.toArtifactReference( \\\"org.apache.archiva/jars/archiva-test-1.0.jar\\\" ), aRef );\\n+        \\n+        aRef = createArtifactReference(\\\"archiva-test\\\", \\\"org.apache.archiva\\\", \\\"1.1\\\", \\\"jar\\\");\\n+        pathParserControl.expectAndReturn( parser.toArtifactReference( \\\"org.apache.archiva/jars/archiva-test-1.1.jar\\\" ), aRef );\\n+    }\\n+    \\n+    private List<ArchivaArtifact> getArtifacts()\\n+    {\\n+        List<ArchivaArtifact> artifacts = new ArrayList<ArchivaArtifact>();\\n+        \\n+        ArchivaArtifactModel model = new ArchivaArtifactModel();\\n+        model.setRepositoryId( \\\"internal\\\" );\\n+        model.setGroupId( \\\"org.apache.archiva\\\" );\\n+        model.setArtifactId( \\\"archiva-test\\\" );\\n+        model.setVersion( \\\"1.0\\\" );\\n+        model.setType( \\\"jar\\\" );\\n+        \\n+        ArchivaArtifact artifact = new ArchivaArtifact( model );\\n+        artifacts.add( artifact );\\n+        return artifacts;\\n+    }\\n+\\n+    private ArtifactReference createArtifactReference( String artifactId, String groupId, String version, String type )\\n+    {\\n+        ArtifactReference aRef = new ArtifactReference();\\n+        aRef.setArtifactId( artifactId );\\n+        aRef.setGroupId( groupId );\\n+        aRef.setType( type );\\n+        aRef.setVersion( version );\\n+        \\n+        return aRef;\\n+    }\\n+}\\n\\\\ No newline at end of file\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/archiva-test-1.0.jar\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/archiva-test-1.0.jar.md5\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar.md5\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar.md5\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar.md5?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/archiva-test-1.0.jar.sha1\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar.sha1\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar.sha1\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.jar.sha1?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/archiva-test-1.0.pom\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/archiva-test-1.0.pom.md5\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom.md5\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom.md5\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom.md5?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/archiva-test-1.0.pom.sha1\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom.sha1\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom.sha1\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Farchiva-test-1.0.pom.sha1?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/maven-metadata.xml\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/maven-metadata.xml.md5\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml.md5\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml.md5\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml.md5?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.0/maven-metadata.xml.sha1\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml.sha1\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml.sha1\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.0%2Fmaven-metadata.xml.sha1?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.1/archiva-test-1.1.jar\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.1%2Farchiva-test-1.1.jar\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.1%2Farchiva-test-1.1.jar\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.1%2Farchiva-test-1.1.jar?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/default-repo/org/apache/archiva/archiva-test/1.1/archiva-test-1.1.pom\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.1%2Farchiva-test-1.1.pom\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.1%2Farchiva-test-1.1.pom\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Fdefault-repo%2Forg%2Fapache%2Farchiva%2Farchiva-test%2F1.1%2Farchiva-test-1.1.pom?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/legacy-repo/org.apache.archiva/jars/archiva-diff-1.0.jar\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-diff-1.0.jar\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-diff-1.0.jar\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-diff-1.0.jar?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/legacy-repo/org.apache.archiva/jars/archiva-test-1.0.jar\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-test-1.0.jar\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-test-1.0.jar\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-test-1.0.jar?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/legacy-repo/org.apache.archiva/jars/archiva-test-1.1.jar\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-test-1.1.jar\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-test-1.1.jar\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fjars%2Farchiva-test-1.1.jar?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/legacy-repo/org.apache.archiva/poms/archiva-diff-1.0.pom\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-diff-1.0.pom\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-diff-1.0.pom\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-diff-1.0.pom?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/legacy-repo/org.apache.archiva/poms/archiva-test-1.0.pom\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-test-1.0.pom\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-test-1.0.pom\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-test-1.0.pom?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/legacy-repo/org.apache.archiva/poms/archiva-test-1.1.pom\",\"status\":\"added\",\"additions\":0,\"deletions\":0,\"changes\":0,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-test-1.1.pom\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-test-1.1.pom\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Flegacy-repo%2Forg.apache.archiva%2Fpoms%2Farchiva-test-1.1.pom?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\"},{\"sha\":\"fc0308c69f7a73efd4b2be2e5d3b64fd3d88e89f\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/resources/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.xml\",\"status\":\"added\",\"additions\":27,\"deletions\":0,\"changes\":27,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImplTest.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImplTest.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Farchiva-xmlrpc-services%2Fsrc%2Ftest%2Fresources%2Forg%2Fapache%2Farchiva%2Fweb%2Fxmlrpc%2Fservices%2FAdministrationServiceImplTest.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,27 @@\\n+<component-set>\\n+  <components>\\n+    <component>\\n+      <role>org.apache.maven.archiva.configuration.ArchivaConfiguration</role>\\n+      <implementation>org.apache.maven.archiva.configuration.DefaultArchivaConfiguration</implementation>\\n+      <requirements>\\n+        <requirement>\\n+          <role>org.codehaus.plexus.registry.Registry</role>\\n+          <role-hint>configured</role-hint>\\n+        </requirement>\\n+      </requirements>\\n+    </component>\\n+    <component>\\n+      <role>org.codehaus.plexus.registry.Registry</role>\\n+      <role-hint>configured</role-hint>\\n+      <implementation>org.codehaus.plexus.registry.commons.CommonsConfigurationRegistry</implementation>\\n+      <configuration>\\n+        <properties>\\n+          <system/>\\n+          <xml fileName=\\\"${basedir}/target/test-conf/archiva.xml\\\"\\n+               config-name=\\\"org.apache.maven.archiva.base\\\" config-at=\\\"org.apache.maven.archiva\\\"/>\\n+        </properties>\\n+      </configuration>\\n+    </component>\\n+    \\n+  </components>\\n+</component-set>\\n\\\\ No newline at end of file\"},{\"sha\":\"df9b70aed902e68fc82acced11f3807e88e6ad31\",\"filename\":\"archiva-modules/archiva-web/archiva-xmlrpc/pom.xml\",\"status\":\"added\",\"additions\":37,\"deletions\":0,\"changes\":37,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Fpom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Fpom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Farchiva-xmlrpc%2Fpom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -0,0 +1,37 @@\\n+<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n+<!--\\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\\n+  ~ or more contributor license agreements.  See the NOTICE file\\n+  ~ distributed with this work for additional information\\n+  ~ regarding copyright ownership.  The ASF licenses this file\\n+  ~ to you under the Apache License, Version 2.0 (the\\n+  ~ \\\"License\\\"); you may not use this file except in compliance\\n+  ~ with the License.  You may obtain a copy of the License at\\n+  ~\\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\\n+  ~\\n+  ~ Unless required by applicable law or agreed to in writing,\\n+  ~ software distributed under the License is distributed on an\\n+  ~ \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n+  ~ KIND, either express or implied.  See the License for the\\n+  ~ specific language governing permissions and limitations\\n+  ~ under the License.\\n+  -->\\n+<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\t\\n+  <modelVersion>4.0.0</modelVersion>\\n+  <parent>\\n+    <groupId>org.apache.archiva</groupId>\\n+    <artifactId>archiva-web</artifactId>\\n+    <version>1.2-SNAPSHOT</version>\\n+    <relativePath>../pom.xml</relativePath>\\n+  </parent>\\n+  <artifactId>archiva-xmlrpc</artifactId>\\n+  <name>Archiva Web :: XML-RPC</name>\\n+  <packaging>pom</packaging>\\n+  <modules>\\n+    <module>archiva-xmlrpc-api</module>\\n+    <module>archiva-xmlrpc-services</module>\\n+    <module>archiva-xmlrpc-security</module>\\n+    <module>archiva-xmlrpc-client</module>\\n+  </modules>\\n+</project>\"},{\"sha\":\"e3421d23e6fcedb4eb97bffedf5611f2415222b8\",\"filename\":\"archiva-modules/archiva-web/pom.xml\",\"status\":\"modified\",\"additions\":4,\"deletions\":1,\"changes\":5,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Fpom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/archiva-modules%2Farchiva-web%2Fpom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/archiva-modules%2Farchiva-web%2Fpom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -13,7 +13,9 @@\\n   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   ~ See the License for the specific language governing permissions and\\n   ~ limitations under the License.\\n-  --><project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\n+  -->\\n+\\n+<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\n   <modelVersion>4.0.0</modelVersion>\\n   <parent>\\n     <groupId>org.apache.archiva</groupId>\\n@@ -32,6 +34,7 @@\\n     <module>archiva-webapp</module>\\n     <module>archiva-webdav</module>\\n     <module>archiva-rss</module>\\n+    <module>archiva-xmlrpc</module>\\n   </modules>\\n \\n   <profiles>\"},{\"sha\":\"1d3daa95bca794c55929307a62569785c0c1683b\",\"filename\":\"pom.xml\",\"status\":\"modified\",\"additions\":64,\"deletions\":0,\"changes\":64,\"blob_url\":\"https://github.com/apache/archiva/blob/c303ba78c70a220c54b0501bf5239f5870d03ad9/pom.xml\",\"raw_url\":\"https://github.com/apache/archiva/raw/c303ba78c70a220c54b0501bf5239f5870d03ad9/pom.xml\",\"contents_url\":\"https://api.github.com/repos/apache/archiva/contents/pom.xml?ref=c303ba78c70a220c54b0501bf5239f5870d03ad9\",\"patch\":\"@@ -393,6 +393,21 @@\\n         <artifactId>archiva-rss</artifactId>\\n         <version>1.2-SNAPSHOT</version>\\n       </dependency>\\n+      <dependency>\\n+        <groupId>org.apache.archiva</groupId>      \\n+        <artifactId>archiva-xmlrpc-api</artifactId>\\n+        <version>1.2-SNAPSHOT</version>\\n+      </dependency>\\n+      <dependency>\\n+        <groupId>org.apache.archiva</groupId>\\n+        <artifactId>archiva-xmlrpc-services</artifactId>\\n+        <version>1.2-SNAPSHOT</version>\\n+      </dependency>\\n+      <dependency>\\n+        <groupId>org.apache.archiva</groupId>\\n+        <artifactId>archiva-xmlrpc-security</artifactId>\\n+        <version>1.2-SNAPSHOT</version>\\n+      </dependency>\\n       <dependency>\\n         <groupId>org.codehaus.plexus</groupId>\\n         <artifactId>plexus-spring</artifactId>\\n@@ -508,6 +523,11 @@\\n         <artifactId>mail</artifactId>\\n         <version>1.4</version>\\n       </dependency>\\n+      <dependency>\\n+        <groupId>org.apache.xmlrpc</groupId>\\n+        <artifactId>xmlrpc-server</artifactId>\\n+        <version>3.1</version>\\n+      </dependency>\\n       <dependency>\\n         <groupId>org.apache.maven</groupId>\\n         <artifactId>maven-artifact-manager</artifactId>\\n@@ -894,6 +914,36 @@\\n         <version>${jetty.version}</version>\\n       </dependency>\\n \\n+      <!-- xmlrpc -->\\n+      <dependency>\\n+        <groupId>com.atlassian.xmlrpc</groupId>\\n+        <artifactId>atlassian-xmlrpc-binder-annotations</artifactId>\\n+        <version>${binder.version}</version>\\n+      </dependency>\\n+      <dependency>\\n+        <groupId>com.atlassian.xmlrpc</groupId>\\n+        <artifactId>atlassian-xmlrpc-binder-server-spring</artifactId>\\n+        <version>${binder.version}</version>\\n+        <exclusions>\\n+          <exclusion>\\n+            <groupId>commons-logging</groupId>\\n+            <artifactId>commons-logging</artifactId>\\n+          </exclusion>\\n+        </exclusions>\\n+      </dependency>\\n+      <dependency>\\n+        <groupId>com.atlassian.xmlrpc</groupId>\\n+        <artifactId>atlassian-xmlrpc-binder</artifactId>\\n+        <version>${binder.version}</version>\\n+        <scope>test</scope>\\n+      </dependency>\\n+      <dependency>\\n+        <groupId>com.atlassian.xmlrpc</groupId>\\n+        <artifactId>atlassian-xmlrpc-binder-testing</artifactId>\\n+        <version>${binder.version}</version>\\n+        <scope>test</scope>\\n+      </dependency>\\n+\\n       <!-- Transitive versions to manage -->\\n       <dependency>\\n         <groupId>org.springframework</groupId>\\n@@ -928,6 +978,19 @@\\n           </exclusion>\\n         </exclusions>\\n       </dependency>\\n+      <!-- use spring test in xmlrpc?\\n+      <dependency>\\n+        <groupId>org.springframework</groupId>\\n+        <artifactId>spring-test</artifactId>\\n+        <version>2.5.1</version>\\n+        <exclusions>\\n+          <exclusion>\\n+            <groupId>commons-logging</groupId>\\n+            <artifactId>commons-logging</artifactId>\\n+          </exclusion>\\n+        </exclusions>\\n+      </dependency>\\n+       -->\\n       <dependency>\\n         <groupId>org.apache.maven</groupId>\\n         <artifactId>maven-artifact</artifactId>\\n@@ -978,6 +1041,7 @@\\n     <wagon.version>1.0-beta-4</wagon.version>\\n     <redback.version>1.2-SNAPSHOT</redback.version>\\n     <jetty.version>6.1.6</jetty.version>\\n+    <binder.version>0.8.1</binder.version>\\n   </properties>\\n   <profiles>\\n     <profile>\"}]}"