[
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/AbstractLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void setLegacyPathParser( PathParser parser )\n    {\n        this.legacyPathParser = parser;\n    }",
        "start_line": 121,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 124,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setLegacyPathParser"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public boolean equals(Object other)\n    {\n        if ( this == other)\n        {\n            return true;\n        }\n        \n        if ( !(other instanceof ManagedRepository) )\n        {\n            return false;\n        }\n        \n        ManagedRepository that = (ManagedRepository) other;\n        boolean result = true;\n        result = result && ( getId() == null ? that.getId() == null : getId().equals( that.getId() ) );\n        return result;\n    } ",
        "start_line": 58,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 74,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "equals"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public String getId()\n    {\n        return this.id;\n    } ",
        "start_line": 76,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 79,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getId"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public String getLayout()\n    {\n        return this.layout;\n    } ",
        "start_line": 81,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 84,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getLayout"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public String getName()\n    {\n        return this.name;\n    }",
        "start_line": 86,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 89,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getName"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public String getUrl()\n    {\n        return this.url;\n    } ",
        "start_line": 91,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 94,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getUrl"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public int hashCode()\n    {\n        int result = 17;\n        long tmp;\n        result = 37 * result + ( id != null ? id.hashCode() : 0 );\n        return result;\n    } ",
        "start_line": 96,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 102,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "hashCode"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public boolean isReleases()\n    {\n        return this.releases;\n    } ",
        "start_line": 104,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 107,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "isReleases"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * Get null\n     */\n    public boolean isSnapshots()\n    {\n        return this.snapshots;\n    } ",
        "start_line": 109,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 115,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "isSnapshots"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    @ServiceBeanField( \"id\" )\n    public void setId(String id)\n    {\n        this.id = id;\n    } ",
        "start_line": 117,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 121,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setId"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    @ServiceBeanField( \"layout\" )\n    public void setLayout(String layout)\n    {\n        this.layout = layout;\n    } ",
        "start_line": 123,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 127,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setLayout"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    @ServiceBeanField( \"name\" )\n    public void setName(String name)\n    {\n        this.name = name;\n    } ",
        "start_line": 129,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 133,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setName"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    @ServiceBeanField( \"releases\" )\n    public void setReleases(boolean releases)\n    {\n        this.releases = releases;\n    } ",
        "start_line": 135,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 139,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setReleases"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    @ServiceBeanField( \"snapshots\" )\n    public void setSnapshots(boolean snapshots)\n    {\n        this.snapshots = snapshots;\n    } ",
        "start_line": 141,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 145,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setSnapshots"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/ManagedRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    @ServiceBeanField( \"url\" )\n    public void setUrl(String url)\n    {\n        this.url = url;\n    }",
        "start_line": 147,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 151,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setUrl"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/PingServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public String ping()\n\n    {\n\n        return \"pong\";\n\n    }",
        "start_line": 51,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 57,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "ping"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    protected void setUp()\n        throws Exception\n    {\n        super.setUp();\n        \n        archivaConfigControl = MockControl.createControl( ArchivaConfiguration.class );\n        archivaConfig = ( ArchivaConfiguration ) archivaConfigControl.getMock();\n        \n        configControl = MockClassControl.createControl( Configuration.class );\n        config = ( Configuration ) configControl.getMock();      \n        \n        taskSchedulerControl = MockControl.createControl( ArchivaTaskScheduler.class );\n        taskScheduler = ( ArchivaTaskScheduler ) taskSchedulerControl.getMock();\n        \n        // repo consumers\n        repoConsumerUtilsControl = MockClassControl.createControl( RepositoryContentConsumers.class );\n        repoConsumersUtil = ( RepositoryContentConsumers ) repoConsumerUtilsControl.getMock();\n        \n        knownContentConsumerControl = MockControl.createControl( KnownRepositoryContentConsumer.class );\n        indexArtifactConsumer = ( KnownRepositoryContentConsumer ) knownContentConsumerControl.getMock();\n        indexPomConsumer = ( KnownRepositoryContentConsumer ) knownContentConsumerControl.getMock();\n        \n        invalidContentConsumerControl = MockControl.createControl( InvalidRepositoryContentConsumer.class );\n        checkPomConsumer = ( InvalidRepositoryContentConsumer ) invalidContentConsumerControl.getMock();\n        checkMetadataConsumer = ( InvalidRepositoryContentConsumer ) invalidContentConsumerControl.getMock();\n        \n        // db consumers\n        dbConsumersUtilControl = MockClassControl.createControl( DatabaseConsumers.class );\n        dbConsumersUtil = ( DatabaseConsumers ) dbConsumersUtilControl.getMock();\n                \n        cleanupConsumersControl = MockControl.createControl( DatabaseCleanupConsumer.class );\n        cleanupIndexConsumer = ( DatabaseCleanupConsumer ) cleanupConsumersControl.getMock();\n        cleanupDbConsumer = ( DatabaseCleanupConsumer ) cleanupConsumersControl.getMock();\n        \n        unprocessedConsumersControl = MockControl.createControl( DatabaseUnprocessedArtifactConsumer.class );\n        processArtifactConsumer = ( DatabaseUnprocessedArtifactConsumer ) unprocessedConsumersControl.getMock();\n        processPomConsumer = ( DatabaseUnprocessedArtifactConsumer ) unprocessedConsumersControl.getMock();\n        \n        // delete artifact\n        repoFactoryControl = MockClassControl.createControl( RepositoryContentFactory.class );\n        repositoryFactory = ( RepositoryContentFactory ) repoFactoryControl.getMock();\n        \n        artifactDaoControl = MockControl.createControl( ArtifactDAO.class );\n        artifactDao = ( ArtifactDAO ) artifactDaoControl.getMock();\n                \n        cleanupControl = MockClassControl.createControl( DatabaseCleanupConsumer.class );\n        cleanupConsumer = ( DatabaseCleanupConsumer ) cleanupControl.getMock();\n         \n        service = new AdministrationServiceImpl( archivaConfig, repoConsumersUtil, dbConsumersUtil, \n                         repositoryFactory, artifactDao, cleanupConsumer, cleanupConsumer, taskScheduler );\n    }",
        "start_line": 126,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 176,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setUp"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testGetAllDbConsumers()\n        throws Exception\n    {   \n        recordDbConsumers();\n        \n        dbConsumersUtilControl.replay();\n        cleanupConsumersControl.replay();\n        unprocessedConsumersControl.replay();\n        \n        List<String> dbConsumers = service.getAllDatabaseConsumers();\n        \n        dbConsumersUtilControl.verify();\n        cleanupConsumersControl.verify();\n        unprocessedConsumersControl.verify();\n        \n        assertNotNull( dbConsumers );\n        assertEquals( 4, dbConsumers.size() );\n        assertTrue( dbConsumers.contains( \"cleanup-index\" ) );\n        assertTrue( dbConsumers.contains( \"cleanup-database\" ) );\n        assertTrue( dbConsumers.contains( \"process-artifact\" ) );\n        assertTrue( dbConsumers.contains( \"process-pom\" ) );\n    }",
        "start_line": 180,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 201,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testGetAllDbConsumers"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testConfigureValidDatabaseConsumer()\n        throws Exception\n    {\n        DatabaseScanningConfiguration dbScanning = new DatabaseScanningConfiguration();\n        dbScanning.addCleanupConsumer( \"cleanup-index\" );\n        dbScanning.addCleanupConsumer( \"cleanup-database\" );\n        dbScanning.addUnprocessedConsumer( \"process-artifact\" );\n        \n        recordDbConsumers();\n        \n     // test enable \"process-pom\" db consumer\n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.getDatabaseScanning(), dbScanning );\n        \n        config.setDatabaseScanning( dbScanning );\n        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        configControl.setVoidCallable();\n        \n        archivaConfig.save( config );\n        archivaConfigControl.setVoidCallable();\n        \n        dbConsumersUtilControl.replay();\n        cleanupConsumersControl.replay();\n        unprocessedConsumersControl.replay();\n        archivaConfigControl.replay();\n        configControl.replay();\n        \n        try\n        {\n            boolean success = service.configureDatabaseConsumer( \"process-pom\", true );\n            assertTrue( success );\n        }\n        catch ( Exception e )\n        {\n            fail( \"An exception should not have been thrown.\" );\n        }\n        \n        dbConsumersUtilControl.verify();\n        cleanupConsumersControl.verify();\n        unprocessedConsumersControl.verify();\n        archivaConfigControl.verify();\n        configControl.verify();\n                \n      // test disable \"process-pom\" db consumer        \n        dbConsumersUtilControl.reset();\n        cleanupConsumersControl.reset();\n        unprocessedConsumersControl.reset();\n        archivaConfigControl.reset();\n        configControl.reset();\n                \n        dbScanning.addUnprocessedConsumer( \"process-pom\" );\n        \n        recordDbConsumers();\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.getDatabaseScanning(), dbScanning );\n        \n        config.setDatabaseScanning( dbScanning );\n        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        configControl.setVoidCallable();\n        \n        archivaConfig.save( config );\n        archivaConfigControl.setVoidCallable();\n        \n        dbConsumersUtilControl.replay();\n        cleanupConsumersControl.replay();\n        unprocessedConsumersControl.replay();\n        archivaConfigControl.replay();\n        configControl.replay();\n        \n        try\n        {\n            boolean success = service.configureDatabaseConsumer( \"process-pom\", false );\n            assertTrue( success );\n        }\n        catch ( Exception e )\n        {\n            fail( \"An exception should not have been thrown.\" );\n        }\n        \n        dbConsumersUtilControl.verify();\n        cleanupConsumersControl.verify();\n        unprocessedConsumersControl.verify();\n        archivaConfigControl.verify();\n        configControl.verify();\n    }",
        "start_line": 203,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 288,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testConfigureValidDatabaseConsumer"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testConfigureInvalidDatabaseConsumer()\n        throws Exception\n    {\n        recordDbConsumers();\n        \n        dbConsumersUtilControl.replay();\n        cleanupConsumersControl.replay();\n        unprocessedConsumersControl.replay();\n        \n        try\n        {\n            service.configureDatabaseConsumer( \"invalid-consumer\", true );\n            fail( \"An exception should have been thrown.\" );\n        }\n        catch ( Exception e )\n        {\n            assertEquals( \"Invalid database consumer.\", e.getMessage() );\n        }\n        \n        dbConsumersUtilControl.verify();\n        cleanupConsumersControl.verify();\n        unprocessedConsumersControl.verify();\n    }",
        "start_line": 290,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 312,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testConfigureInvalidDatabaseConsumer"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testGetAllRepoConsumers()\n        throws Exception\n    {   \n        recordRepoConsumers();\n        \n        repoConsumerUtilsControl.replay();\n        knownContentConsumerControl.replay();\n        invalidContentConsumerControl.replay();\n                \n        List<String> repoConsumers = service.getAllRepositoryConsumers(); \n        \n        repoConsumerUtilsControl.verify();\n        knownContentConsumerControl.verify();\n        invalidContentConsumerControl.verify();\n                        \n        assertNotNull( repoConsumers );\n        assertEquals( 4, repoConsumers.size() );\n        assertTrue( repoConsumers.contains( \"index-artifact\" ) );\n        assertTrue( repoConsumers.contains( \"index-pom\" ) );\n        assertTrue( repoConsumers.contains( \"check-pom\" ) );\n        assertTrue( repoConsumers.contains( \"check-metadata\" ) );\n    }",
        "start_line": 316,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 337,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testGetAllRepoConsumers"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testConfigureValidRepositoryConsumer()\n        throws Exception\n    {   \n        RepositoryScanningConfiguration repoScanning = new RepositoryScanningConfiguration();\n        repoScanning.addKnownContentConsumer( \"index-artifact\" );\n        repoScanning.addKnownContentConsumer( \"index-pom\" );\n        repoScanning.addInvalidContentConsumer( \"check-pom\" );        \n        \n     // test enable \"check-metadata\" consumer\n        recordRepoConsumers();\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.getRepositoryScanning(), repoScanning );\n        \n        config.setRepositoryScanning( repoScanning );                \n        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        configControl.setVoidCallable();\n        \n        archivaConfig.save( config );\n        archivaConfigControl.setVoidCallable();\n                \n        repoConsumerUtilsControl.replay();\n        knownContentConsumerControl.replay();\n        invalidContentConsumerControl.replay();\n        archivaConfigControl.replay();\n        configControl.replay();        \n        \n        try\n        {\n            boolean success = service.configureRepositoryConsumer( null, \"check-metadata\", true );\n            assertTrue( success );\n        }\n        catch ( Exception e )\n        {\n            fail( \"An exception should not have been thrown.\" );\n        }\n        \n        repoConsumerUtilsControl.verify();\n        knownContentConsumerControl.verify();\n        invalidContentConsumerControl.verify();        \n        archivaConfigControl.verify();\n        configControl.verify();\n                \n     // test disable \"check-metadata\" consumer \n        repoConsumerUtilsControl.reset();\n        knownContentConsumerControl.reset();\n        invalidContentConsumerControl.reset();        \n        archivaConfigControl.reset();\n        configControl.reset();\n        \n        repoScanning.addInvalidContentConsumer( \"check-metadata\" );\n\n        recordRepoConsumers();\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.getRepositoryScanning(), repoScanning );\n        \n        config.setRepositoryScanning( repoScanning );\n        configControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        configControl.setVoidCallable();\n        \n        archivaConfig.save( config );\n        archivaConfigControl.setVoidCallable();\n                \n        repoConsumerUtilsControl.replay();\n        knownContentConsumerControl.replay();\n        invalidContentConsumerControl.replay();\n        archivaConfigControl.replay();\n        configControl.replay();\n        \n        try\n        {\n            boolean success = service.configureRepositoryConsumer( null, \"check-metadata\", false );\n            \n            repoConsumerUtilsControl.verify();\n            knownContentConsumerControl.verify();\n            invalidContentConsumerControl.verify();        \n            archivaConfigControl.verify();\n            configControl.verify();\n            \n            assertTrue( success );\n        }\n        catch ( Exception e )\n        {\n            fail( \"An excecption should not have been thrown.\" );\n        }     \n    }",
        "start_line": 339,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 425,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testConfigureValidRepositoryConsumer"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testConfigureInvalidRepositoryConsumer()\n        throws Exception\n    {\n        recordRepoConsumers();\n        \n        repoConsumerUtilsControl.replay();\n        knownContentConsumerControl.replay();\n        invalidContentConsumerControl.replay();\n        \n        try\n        {\n            service.configureRepositoryConsumer( null, \"invalid-consumer\", true );\n            fail( \"An exception should have been thrown.\" );\n        }\n        catch ( Exception e )\n        {\n            assertEquals( \"Invalid repository consumer.\", e.getMessage() );\n        }\n        \n        repoConsumerUtilsControl.verify();\n        knownContentConsumerControl.verify();\n        invalidContentConsumerControl.verify(); \n    }",
        "start_line": 428,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 450,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testConfigureInvalidRepositoryConsumer"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testDeleteM2ArtifactArtifactExists()\n        throws Exception\n    {\n        File file = new File( getBasedir(), \"/target/test-classes/default-repo/\" ); \n        assertTrue( file.exists() );\n        \n        ManagedRepositoryConfiguration managedRepo = createManagedRepo( \"internal\", \"default\", \"Internal Repository\", true, false );\n        managedRepo.setLocation( file.getAbsolutePath() );\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.findManagedRepositoryById( \"internal\" ), managedRepo );\n        \n        ManagedDefaultRepositoryContent repoContent = new ManagedDefaultRepositoryContent();\n        repoContent.setRepository( managedRepo );\n        \n        repoFactoryControl.expectAndReturn( repositoryFactory.getManagedRepositoryContent( \"internal\" ), repoContent );\n                \n        List<ArchivaArtifact> artifacts = getArtifacts();\n        \n        artifactDao.queryArtifacts( null );\n        artifactDaoControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        artifactDaoControl.setReturnValue( artifacts );\n        \n        cleanupConsumer.processArchivaArtifact( artifacts.get( 0 ) );\n        cleanupControl.setVoidCallable( 2 );\n                  \n        archivaConfigControl.replay();\n        configControl.replay();\n        repoFactoryControl.replay();    \n        artifactDaoControl.replay();\n        cleanupControl.replay();\n       \n        try\n        {\n            boolean success = service.deleteArtifact( \"internal\", \"org.apache.archiva\", \"archiva-test\", \"1.0\" );\n            assertTrue( success ); \n        }\n        catch ( Exception e )\n        {            \n            fail( \"An exception should not have been thrown.\" );\n        }\n        \n        archivaConfigControl.verify();\n        configControl.verify();\n        repoFactoryControl.verify();\n        artifactDaoControl.verify();\n        cleanupControl.verify();\n        \n        assertFalse( new File( getBasedir(), \"/target/test-classes/default-repo/org/apache/archiva/archiva-test/1.0\" ).exists() );\n        assertTrue( new File( getBasedir(), \"/target/test-classes/default-repo/org/apache/archiva/archiva-test/1.1\" ).exists() );\n    }",
        "start_line": 454,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 504,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testDeleteM2ArtifactArtifactExists"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testDeleteM1ArtifactArtifactExists()\n        throws Exception\n    {\n        MockControl fileTypesControl = MockClassControl.createControl( FileTypes.class );\n        FileTypes fileTypes = ( FileTypes ) fileTypesControl.getMock();\n        \n        MockControl pathParserControl = MockClassControl.createControl( PathParser.class );\n        PathParser parser = ( PathParser ) pathParserControl.getMock();\n        \n        File file = new File( getBasedir(), \"/target/test-classes/legacy-repo/\" ); \n        assertTrue( file.exists() );\n        \n        ManagedRepositoryConfiguration managedRepo = createManagedRepo( \"internal\", \"legacy\", \"Internal Repository\", true, false );\n        managedRepo.setLocation( file.getAbsolutePath() );\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.findManagedRepositoryById( \"internal\" ), managedRepo );\n                \n        ManagedLegacyRepositoryContent repoContent = new ManagedLegacyRepositoryContent();\n        repoContent.setRepository( managedRepo );\n        repoContent.setFileTypes( fileTypes );\n        repoContent.setLegacyPathParser( parser );\n                \n        repoFactoryControl.expectAndReturn( repositoryFactory.getManagedRepositoryContent( \"internal\" ), repoContent );\n        \n        recordInManagedLegacyRepoContent( fileTypesControl, fileTypes, pathParserControl, parser );\n        \n        List<ArchivaArtifact> artifacts = getArtifacts();\n        \n        artifactDao.queryArtifacts( null );\n        artifactDaoControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        artifactDaoControl.setReturnValue( artifacts );\n                \n        cleanupConsumer.processArchivaArtifact( artifacts.get( 0 ) );\n        cleanupControl.setVoidCallable( 2 );\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n        repoFactoryControl.replay();\n        artifactDaoControl.replay();\n        cleanupControl.replay();\n        fileTypesControl.replay();\n        pathParserControl.replay();\n       \n        try\n        {\n            boolean success = service.deleteArtifact( \"internal\", \"org.apache.archiva\", \"archiva-test\", \"1.0\" );\n            assertTrue( success ); \n        }\n        catch ( Exception e )\n        {\n            fail( \"An exception should not have been thrown.\" );\n        }\n        \n        archivaConfigControl.verify();\n        configControl.verify();\n        repoFactoryControl.verify();\n        artifactDaoControl.verify();\n        cleanupControl.verify();\n        fileTypesControl.verify();\n        pathParserControl.verify();\n        \n        assertFalse( new File( getBasedir(), \"/target/test-classes/legacy-repo/org.apache.archiva/jars/archiva-test-1.0.jar\" ).exists() );\n        assertFalse( new File( getBasedir(), \"/target/test-classes/legacy-repo/org.apache.archiva/poms/archiva-test-1.0.pom\" ).exists() );\n        \n        assertTrue( new File( getBasedir(), \"/target/test-classes/legacy-repo/org.apache.archiva/jars/archiva-test-1.1.jar\" ).exists() );\n        assertTrue( new File( getBasedir(), \"/target/test-classes/legacy-repo/org.apache.archiva/jars/archiva-diff-1.0.jar\" ).exists() );\n        assertTrue( new File( getBasedir(), \"/target/test-classes/legacy-repo/org.apache.archiva/poms/archiva-test-1.1.pom\" ).exists() );\n        assertTrue( new File( getBasedir(), \"/target/test-classes/legacy-repo/org.apache.archiva/poms/archiva-diff-1.0.pom\" ).exists() );\n    }",
        "start_line": 506,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 575,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testDeleteM1ArtifactArtifactExists"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testDeleteArtifactArtifactDoesNotExist()\n        throws Exception\n    {\n        File file = new File( getBasedir(), \"/target/test-classes/default-repo/\" ); \n        assertTrue( file.exists() );\n        \n        ManagedRepositoryConfiguration managedRepo = createManagedRepo( \"internal\", \"default\", \"Internal Repository\", true, false );\n        managedRepo.setLocation( file.getAbsolutePath() );\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.findManagedRepositoryById( \"internal\" ), managedRepo );\n        \n        ManagedDefaultRepositoryContent repoContent = new ManagedDefaultRepositoryContent();\n        repoContent.setRepository( managedRepo );\n        \n        repoFactoryControl.expectAndReturn( repositoryFactory.getManagedRepositoryContent( \"internal\" ), repoContent );\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n        repoFactoryControl.replay();\n       \n        try\n        {\n            service.deleteArtifact( \"internal\", \"org.apache.archiva\", \"archiva-non-existing\", \"1.0\" );\n            fail( \"An exception should have been thrown.\" );\n        }\n        catch ( Exception e )\n        {\n            assertEquals( \"Artifact does not exist.\", e.getMessage() );\n        }\n        \n        archivaConfigControl.verify();\n        configControl.verify();\n        repoFactoryControl.verify();\n    }",
        "start_line": 577,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 611,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testDeleteArtifactArtifactDoesNotExist"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testDeleteArtifacRepositoryDoesNotExist()\n        throws Exception\n    {   \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.findManagedRepositoryById( \"non-existing-repo\" ), null );\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n       \n        try\n        {\n            service.deleteArtifact( \"non-existing-repo\", \"org.apache.archiva\", \"archiva-test\", \"1.0\" );\n            fail( \"An exception should have been thrown.\" );\n        }\n        catch ( Exception e )\n        {\n            assertEquals( \"Repository does not exist.\", e.getMessage() );\n        }\n        \n        archivaConfigControl.verify();\n        configControl.verify();\n    }",
        "start_line": 613,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 634,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testDeleteArtifacRepositoryDoesNotExist"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testExecuteRepoScannerRepoExistsAndNotBeingScanned()\n        throws Exception\n    {        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.findManagedRepositoryById( \"internal\" ),\n                                       createManagedRepo( \"internal\", \"default\", \"Internal Repository\", true, false ) );\n        \n        RepositoryTask task = new RepositoryTask();\n        \n        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingAnyRepositoryTask(), true );\n        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingRepositoryTask( \"internal\" ), false );\n        \n        taskScheduler.queueRepositoryTask( task );\n        taskSchedulerControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        taskSchedulerControl.setVoidCallable();\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n        taskSchedulerControl.replay();\n\n        try\n        {\n            boolean success = service.executeRepositoryScanner( \"internal\" );\n            assertTrue( success );\n        }\n        catch ( Exception e )\n        {\n            fail( \"An exception should not have been thrown.\" );\n        }\n        \n        archivaConfigControl.verify();\n        configControl.verify();\n        taskSchedulerControl.verify();\n    }",
        "start_line": 638,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 671,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testExecuteRepoScannerRepoExistsAndNotBeingScanned"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testExecuteRepoScannerRepoExistsButBeingScanned()\n        throws Exception\n    {        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.findManagedRepositoryById( \"internal\" ),\n                                       createManagedRepo( \"internal\", \"default\", \"Internal Repository\", true, false ) );\n        \n        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingAnyRepositoryTask(), true );\n        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingRepositoryTask( \"internal\" ), true);\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n        taskSchedulerControl.replay();\n    \n        try\n        {\n            boolean success = service.executeRepositoryScanner( \"internal\" );\n            assertFalse( success );\n        }\n        catch ( Exception e )\n        {\n            fail( \"An exception should not have been thrown.\" );\n        }\n        \n        archivaConfigControl.verify();\n        configControl.verify();\n        taskSchedulerControl.verify();\n    }",
        "start_line": 673,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 700,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testExecuteRepoScannerRepoExistsButBeingScanned"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testExecuteRepoScannerRepoDoesNotExist()\n        throws Exception\n    {\n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.findManagedRepositoryById( \"internal\" ), null );\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n       \n        try\n        {\n            service.executeRepositoryScanner( \"internal\" );\n            fail( \"An exception should have been thrown.\" );\n        }\n        catch ( Exception e )\n        {\n            assertEquals( \"Repository does not exist.\", e.getMessage() );\n        }\n        \n        archivaConfigControl.verify();\n        configControl.verify();\n    }",
        "start_line": 702,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 723,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testExecuteRepoScannerRepoDoesNotExist"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testExecuteDbScannerDbNotBeingScanned()\n        throws Exception\n    {\n        DatabaseTask task = new DatabaseTask();\n        \n        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingDatabaseTask(), false );\n                \n        taskScheduler.queueDatabaseTask( task );\n        taskSchedulerControl.setMatcher( MockControl.ALWAYS_MATCHER );\n        taskSchedulerControl.setVoidCallable();\n        \n        taskSchedulerControl.replay();\n\n        boolean success = service.executeDatabaseScanner();\n        \n        taskSchedulerControl.verify();        \n        \n        assertTrue( success );\n    }",
        "start_line": 727,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 745,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testExecuteDbScannerDbNotBeingScanned"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testExecuteDbScannerDbIsBeingScanned()\n        throws Exception\n    {        \n        taskSchedulerControl.expectAndReturn( taskScheduler.isProcessingDatabaseTask(), true );\n                \n        taskSchedulerControl.replay();\n\n        boolean success = service.executeDatabaseScanner();\n        \n        taskSchedulerControl.verify();        \n        \n        assertFalse( success );\n    }",
        "start_line": 747,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 759,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testExecuteDbScannerDbIsBeingScanned"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testGetAllManagedRepositories()\n        throws Exception\n    {\n        List<ManagedRepositoryConfiguration> managedRepos = new ArrayList<ManagedRepositoryConfiguration>();        \n        managedRepos.add( createManagedRepo( \"internal\", \"default\", \"Internal Repository\", true, false ) );\n        managedRepos.add( createManagedRepo( \"snapshots\", \"default\", \"Snapshots Repository\", false, true ) );\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.getManagedRepositories(), managedRepos );\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n        \n        List<ManagedRepository> repos = service.getAllManagedRepositories(); \n        \n        archivaConfigControl.verify();\n        configControl.verify();\n        \n        assertNotNull( repos );\n        assertEquals( 2, repos.size() );\n                \n        assertManagedRepo( ( ManagedRepository ) repos.get( 0 ), managedRepos.get( 0 ) );\n        assertManagedRepo( ( ManagedRepository ) repos.get( 1 ), managedRepos.get( 1 ) );\n    }",
        "start_line": 763,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 786,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testGetAllManagedRepositories"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testGetAllRemoteRepositories()\n        throws Exception\n    {\n        List<RemoteRepositoryConfiguration> remoteRepos = new ArrayList<RemoteRepositoryConfiguration>(); \n        remoteRepos.add( createRemoteRepository( \"central\", \"Central Repository\", \"default\", \"http://repo1.maven.org/maven2\") );\n        remoteRepos.add( createRemoteRepository( \"dummy\", \"Dummy Remote Repository\", \"legacy\", \"http://dummy.com/dummy\") );\n        \n        archivaConfigControl.expectAndReturn( archivaConfig.getConfiguration(), config );\n        configControl.expectAndReturn( config.getRemoteRepositories(), remoteRepos );\n        \n        archivaConfigControl.replay();\n        configControl.replay();\n        \n        List<RemoteRepository> repos = service.getAllRemoteRepositories(); \n        \n        archivaConfigControl.verify();\n        configControl.verify();\n        \n        assertNotNull( repos );\n        assertEquals( 2, repos.size() );\n         \n        assertRemoteRepo( (RemoteRepository) repos.get( 0 ), remoteRepos.get( 0 ) );\n        assertRemoteRepo( (RemoteRepository) repos.get( 1 ), remoteRepos.get( 1 ) );        \n    }",
        "start_line": 788,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 811,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testGetAllRemoteRepositories"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private void assertRemoteRepo( RemoteRepository remoteRepo, RemoteRepositoryConfiguration expectedRepoConfig )\n    {\n        assertEquals( expectedRepoConfig.getId(), remoteRepo.getId() );\n        assertEquals( expectedRepoConfig.getLayout(), remoteRepo.getLayout() );\n        assertEquals( expectedRepoConfig.getName(), remoteRepo.getName() );\n        assertEquals( expectedRepoConfig.getUrl(), remoteRepo.getUrl() );       \n    }",
        "start_line": 815,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 821,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "assertRemoteRepo"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private RemoteRepositoryConfiguration createRemoteRepository(String id, String name, String layout, String url)\n    {\n        RemoteRepositoryConfiguration remoteConfig = new RemoteRepositoryConfiguration();\n        remoteConfig.setId( id );\n        remoteConfig.setName( name );\n        remoteConfig.setLayout( layout );\n        remoteConfig.setUrl( url );\n        \n        return remoteConfig;\n    }",
        "start_line": 823,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 832,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "createRemoteRepository"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private void assertManagedRepo( ManagedRepository managedRepo, ManagedRepositoryConfiguration expectedRepoConfig )\n    {\n        assertEquals( expectedRepoConfig.getId(), managedRepo.getId() );\n        assertEquals( expectedRepoConfig.getLayout(), managedRepo.getLayout() );\n        assertEquals( expectedRepoConfig.getName(), managedRepo.getName() );\n        \n        //TODO enable assert once fixed in AdministrationServiceImpl!\n        //assertEquals( \"http://localhost:8080/archiva/repository/\" + expectedRepoConfig.getId(), managedRepo.getUrl() );\n        assertEquals( expectedRepoConfig.isReleases(), managedRepo.isReleases() );\n        assertEquals( expectedRepoConfig.isSnapshots(), managedRepo.isSnapshots() );\n    }",
        "start_line": 834,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 844,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "assertManagedRepo"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private ManagedRepositoryConfiguration createManagedRepo( String id, String layout, String name,\n                                                              boolean hasReleases, boolean hasSnapshots )\n    {\n        ManagedRepositoryConfiguration repoConfig = new ManagedRepositoryConfiguration();\n        repoConfig.setId( id );\n        repoConfig.setLayout( layout );\n        repoConfig.setName( name );\n        repoConfig.setReleases( hasReleases );\n        repoConfig.setSnapshots( hasSnapshots );\n        \n        return repoConfig;\n    }",
        "start_line": 846,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 857,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "createManagedRepo"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private void recordRepoConsumers()\n    {\n        List<KnownRepositoryContentConsumer> availableKnownConsumers = new ArrayList<KnownRepositoryContentConsumer>();\n        availableKnownConsumers.add( indexArtifactConsumer );\n        availableKnownConsumers.add( indexPomConsumer );\n        \n        List<InvalidRepositoryContentConsumer> availableInvalidConsumers = new ArrayList<InvalidRepositoryContentConsumer>();\n        availableInvalidConsumers.add( checkPomConsumer );\n        availableInvalidConsumers.add( checkMetadataConsumer );\n        \n        repoConsumerUtilsControl.expectAndReturn( repoConsumersUtil.getAvailableKnownConsumers(), availableKnownConsumers );\n        knownContentConsumerControl.expectAndReturn( indexArtifactConsumer.getId(), \"index-artifact\" );\n        knownContentConsumerControl.expectAndReturn( indexPomConsumer.getId(), \"index-pom\" );\n        \n        repoConsumerUtilsControl.expectAndReturn( repoConsumersUtil.getAvailableInvalidConsumers(), availableInvalidConsumers );\n        invalidContentConsumerControl.expectAndReturn( checkPomConsumer.getId(), \"check-pom\" );\n        invalidContentConsumerControl.expectAndReturn( checkMetadataConsumer.getId(), \"check-metadata\" );\n    }",
        "start_line": 859,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 876,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "recordRepoConsumers"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private void recordDbConsumers()\n    {\n        List<DatabaseCleanupConsumer> cleanupConsumers = new ArrayList<DatabaseCleanupConsumer>();\n        cleanupConsumers.add( cleanupIndexConsumer );\n        cleanupConsumers.add( cleanupDbConsumer );\n        \n        List<DatabaseUnprocessedArtifactConsumer> unprocessedConsumers =\n            new ArrayList<DatabaseUnprocessedArtifactConsumer>();\n        unprocessedConsumers.add( processArtifactConsumer );\n        unprocessedConsumers.add( processPomConsumer );\n        \n        dbConsumersUtilControl.expectAndReturn( dbConsumersUtil.getAvailableCleanupConsumers(), cleanupConsumers );\n        cleanupConsumersControl.expectAndReturn( cleanupIndexConsumer.getId(), \"cleanup-index\" );\n        cleanupConsumersControl.expectAndReturn( cleanupDbConsumer.getId(), \"cleanup-database\" );\n        \n        dbConsumersUtilControl.expectAndReturn( dbConsumersUtil.getAvailableUnprocessedConsumers(), unprocessedConsumers );\n        unprocessedConsumersControl.expectAndReturn( processArtifactConsumer.getId(), \"process-artifact\" );\n        unprocessedConsumersControl.expectAndReturn( processPomConsumer.getId(), \"process-pom\" );\n    }    ",
        "start_line": 878,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 896,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "recordDbConsumers"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private void recordInManagedLegacyRepoContent( MockControl fileTypesControl, FileTypes fileTypes,\n                                                   MockControl pathParserControl, PathParser parser )\n        throws LayoutException\n    {\n        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \"org.apache.archiva/poms/archiva-test-1.0.pom\" ), true );\n        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \"org.apache.archiva/poms/archiva-test-1.1.pom\" ), true );\n        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \"org.apache.archiva/poms/archiva-diff-1.0.pom\" ), true );\n        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \"org.apache.archiva/jars/archiva-diff-1.0.jar\" ), true );\n        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \"org.apache.archiva/jars/archiva-test-1.0.jar\" ), true );\n        fileTypesControl.expectAndReturn( fileTypes.matchesArtifactPattern( \"org.apache.archiva/jars/archiva-test-1.1.jar\" ), true );\n        \n        ArtifactReference aRef = createArtifactReference(\"archiva-test\", \"org.apache.archiva\", \"1.1\", \"pom\");\n        pathParserControl.expectAndReturn( parser.toArtifactReference( \"org.apache.archiva/poms/archiva-test-1.1.pom\" ), aRef );\n        \n        aRef = createArtifactReference(\"archiva-test\", \"org.apache.archiva\", \"1.0\", \"pom\");                \n        pathParserControl.expectAndReturn( parser.toArtifactReference( \"org.apache.archiva/poms/archiva-test-1.0.pom\" ), aRef );\n        \n        aRef = createArtifactReference(\"archiva-diff\", \"org.apache.archiva\", \"1.0\", \"pom\");\n        pathParserControl.expectAndReturn( parser.toArtifactReference( \"org.apache.archiva/poms/archiva-diff-1.0.pom\" ), aRef );\n        \n        aRef = createArtifactReference(\"archiva-diff\", \"org.apache.archiva\", \"1.0\", \"jar\");                \n        pathParserControl.expectAndReturn( parser.toArtifactReference( \"org.apache.archiva/jars/archiva-diff-1.0.jar\" ), aRef );\n        \n        aRef = createArtifactReference(\"archiva-test\", \"org.apache.archiva\", \"1.0\", \"jar\");\n        pathParserControl.expectAndReturn( parser.toArtifactReference( \"org.apache.archiva/jars/archiva-test-1.0.jar\" ), aRef );\n        \n        aRef = createArtifactReference(\"archiva-test\", \"org.apache.archiva\", \"1.1\", \"jar\");\n        pathParserControl.expectAndReturn( parser.toArtifactReference( \"org.apache.archiva/jars/archiva-test-1.1.jar\" ), aRef );\n    }",
        "start_line": 898,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 926,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "recordInManagedLegacyRepoContent"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private List<ArchivaArtifact> getArtifacts()\n    {\n        List<ArchivaArtifact> artifacts = new ArrayList<ArchivaArtifact>();\n        \n        ArchivaArtifactModel model = new ArchivaArtifactModel();\n        model.setRepositoryId( \"internal\" );\n        model.setGroupId( \"org.apache.archiva\" );\n        model.setArtifactId( \"archiva-test\" );\n        model.setVersion( \"1.0\" );\n        model.setType( \"jar\" );\n        \n        ArchivaArtifact artifact = new ArchivaArtifact( model );\n        artifacts.add( artifact );\n        return artifacts;\n    }",
        "start_line": 928,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 942,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getArtifacts"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/test/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImplTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private ArtifactReference createArtifactReference( String artifactId, String groupId, String version, String type )\n    {\n        ArtifactReference aRef = new ArtifactReference();\n        aRef.setArtifactId( artifactId );\n        aRef.setGroupId( groupId );\n        aRef.setType( type );\n        aRef.setVersion( version );\n        \n        return aRef;\n    }",
        "start_line": 944,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 953,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "createArtifactReference"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void deleteVersion( VersionedReference reference )\n        throws ContentNotFoundException\n    {\n        String path = toMetadataPath( reference );\n        File projectPath = new File( getRepoRoot(), path );\n        \n        File projectDir = projectPath.getParentFile();\n        if( projectDir.exists() && projectDir.isDirectory() )\n        {\n            try\n            {\n                FileUtils.deleteDirectory( projectDir );\n            }\n            catch ( IOException e )\n            {\n                // TODO: log this somewhere?\n            }\n        }\n        else\n        {\n            throw new ContentNotFoundException( \"Unable to delete non-existing project directory.\" );\n        }\n    }",
        "start_line": 63,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 85,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "deleteVersion"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-api/src/main/java/org/apache/archiva/web/xmlrpc/api/beans/RemoteRepository.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public boolean equals(Object other)\n    {\n        if ( this == other)\n        {\n            return true;\n        }\n        \n        if ( !(other instanceof RemoteRepository) )\n        {\n            return false;\n        }\n        \n        RemoteRepository that = (RemoteRepository) other;\n        boolean result = true;\n        result = result && ( getId() == null ? that.getId() == null : getId().equals( that.getId() ) );\n        return result;\n    } ",
        "start_line": 52,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 68,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "equals"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#configureDatabaseConsumer(String, boolean)\n     */\n    public Boolean configureDatabaseConsumer( String consumerId, boolean enable ) throws Exception\n    {\n        List<DatabaseCleanupConsumer> cleanupConsumers = dbConsumersUtil.getAvailableCleanupConsumers();\n        List<DatabaseUnprocessedArtifactConsumer> unprocessedConsumers =\n            dbConsumersUtil.getAvailableUnprocessedConsumers();\n        \n        boolean found = false;\n        boolean isCleanupConsumer = false;        \n        for( DatabaseCleanupConsumer consumer : cleanupConsumers )\n        {\n            if( consumer.getId().equals( consumerId ) )\n            {\n                found = true;\n                isCleanupConsumer = true;\n                break;\n            }\n        }\n        \n        if( !found )\n        {\n            for( DatabaseUnprocessedArtifactConsumer consumer : unprocessedConsumers )\n            {\n                if( consumer.getId().equals( consumerId ) )\n                {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        \n        if( !found )\n        {\n            throw new Exception( \"Invalid database consumer.\" );\n        }\n        \n        Configuration config = archivaConfiguration.getConfiguration();\n        DatabaseScanningConfiguration dbScanningConfig = config.getDatabaseScanning();\n        \n        if( isCleanupConsumer )\n        {\n            dbScanningConfig.addCleanupConsumer( consumerId );            \n        }\n        else\n        {\n            dbScanningConfig.addUnprocessedConsumer( consumerId );\n        }\n        \n        config.setDatabaseScanning( dbScanningConfig );        \n        saveConfiguration( config );\n        \n        return new Boolean( true );\n    }",
        "start_line": 98,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 152,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "configureDatabaseConsumer"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#configureRepositoryConsumer(String, String, boolean)\n     */\n    public Boolean configureRepositoryConsumer( String repoId, String consumerId, boolean enable )\n        throws Exception\n    {\n        // TODO use repoId once consumers are configured per repository! (MRM-930)\n        \n        List<KnownRepositoryContentConsumer> knownConsumers = repoConsumersUtil.getAvailableKnownConsumers();\n        List<InvalidRepositoryContentConsumer> invalidConsumers = repoConsumersUtil.getAvailableInvalidConsumers();\n        \n        boolean found = false;\n        boolean isKnownContentConsumer = false;\n        for( KnownRepositoryContentConsumer consumer : knownConsumers )\n        {\n            if( consumer.getId().equals( consumerId ) )\n            {\n                found = true;\n                isKnownContentConsumer = true;\n                break;\n            }\n        }\n        \n        if( !found )\n        {\n            for( InvalidRepositoryContentConsumer consumer : invalidConsumers )\n            {\n                if( consumer.getId().equals( consumerId ) )\n                {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        \n        if( !found )\n        {\n            throw new Exception( \"Invalid repository consumer.\" );\n        }\n        \n        Configuration config = archivaConfiguration.getConfiguration();\n        RepositoryScanningConfiguration repoScanningConfig = config.getRepositoryScanning();\n        \n        if( isKnownContentConsumer )\n        {\n            repoScanningConfig.addKnownContentConsumer( consumerId );\n        }\n        else\n        {\n            repoScanningConfig.addInvalidContentConsumer( consumerId );\n        }\n        \n        config.setRepositoryScanning( repoScanningConfig );        \n        saveConfiguration( config );\n        \n        return new Boolean( true );\n    }",
        "start_line": 154,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 210,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "configureRepositoryConsumer"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#deleteArtifact(String, String, String, String)\n     */\n    public Boolean deleteArtifact( String repoId, String groupId, String artifactId, String version )\n        throws Exception\n    {\n        Configuration config = archivaConfiguration.getConfiguration();\n        ManagedRepositoryConfiguration repoConfig = config.findManagedRepositoryById( repoId );\n        \n        if( repoConfig == null )\n        {\n            throw new Exception( \"Repository does not exist.\" );\n        }\n            \n        try\n        {\n            ManagedRepositoryContent repoContent = repoFactory.getManagedRepositoryContent( repoId );            \n            VersionedReference ref = new VersionedReference();\n            ref.setGroupId( groupId );\n            ref.setArtifactId( artifactId );\n            ref.setVersion( version );\n                   \n            // delete from file system\n            repoContent.deleteVersion( ref );\n            \n            ArtifactVersionsConstraint constraint = new ArtifactVersionsConstraint( repoId, groupId, artifactId, false );\n            List<ArchivaArtifact> artifacts = null;\n            \n            try\n            {\n                artifacts = artifactDAO.queryArtifacts( constraint );\n                if( artifacts == null )\n                {\n                    return true;\n                }\n            }\n            catch ( ArchivaDatabaseException e )\n            {\n                throw new Exception( \"Error occurred while cleaning up database.\" );\n            }            \n               \n            // cleanup db manually? or use the cleanup consumers as what is done now?\n            for( ArchivaArtifact artifact : artifacts )\n            {\n                if( artifact.getVersion().equals( version ) )\n                {\n                    try\n                    {\n                        cleanupArtifacts.processArchivaArtifact( artifact );\n                        cleanupProjects.processArchivaArtifact( artifact );\n                    }\n                    catch ( ConsumerException ce )\n                    {\n                        // log error\n                        continue;\n                    }                   \n                }\n            }\n        }\n        catch ( ContentNotFoundException e )\n        {\n            throw new Exception( \"Artifact does not exist.\" );\n        }\n        catch ( RepositoryNotFoundException e )\n        {\n            throw new Exception( \"Repository does not exist.\" );\n        }\n        catch ( RepositoryException e )\n        {\n            throw new Exception( \"Repository exception occurred.\" );\n        }\n        \n        return new Boolean( true );\n    }",
        "start_line": 212,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 285,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "deleteArtifact"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#executeDatabaseScanner()\n     */\n    public Boolean executeDatabaseScanner() throws Exception\n    {\n        if ( taskScheduler.isProcessingDatabaseTask() )\n        {\n            return false;\n        }\n\n        DatabaseTask task = new DatabaseTask();\n        task.setName( DefaultArchivaTaskScheduler.DATABASE_JOB + \":user-requested-via-web-service\" );\n        task.setQueuePolicy( ArchivaTask.QUEUE_POLICY_WAIT );\n        \n        taskScheduler.queueDatabaseTask( task );           \n        \n        return new Boolean( true );\n    }",
        "start_line": 287,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 304,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "executeDatabaseScanner"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#executeRepositoryScanner(String)\n     */\n    public Boolean executeRepositoryScanner( String repoId ) throws Exception\n    {\n        Configuration config = archivaConfiguration.getConfiguration();\n        if( config.findManagedRepositoryById( repoId ) == null )\n        {\n            throw new Exception( \"Repository does not exist.\" );\n        }\n        \n        if ( taskScheduler.isProcessingAnyRepositoryTask() )\n        {\n            if ( taskScheduler.isProcessingRepositoryTask( repoId ) )\n            {\n                return false;\n            }\n        }\n\n        RepositoryTask task = new RepositoryTask();\n        task.setRepositoryId( repoId );\n        task.setName( DefaultArchivaTaskScheduler.REPOSITORY_JOB + \":\" + repoId );\n        task.setQueuePolicy( ArchivaTask.QUEUE_POLICY_WAIT );\n\n        taskScheduler.queueRepositoryTask( task );          \n        \n        return new Boolean( true );\n    }",
        "start_line": 306,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 333,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "executeRepositoryScanner"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#getAllDatabaseConsumers()\n     */\n    public List<String> getAllDatabaseConsumers()\n    {\n        List<String> consumers = new ArrayList<String>();\n        \n        List<DatabaseCleanupConsumer> cleanupConsumers = dbConsumersUtil.getAvailableCleanupConsumers();\n        List<DatabaseUnprocessedArtifactConsumer> unprocessedConsumers = dbConsumersUtil.getAvailableUnprocessedConsumers();\n        \n        for( DatabaseCleanupConsumer consumer : cleanupConsumers )\n        {\n            consumers.add( consumer.getId() );\n        }  \n        \n        for( DatabaseUnprocessedArtifactConsumer consumer : unprocessedConsumers )\n        {\n            consumers.add( consumer.getId() );\n        } \n        \n        return consumers;\n    }",
        "start_line": 335,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 356,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getAllDatabaseConsumers"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#getAllRepositoryConsumers()\n     */\n    public List<String> getAllRepositoryConsumers()\n    {\n        List<String> consumers = new ArrayList<String>();\n                \n        List<KnownRepositoryContentConsumer> knownConsumers = repoConsumersUtil.getAvailableKnownConsumers();\n        List<InvalidRepositoryContentConsumer> invalidConsumers = repoConsumersUtil.getAvailableInvalidConsumers();\n        \n        for( KnownRepositoryContentConsumer consumer : knownConsumers )\n        {\n            consumers.add( consumer.getId() );\n        }\n        \n        for( InvalidRepositoryContentConsumer consumer : invalidConsumers )\n        {\n            consumers.add( consumer.getId() );\n        }\n\n        return consumers;\n    }",
        "start_line": 358,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 379,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getAllRepositoryConsumers"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#getAllManagedRepositories()\n     */\n    public List<ManagedRepository> getAllManagedRepositories()\n    {\n        List<ManagedRepository> managedRepos = new ArrayList<ManagedRepository>();\n        \n        Configuration config = archivaConfiguration.getConfiguration();\n        List<ManagedRepositoryConfiguration> managedRepoConfigs = config.getManagedRepositories();\n        \n        for( ManagedRepositoryConfiguration repoConfig : managedRepoConfigs )\n        {\n            // TODO fix resolution of repo url!            \n            ManagedRepository repo =\n                new ManagedRepository( repoConfig.getId(), repoConfig.getName(), \"URL\", repoConfig.getLayout(),\n                                       repoConfig.isSnapshots(), repoConfig.isReleases() );  \n            managedRepos.add( repo );\n        }\n        \n        return managedRepos;\n    }",
        "start_line": 381,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 401,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getAllManagedRepositories"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    /**\n     * @see AdministrationService#getAllRemoteRepositories()\n     */\n    public List<RemoteRepository> getAllRemoteRepositories()\n    {\n        List<RemoteRepository> remoteRepos = new ArrayList<RemoteRepository>();\n        \n        Configuration config = archivaConfiguration.getConfiguration();\n        List<RemoteRepositoryConfiguration> remoteRepoConfigs = config.getRemoteRepositories();\n        \n        for( RemoteRepositoryConfiguration repoConfig : remoteRepoConfigs )\n        {\n            RemoteRepository repo =\n                new RemoteRepository( repoConfig.getId(), repoConfig.getName(), repoConfig.getUrl(),\n                                      repoConfig.getLayout() );\n            remoteRepos.add( repo );\n        }\n        \n        return remoteRepos;\n    }",
        "start_line": 403,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 422,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getAllRemoteRepositories"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-services/src/main/java/org/apache/archiva/web/xmlrpc/services/AdministrationServiceImpl.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private void saveConfiguration( Configuration config )\n        throws Exception\n    {\n        try\n        {\n            archivaConfiguration.save( config );\n        }\n        catch(  RegistryException e )\n        {\n            throw new Exception( \"Error occurred in the registry.\" );\n        }\n        catch ( IndeterminateConfigurationException e )\n        {\n            throw new Exception( \"Error occurred while saving the configuration.\" );    \n        }\n    }    ",
        "start_line": 424,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 439,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "saveConfiguration"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/java/org/apache/archiva/xmlrpc/security/XmlRpcAuthenticatorTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void setUp()\n\n        throws Exception\n\n    {\n\n        super.setUp();\n\n        \n\n        securitySystem = (SecuritySystem) lookup( SecuritySystem.class, \"testable\" );        \n\n        roleManager = (RoleManager) lookup( RoleManager.class, \"default\" );\n\n        \n\n        // Some basic asserts.\n\n        assertNotNull( securitySystem );        \n\n        assertNotNull( roleManager );\n\n        \n\n        // Setup Admin User.\n\n        User adminUser = createUser( USER_ADMIN, \"Admin User\", null );\n\n        roleManager.assignRole( ArchivaRoleConstants.TEMPLATE_SYSTEM_ADMIN, adminUser.getPrincipal().toString() );\n\n\n\n        // Setup Guest User.\n\n        User guestUser = createUser( USER_GUEST, \"Guest User\", null );\n\n        roleManager.assignRole( ArchivaRoleConstants.TEMPLATE_GUEST, guestUser.getPrincipal().toString() );\n\n        \n\n        configControl = MockClassControl.createControl( XmlRpcHttpRequestConfigImpl.class );\n\n        config = ( XmlRpcHttpRequestConfigImpl ) configControl.getMock();\n\n        \n\n        xmlRpcRequestControl = MockControl.createControl( XmlRpcRequest.class );\n\n        xmlRpcRequest = ( XmlRpcRequest ) xmlRpcRequestControl.getMock();    \n\n        \n\n        authenticator = new XmlRpcAuthenticator( securitySystem );        \n\n    }",
        "start_line": 131,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 185,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setUp"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/java/org/apache/archiva/xmlrpc/security/XmlRpcAuthenticatorTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private User createUser( String principal, String fullname, String password )\n\n        throws UserNotFoundException\n\n    {\n\n        UserManager userManager = securitySystem.getUserManager();\n\n    \n\n        User user = userManager.createUser( principal, fullname, principal + \"@testable.archiva.apache.org\" );\n\n        securitySystem.getPolicy().setEnabled( false );\n\n        userManager.addUser( user );\n\n        securitySystem.getPolicy().setEnabled( true );\n\n        \n\n        user.setPassword( password );        \n\n        userManager.updateUser( user );\n\n        \n\n        return user;\n\n    }",
        "start_line": 189,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 217,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "createUser"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/java/org/apache/archiva/xmlrpc/security/XmlRpcAuthenticatorTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testIsAuthorizedUserExistsButNotAuthorized()\n\n        throws Exception\n\n    {\n\n        createUser( USER_ALPACA, \"Al 'Archiva' Paca\", PASSWORD );\n\n        \n\n        UserManager userManager = securitySystem.getUserManager();\n\n        try\n\n        {\n\n            User user  = userManager.findUser( USER_ALPACA );\n\n            assertEquals( USER_ALPACA, user.getPrincipal() );\n\n        }\n\n        catch ( UserNotFoundException e )\n\n        {\n\n            fail( \"User should exist in the database.\" );                        \n\n        }\n\n        \n\n        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getConfig(), config, 2 );\n\n        \n\n        configControl.expectAndReturn( config.getBasicUserName(), USER_ALPACA );\n\n        \n\n        configControl.expectAndReturn( config.getBasicPassword(), PASSWORD );\n\n        \n\n        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getMethodName(),\n\n                                              \"AdministrationService.getAllManagedRepositories\" );\n\n        \n\n        xmlRpcRequestControl.replay();\n\n        configControl.replay();\n\n        \n\n        boolean isAuthorized = authenticator.isAuthorized( xmlRpcRequest );\n\n        \n\n        xmlRpcRequestControl.verify();\n\n        configControl.verify();\n\n        \n\n        assertFalse( isAuthorized );\n\n    }",
        "start_line": 221,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 289,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testIsAuthorizedUserExistsButNotAuthorized"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/java/org/apache/archiva/xmlrpc/security/XmlRpcAuthenticatorTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testIsAuthorizedUserExistsAndAuthorized()\n\n        throws Exception\n\n    {\n\n        createUser( USER_ALPACA, \"Al 'Archiva' Paca\", PASSWORD );\n\n        \n\n        UserManager userManager = securitySystem.getUserManager();\n\n        try\n\n        {\n\n            User user  = userManager.findUser( USER_ALPACA );\n\n            assertEquals( USER_ALPACA, user.getPrincipal() );\n\n        }\n\n        catch ( UserNotFoundException e )\n\n        {\n\n            fail( \"User should exist in the database.\" );                        \n\n        }\n\n        \n\n        //TODO cannot assign global repo manager role - it says role does not exist :|\n\n        \n\n        //roleManager.assignRole( ArchivaRoleConstants.GLOBAL_REPOSITORY_MANAGER_ROLE, USER_ALPACA );\n\n        \n\n        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getConfig(), config, 2 );\n\n        \n\n        configControl.expectAndReturn( config.getBasicUserName(), USER_ALPACA );\n\n        \n\n        configControl.expectAndReturn( config.getBasicPassword(), PASSWORD );\n\n        \n\n        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getMethodName(),\n\n                                              \"AdministrationService.getAllManagedRepositories\" );\n\n        \n\n        xmlRpcRequestControl.replay();\n\n        configControl.replay();\n\n        \n\n        boolean isAuthorized = authenticator.isAuthorized( xmlRpcRequest );\n\n        \n\n        xmlRpcRequestControl.verify();\n\n        configControl.verify();\n\n        \n\n        //assertTrue( isAuthorized );\n\n    }",
        "start_line": 293,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 369,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testIsAuthorizedUserExistsAndAuthorized"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/test/java/org/apache/archiva/xmlrpc/security/XmlRpcAuthenticatorTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testIsAuthorizedUserDoesNotExist()\n\n        throws Exception\n\n    {   \n\n        UserManager userManager = securitySystem.getUserManager();\n\n        try\n\n        {\n\n            userManager.findUser( USER_ALPACA );\n\n            fail( \"User should not exist in the database.\" );\n\n        }\n\n        catch ( UserNotFoundException e )\n\n        {\n\n            assertEquals( \"Unable to find user 'alpaca'\", e.getMessage() );            \n\n        }\n\n        \n\n        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getConfig(), config, 2 );\n\n        \n\n        configControl.expectAndReturn( config.getBasicUserName(), USER_ALPACA );\n\n        \n\n        configControl.expectAndReturn( config.getBasicPassword(), PASSWORD );\n\n        \n\n        xmlRpcRequestControl.expectAndReturn( xmlRpcRequest.getMethodName(),\n\n                                              \"AdministrationService.getAllManagedRepositories\" );\n\n        \n\n        xmlRpcRequestControl.replay();\n\n        configControl.replay();\n\n        \n\n        boolean isAuthorized = authenticator.isAuthorized( xmlRpcRequest );\n\n                \n\n        xmlRpcRequestControl.verify();\n\n        configControl.verify();\n\n        \n\n        assertFalse( isAuthorized );\n\n    }    ",
        "start_line": 373,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 437,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testIsAuthorizedUserDoesNotExist"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-client/src/main/java/org/apache/archiva/web/xmlrpc/client/SampleClient.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public static void main( String[] args ) \n    {       \n        try\n        {\n            XmlRpcClient client = new XmlRpcClient();\n            \n            XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();\n            config.setServerURL( new URL( args[0] ) );\n            config.setBasicUserName( args[1] );\n            config.setBasicPassword( args[2] );\n            config.setEnabledForExtensions( true );\n            \n            client.setConfig( config );\n            \n            /* managed repositories */\n            Object[] params = new Object[]{};\n            Object[] managedRepos = (Object[])\n                 client.execute( \"AdministrationService.getAllManagedRepositories\", params );                        \n            \n            System.out.println( \"\\n******** Managed Repositories ********\" );\n            for( int i = 0; i < managedRepos.length; i++ )\n            {\n                System.out.println( \"=================================\" );\n                ManagedRepository managedRepo = new ManagedRepository(); \n                try\n                {   \n                    BeanUtils.populate( managedRepo, (Map)managedRepos[i] );\n                }\n                catch ( IllegalAccessException e )\n                {\n                    e.printStackTrace();\n                }\n                catch ( InvocationTargetException e )\n                {\n                    e.printStackTrace();\n                }\n                System.out.println( \"Id: \" + managedRepo.getId() );\n                System.out.println( \"Name: \" + managedRepo.getName() );\n                System.out.println( \"Layout: \" + managedRepo.getLayout() );\n                System.out.println( \"URL: \" + managedRepo.getUrl() );\n                System.out.println( \"Releases: \" + managedRepo.isReleases() );\n                System.out.println( \"Snapshots: \" + managedRepo.isSnapshots() );\n            }\n                        \n            /* remote repositories */\n            params = new Object[]{};\n            Object[] remoteRepos = (Object[])\n                 client.execute( \"AdministrationService.getAllRemoteRepositories\", params );\n            \n            System.out.println( \"\\n******** Remote Repositories ********\" );\n            for( int i = 0; i < remoteRepos.length; i++ )\n            {\n                System.out.println( \"=================================\" );\n                RemoteRepository remoteRepo = new RemoteRepository();\n                \n                try\n                {   \n                    BeanUtils.populate( remoteRepo, (Map) remoteRepos[i] );\n                }\n                catch ( IllegalAccessException e )\n                {\n                    e.printStackTrace();\n                }\n                catch ( InvocationTargetException e )\n                {\n                    e.printStackTrace();\n                }\n                System.out.println( \"Id: \" + remoteRepo.getId() );\n                System.out.println( \"Name: \" + remoteRepo.getName() );\n                System.out.println( \"Layout: \" + remoteRepo.getLayout() );\n                System.out.println( \"URL: \" + remoteRepo.getUrl() );                    \n            }\n            \n            /* repo consumers */\n            params = new Object[]{};\n            Object[] repoConsumers = (Object[])\n                 client.execute( \"AdministrationService.getAllRepositoryConsumers\", params );\n            \n            System.out.println( \"\\n******** Repository Consumers ********\" );\n            for( int i = 0; i < repoConsumers.length; i++ )\n            {   \n                System.out.println( repoConsumers[i] );                    \n            }\n            \n            /* db consumers */\n            params = new Object[]{};\n            Object[] dbConsumers = (Object[])\n                 client.execute( \"AdministrationService.getAllDatabaseConsumers\", params );\n            \n            System.out.println( \"\\n******** Database Consumers ********\" );\n            for( int i = 0; i < dbConsumers.length; i++ )\n            {   \n                System.out.println( dbConsumers[i] );                    \n            }\n            \n            /* configure repo consumer */\n            Object[] configureRepoConsumerParams = new Object[] { \"internal\", \"repository-purge\", true };            \n            Object configured = client.execute( \"AdministrationService.configureRepositoryConsumer\", configureRepoConsumerParams );            \n            System.out.println( \"\\nConfigured repo consumer 'repository-purge' : \" + ( ( Boolean ) configured ).booleanValue() );\n            \n            \n            /* configure db consumer */\n            Object[] configureDbConsumerParams = new Object[] { \"update-db-bytecode-stats\", false };            \n            configured = client.execute( \"AdministrationService.configureDatabaseConsumer\", configureDbConsumerParams );            \n            System.out.println( \"\\nConfigured db consumer 'update-db-bytecode-stats' : \" + ( ( Boolean ) configured ).booleanValue() );            \n            \n            \n            /* execute repo scanner */\n            Object[] executeRepoScanParams = new Object[] { \"internal\" };            \n            configured = client.execute( \"AdministrationService.executeRepositoryScanner\", executeRepoScanParams );            \n            System.out.println( \"\\nExecuted repo scanner of repository 'internal' : \" + ( ( Boolean ) configured ).booleanValue() );\n            \n            \n            /* execute db scanner */\n            Object[] executeDbScanParams = new Object[] {};            \n            configured = client.execute( \"AdministrationService.executeDatabaseScanner\", executeDbScanParams );\n            System.out.println( \"\\nExecuted database scanner : \" + ( ( Boolean ) configured ).booleanValue() );\n            \n            /* delete artifact */\n            /* \n             * NOTE: before enabling & invoking deleteArtifact, make sure that the repository and artifact exists first!            \n            Object[] deleteArtifactParams = new Object[] { \"internal\", \"javax.activation\", \"activation\", \"1.1\" };\n            Object artifactDeleted = client.execute( \"AdministrationService.deleteArtifact\", deleteArtifactParams );\n            System.out.println( \"\\nDeleted artifact 'javax.activation:activation:1.1' from repository 'internal' : \" +\n                ( (Boolean) artifactDeleted ).booleanValue() );    \n            */ \n        }\n        catch ( MalformedURLException e )\n        {\n            e.printStackTrace();\n        }\n        catch ( XmlRpcException e )\n        {\n            e.printStackTrace();\n        }           \n    }",
        "start_line": 57,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 192,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "main"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void setFileTypes( FileTypes fileTypes )\n    {\n        this.filetypes = fileTypes;\n    }",
        "start_line": 458,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 461,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setFileTypes"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/main/java/org/apache/archiva/web/xmlrpc/security/XmlRpcAuthenticator.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public boolean isAuthorized( XmlRpcRequest pRequest )\n\n        throws XmlRpcException\n\n    {   \n\n        if ( pRequest.getConfig() instanceof XmlRpcHttpRequestConfigImpl )\n\n        {\n\n            XmlRpcHttpRequestConfigImpl config = (XmlRpcHttpRequestConfigImpl) pRequest.getConfig();\n\n            SecuritySession session =\n\n                authenticate( new PasswordBasedAuthenticationDataSource( config.getBasicUserName(),\n\n                                                                         config.getBasicPassword() ) );\n\n            String method = pRequest.getMethodName();            \n\n            AuthorizationResult result = authorize( session, method );\n\n            \n\n            return result.isAuthorized();\n\n        }\n\n\n\n        throw new XmlRpcException( \"Unsupported transport (must be http)\" );\n\n    }",
        "start_line": 105,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 137,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "isAuthorized"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/main/java/org/apache/archiva/web/xmlrpc/security/XmlRpcAuthenticator.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private SecuritySession authenticate( PasswordBasedAuthenticationDataSource authenticationDataSource )\n\n        throws XmlRpcException\n\n    {\n\n        try\n\n        {\n\n            return securitySystem.authenticate( authenticationDataSource );\n\n        }\n\n        catch ( AccountLockedException e )\n\n        {\n\n            throw new XmlRpcException( 401, e.getMessage(), e );\n\n        }\n\n        catch ( AuthenticationException e )\n\n        {\n\n            throw new XmlRpcException( 401, e.getMessage(), e );\n\n        }\n\n        catch ( UserNotFoundException e )\n\n        {\n\n            throw new XmlRpcException( 401, e.getMessage(), e );\n\n        }\n\n    }",
        "start_line": 141,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 179,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "authenticate"
    },
    {
        "path": "archiva-modules/archiva-web/archiva-xmlrpc/archiva-xmlrpc-security/src/main/java/org/apache/archiva/web/xmlrpc/security/XmlRpcAuthenticator.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    private AuthorizationResult authorize( SecuritySession session, String methodName )\n\n        throws XmlRpcException\n\n    {   \n\n        try\n\n        {     \n\n            // sample attempt at simplifying authorization checking of requested service method\n\n            // TODO test with a sample client to see if this would work!\n\n            if ( ServiceMethodsPermissionsMapping.SERVICE_METHODS_FOR_OPERATION_MANAGE_CONFIGURATION.contains( methodName ) )\n\n            {                \n\n                return securitySystem.authorize( session, ArchivaRoleConstants.OPERATION_MANAGE_CONFIGURATION );\n\n            }\n\n            else if ( ServiceMethodsPermissionsMapping.SERVICE_METHODS_FOR_OPERATION_RUN_INDEXER.contains( methodName ) )\n\n            {                \n\n                return securitySystem.authorize( session, ArchivaRoleConstants.OPERATION_RUN_INDEXER );\n\n            }\n\n            else\n\n            {\n\n                return securitySystem.authorize( session, ArchivaRoleConstants.GLOBAL_REPOSITORY_MANAGER_ROLE );\n\n            }\n\n        }\n\n        catch ( AuthorizationException e )\n\n        {\n\n            throw new XmlRpcException( 401, e.getMessage(), e );\n\n        }\n\n    }",
        "start_line": 183,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 231,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "authorize"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testQueryAllVersionsOfArtifactAcrossRepos() throws Exception\n    {        \n        populateDb();\n        assertConstraint( \"Artifacts By Repository\", 3, \n                          new ArtifactVersionsConstraint( null, \"org.apache.archiva\", \"artifact-one\", true ) );\n    }    ",
        "start_line": 86,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 91,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testQueryAllVersionsOfArtifactAcrossRepos"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": false,
        "code": "    public void testQueryAllVersionsOfArtifactInARepo() throws Exception\n    {\n        populateDb();\n        assertConstraint( \"Artifacts By Repository\", 2, \n                          new ArtifactVersionsConstraint( TEST_REPO, \"org.apache.archiva\", \"artifact-one\", true ) );\n    }",
        "start_line": 93,
        "changed": true,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 98,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testQueryAllVersionsOfArtifactInARepo"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/AbstractLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public ArtifactReference toArtifactReference( String path )\n        throws LayoutException\n    {\n        return legacyPathParser.toArtifactReference( path );\n    }",
        "start_line": 58,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 62,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toArtifactReference"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/AbstractLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String toPath( ArchivaArtifact reference )\n    {\n        if ( reference == null )\n        {\n            throw new IllegalArgumentException( \"Artifact reference cannot be null\" );\n        }\n\n        return toPath( reference.getGroupId(), reference.getArtifactId(), reference.getVersion(), reference\n            .getClassifier(), reference.getType() );\n    }",
        "start_line": 64,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 73,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toPath"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/AbstractLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String toPath( ArtifactReference reference )\n    {\n        if ( reference == null )\n        {\n            throw new IllegalArgumentException( \"Artifact reference cannot be null\" );\n        }\n\n        return toPath( reference.getGroupId(), reference.getArtifactId(), reference.getVersion(), reference\n            .getClassifier(), reference.getType() );\n    }",
        "start_line": 75,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 84,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toPath"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/AbstractLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private String toPath( String groupId, String artifactId, String version, String classifier, String type )\n    {\n        StringBuffer path = new StringBuffer();\n\n        path.append( groupId ).append( PATH_SEPARATOR );\n        path.append( getDirectory( classifier, type ) ).append( PATH_SEPARATOR );\n\n        if ( version != null )\n        {\n            path.append( artifactId ).append( '-' ).append( version );\n\n            if ( StringUtils.isNotBlank( classifier ) )\n            {\n                path.append( '-' ).append( classifier );\n            }\n\n            path.append( '.' ).append( ArtifactExtensionMapping.getExtension( type ) );\n        }\n\n        return path.toString();\n    }",
        "start_line": 86,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 106,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toPath"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/AbstractLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private String getDirectory( String classifier, String type )\n    {\n        String dirname = (String) typeToDirectoryMap.get( type );\n\n        if ( dirname != null )\n        {\n            return dirname + \"s\";\n        }\n\n        // Default process.\n        return type + \"s\";\n    }",
        "start_line": 108,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 119,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getDirectory"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public void setUp()\n        throws Exception\n    {\n        super.setUp();\n        \n        ArchivaDAO dao = (ArchivaDAO) lookup( ArchivaDAO.ROLE, \"jdo\" );\n        artifactDao = dao.getArtifactDAO();\n    }",
        "start_line": 44,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 51,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setUp"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private ArchivaArtifact createArtifact( String groupId, String artifactId, String version )\n    {\n        ArchivaArtifact artifact = artifactDao.createArtifact( groupId, artifactId, version, null, \"jar\" );\n        artifact.getModel().setLastModified( new Date() );\n        artifact.getModel().setRepositoryId( TEST_REPO );\n\n        return artifact;\n    }",
        "start_line": 53,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 60,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "createArtifact"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void populateDb()\n        throws Exception\n    {\n        Date whenGathered = Calendar.getInstance().getTime();\n        whenGathered.setTime( 123456789 );\n\n        ArchivaArtifact artifact = createArtifact( \"org.apache.archiva\", \"artifact-one\", \"1.0\" );\n        artifact.getModel().setWhenGathered( null );\n        artifactDao.saveArtifact( artifact );\n\n        artifact = createArtifact( \"org.apache.archiva\", \"artifact-one\", \"1.0.1\" );\n        artifact.getModel().setWhenGathered( whenGathered );\n        artifactDao.saveArtifact( artifact );\n\n        artifact = createArtifact( \"org.apache.archiva\", \"artifact-one\", \"1.0.2\" );\n        artifact.getModel().setWhenGathered( whenGathered );\n        artifactDao.saveArtifact( artifact );\n\n        artifact = createArtifact( \"org.apache.archiva\", \"artifact-one\", \"2.0\" );\n        artifact.getModel().setRepositoryId( \"different-repo\" );\n        artifact.getModel().setWhenGathered( whenGathered );\n        artifactDao.saveArtifact( artifact );\n    }",
        "start_line": 62,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 84,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "populateDb"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public void testQueryAllVersionsOfArtifactAcrossRepos() throws Exception\n    {        \n        populateDb();\n        assertConstraint( \"Artifacts By Repository\", 3, \n                          new ArtifactVersionsConstraint( null, \"org.apache.archiva\", \"artifact-one\" ) );\n    }    ",
        "start_line": 86,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 91,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testQueryAllVersionsOfArtifactAcrossRepos"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public void testQueryAllVersionsOfArtifactInARepo() throws Exception\n    {\n        populateDb();\n        assertConstraint( \"Artifacts By Repository\", 2, \n                          new ArtifactVersionsConstraint( TEST_REPO, \"org.apache.archiva\", \"artifact-one\" ) );\n    }",
        "start_line": 93,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 98,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "testQueryAllVersionsOfArtifactInARepo"
    },
    {
        "path": "archiva-modules/archiva-database/src/test/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraintTest.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void assertConstraint( String msg, int count, ArtifactVersionsConstraint constraint )\n        throws Exception\n    {\n        List<ArchivaArtifact> results = artifactDao.queryArtifacts( constraint );\n        assertNotNull( msg + \": Not Null\", results );\n        assertEquals( msg + \": Results.size\", count, results.size() );\n    }",
        "start_line": 100,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 106,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "assertConstraint"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public void deleteVersion( VersionedReference reference )\n        throws ContentNotFoundException\n    {\n        String path = toMetadataPath( reference );\n        File projectPath = new File( getRepoRoot(), path );\n        \n        File projectDir = projectPath.getParentFile();\n        if( projectDir.exists() && projectDir.isDirectory() )\n        {\n            try\n            {\n                FileUtils.deleteDirectory( projectDir );\n            }\n            catch ( IOException e )\n            {\n                // TODO: log this somewhere?\n            }\n        }\n    }",
        "start_line": 63,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 81,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "deleteVersion"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String getId()\n    {\n        return repository.getId();\n    }",
        "start_line": 83,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 86,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getId"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public Set<ArtifactReference> getRelatedArtifacts( ArtifactReference reference )\n        throws ContentNotFoundException, LayoutException\n    {\n        File artifactFile = toFile( reference );\n        File repoDir = artifactFile.getParentFile();\n\n        if ( !repoDir.exists() )\n        {\n            throw new ContentNotFoundException( \"Unable to get related artifacts using a non-existant directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        if ( !repoDir.isDirectory() )\n        {\n            throw new ContentNotFoundException( \"Unable to get related artifacts using a non-directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        Set<ArtifactReference> foundArtifacts = new HashSet<ArtifactReference>();\n\n        // First gather up the versions found as artifacts in the managed repository.\n        File repoFiles[] = repoDir.listFiles();\n        for ( int i = 0; i < repoFiles.length; i++ )\n        {\n            if ( repoFiles[i].isDirectory() )\n            {\n                // Skip it. it's a directory.\n                continue;\n            }\n\n            String relativePath = PathUtil.getRelative( repository.getLocation(), repoFiles[i] );\n\n            if ( filetypes.matchesArtifactPattern( relativePath ) )\n            {\n                ArtifactReference artifact = toArtifactReference( relativePath );\n                \n                // Test for related, groupId / artifactId / version must match.\n                if ( artifact.getGroupId().equals( reference.getGroupId() )\n                    && artifact.getArtifactId().equals( reference.getArtifactId() )\n                    && artifact.getVersion().equals( reference.getVersion() ) )\n                {\n                    foundArtifacts.add( artifact );\n                }\n            }\n        }\n\n        return foundArtifacts;\n    }",
        "start_line": 88,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 135,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getRelatedArtifacts"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String getRepoRoot()\n    {\n        return repository.getLocation();\n    }",
        "start_line": 137,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 140,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getRepoRoot"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public ManagedRepositoryConfiguration getRepository()\n    {\n        return repository;\n    }",
        "start_line": 142,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 145,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getRepository"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    /**\n     * Gather the Available Versions (on disk) for a specific Project Reference, based on filesystem\n     * information.\n     *\n     * @return the Set of available versions, based on the project reference.\n     * @throws LayoutException \n     * @throws LayoutException\n     */\n    public Set<String> getVersions( ProjectReference reference )\n        throws ContentNotFoundException, LayoutException\n    {\n        String path = toMetadataPath( reference );\n\n        int idx = path.lastIndexOf( '/' );\n        if ( idx > 0 )\n        {\n            path = path.substring( 0, idx );\n        }\n\n        File repoDir = new File( repository.getLocation(), path );\n\n        if ( !repoDir.exists() )\n        {\n            throw new ContentNotFoundException( \"Unable to get Versions on a non-existant directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        if ( !repoDir.isDirectory() )\n        {\n            throw new ContentNotFoundException( \"Unable to get Versions on a non-directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        Set<String> foundVersions = new HashSet<String>();\n        VersionedReference versionRef = new VersionedReference();\n        versionRef.setGroupId( reference.getGroupId() );\n        versionRef.setArtifactId( reference.getArtifactId() );\n\n        File repoFiles[] = repoDir.listFiles();\n        for ( int i = 0; i < repoFiles.length; i++ )\n        {\n            if ( !repoFiles[i].isDirectory() )\n            {\n                // Skip it. not a directory.\n                continue;\n            }\n\n            // Test if dir has an artifact, which proves to us that it is a valid version directory.\n            String version = repoFiles[i].getName();\n            versionRef.setVersion( version );\n\n            if ( hasArtifact( versionRef ) )\n            {\n                // Found an artifact, must be a valid version.\n                foundVersions.add( version );\n            }\n        }\n\n        return foundVersions;\n    }",
        "start_line": 147,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 206,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getVersions"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public Set<String> getVersions( VersionedReference reference )\n        throws ContentNotFoundException, LayoutException\n    {\n        String path = toMetadataPath( reference );\n\n        int idx = path.lastIndexOf( '/' );\n        if ( idx > 0 )\n        {\n            path = path.substring( 0, idx );\n        }\n\n        File repoDir = new File( repository.getLocation(), path );\n\n        if ( !repoDir.exists() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions on a non-existant directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        if ( !repoDir.isDirectory() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions on a non-directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        Set<String> foundVersions = new HashSet<String>();\n\n        // First gather up the versions found as artifacts in the managed repository.\n        File repoFiles[] = repoDir.listFiles();\n        for ( int i = 0; i < repoFiles.length; i++ )\n        {\n            if ( repoFiles[i].isDirectory() )\n            {\n                // Skip it. it's a directory.\n                continue;\n            }\n\n            String relativePath = PathUtil.getRelative( repository.getLocation(), repoFiles[i] );\n\n            if ( filetypes.matchesDefaultExclusions( relativePath ) )\n            {\n                // Skip it, it's metadata or similar\n                continue;\n            }\n\n            if ( filetypes.matchesArtifactPattern( relativePath ) )\n            {\n                ArtifactReference artifact = toArtifactReference( relativePath );\n\n                foundVersions.add( artifact.getVersion() );\n            }\n        }\n\n        return foundVersions;\n    }",
        "start_line": 208,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 262,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getVersions"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public boolean hasContent( ArtifactReference reference )\n    {\n        File artifactFile = toFile( reference );\n        return artifactFile.exists() && artifactFile.isFile();\n    }",
        "start_line": 264,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 268,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "hasContent"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public boolean hasContent( ProjectReference reference )\n    {\n        try\n        {\n            Set<String> versions = getVersions( reference );\n            return !versions.isEmpty();\n        }\n        catch ( ContentNotFoundException e )\n        {\n            return false;\n        }\n        catch ( LayoutException e )\n        {\n            return false;\n        }\n    }",
        "start_line": 270,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 285,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "hasContent"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public boolean hasContent( VersionedReference reference )\n    {\n        try\n        {\n            return ( getFirstArtifact( reference ) != null );\n        }\n        catch ( IOException e )\n        {\n            return false;\n        }\n        catch ( LayoutException e )\n        {\n            return false;\n        }\n    }",
        "start_line": 287,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 301,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "hasContent"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public void setRepository( ManagedRepositoryConfiguration repository )\n    {\n        this.repository = repository;\n    }",
        "start_line": 303,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 306,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "setRepository"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    /**\n     * Convert a path to an artifact reference.\n     * \n     * @param path the path to convert. (relative or full location path)\n     * @throws LayoutException if the path cannot be converted to an artifact reference.\n     */\n    @Override\n    public ArtifactReference toArtifactReference( String path )\n        throws LayoutException\n    {\n        if ( ( path != null ) && path.startsWith( repository.getLocation() ) )\n        {\n            return super.toArtifactReference( path.substring( repository.getLocation().length() ) );\n        }\n\n        return super.toArtifactReference( path );\n    }",
        "start_line": 308,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 324,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toArtifactReference"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public File toFile( ArtifactReference reference )\n    {\n        return new File( repository.getLocation(), toPath( reference ) );\n    }",
        "start_line": 326,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 329,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toFile"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public File toFile( ArchivaArtifact reference )\n    {\n        return new File( repository.getLocation(), toPath( reference ) );\n    }",
        "start_line": 331,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 334,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toFile"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    /**\n     * Get the first Artifact found in the provided VersionedReference location.\n     *\n     * @param managedRepository the repository to search within.\n     * @param reference         the reference to the versioned reference to search within\n     * @return the ArtifactReference to the first artifact located within the versioned reference. or null if\n     *         no artifact was found within the versioned reference.\n     * @throws IOException     if the versioned reference is invalid (example: doesn't exist, or isn't a directory)\n     * @throws LayoutException\n     */\n    private ArtifactReference getFirstArtifact( VersionedReference reference )\n        throws LayoutException, IOException\n    {\n        String path = toMetadataPath( reference );\n\n        int idx = path.lastIndexOf( '/' );\n        if ( idx > 0 )\n        {\n            path = path.substring( 0, idx );\n        }\n\n        File repoDir = new File( repository.getLocation(), path );\n\n        if ( !repoDir.exists() )\n        {\n            throw new IOException( \"Unable to gather the list of snapshot versions on a non-existant directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        if ( !repoDir.isDirectory() )\n        {\n            throw new IOException( \"Unable to gather the list of snapshot versions on a non-directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        File repoFiles[] = repoDir.listFiles();\n        for ( int i = 0; i < repoFiles.length; i++ )\n        {\n            if ( repoFiles[i].isDirectory() )\n            {\n                // Skip it. it's a directory.\n                continue;\n            }\n\n            String relativePath = PathUtil.getRelative( repository.getLocation(), repoFiles[i] );\n\n            if ( filetypes.matchesArtifactPattern( relativePath ) )\n            {\n                ArtifactReference artifact = toArtifactReference( relativePath );\n\n                return artifact;\n            }\n        }\n\n        // No artifact was found.\n        return null;\n    }",
        "start_line": 336,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 392,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getFirstArtifact"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedDefaultRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private boolean hasArtifact( VersionedReference reference )\n        throws LayoutException\n    {\n        try\n        {\n            return ( getFirstArtifact( reference ) != null );\n        }\n        catch ( IOException e )\n        {\n            return false;\n        }\n    }",
        "start_line": 394,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 405,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "hasArtifact"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-xml-tools/src/test/java/org/apache/maven/archiva/xml/AbstractArchivaXmlTestCase.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    protected File getExampleXml( String filename )\n    {\n        File examplesDir = new File( \"src/test/examples\" );\n        if ( !examplesDir.exists() )\n        {\n            fail( \"Missing the examples directory: \" + examplesDir.getAbsolutePath() );\n        }\n        File exampleFile = new File( examplesDir, filename );\n        if ( !exampleFile.exists() )\n        {\n            fail( \"Missing the example xml file: \" + exampleFile.getAbsolutePath() );\n        }\n        return exampleFile;\n    }",
        "start_line": 40,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 53,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getExampleXml"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public void deleteVersion( VersionedReference reference )\n        throws ContentNotFoundException\n    {\n        File groupDir = new File( repository.getLocation(), reference.getGroupId() );\n\n        if ( !groupDir.exists() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions using a non-existant groupId directory: \"\n                + groupDir.getAbsolutePath() );\n        }\n\n        if ( !groupDir.isDirectory() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions using a non-directory: \"\n                + groupDir.getAbsolutePath() );\n        }\n\n        // First gather up the versions found as artifacts in the managed repository.\n        File typeDirs[] = groupDir.listFiles();\n        for ( File typeDir : typeDirs )\n        {\n            if ( !typeDir.isDirectory() )\n            {\n                // Skip it, we only care about directories.\n                continue;\n            }\n\n            if ( !typeDir.getName().endsWith( \"s\" ) )\n            {\n                // Skip it, we only care about directories that end in \"s\".\n            }\n\n            deleteVersions( typeDir, reference );\n        }\n    }",
        "start_line": 63,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 97,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "deleteVersion"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void deleteVersions( File typeDir, VersionedReference reference )\n    {\n        File repoFiles[] = typeDir.listFiles();\n        for ( File repoFile : repoFiles )\n        {\n            if ( repoFile.isDirectory() )\n            {\n                // Skip it. it's a directory.\n                continue;\n            }\n\n            String relativePath = PathUtil.getRelative( repository.getLocation(), repoFile );\n\n            if ( filetypes.matchesArtifactPattern( relativePath ) )\n            {\n                try\n                {\n                    ArtifactReference artifact = toArtifactReference( relativePath );\n                    if ( StringUtils.equals( artifact.getArtifactId(), reference.getArtifactId() )\n                        && StringUtils.equals( artifact.getVersion(), reference.getVersion() ) )\n                    {\n                        repoFile.delete();\n                        deleteSupportFiles( repoFile );\n                    }\n                }\n                catch ( LayoutException e )\n                {\n                    /* don't fail the process if there is a bad artifact within the directory. */\n                }\n            }\n        }\n    }",
        "start_line": 99,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 130,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "deleteVersions"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void deleteSupportFiles( File repoFile )\n    {\n        deleteSupportFile( repoFile, \".sha1\" );\n        deleteSupportFile( repoFile, \".md5\" );\n        deleteSupportFile( repoFile, \".asc\" );\n        deleteSupportFile( repoFile, \".gpg\" );\n    }",
        "start_line": 132,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 138,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "deleteSupportFiles"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void deleteSupportFile( File repoFile, String supportExtension )\n    {\n        File supportFile = new File( repoFile.getAbsolutePath() + supportExtension );\n        if ( supportFile.exists() && supportFile.isFile() )\n        {\n            supportFile.delete();\n        }\n    }",
        "start_line": 140,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 147,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "deleteSupportFile"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public Set<ArtifactReference> getRelatedArtifacts( ArtifactReference reference )\n        throws ContentNotFoundException, LayoutException\n    {\n        File artifactFile = toFile( reference );\n        File repoDir = artifactFile.getParentFile();\n\n        if ( !repoDir.exists() )\n        {\n            throw new ContentNotFoundException( \"Unable to get related artifacts using a non-existant directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        if ( !repoDir.isDirectory() )\n        {\n            throw new ContentNotFoundException( \"Unable to get related artifacts using a non-directory: \"\n                + repoDir.getAbsolutePath() );\n        }\n\n        Set<ArtifactReference> foundArtifacts = new HashSet<ArtifactReference>();\n\n        // First gather up the versions found as artifacts in the managed repository.\n        File projectParentDir = repoDir.getParentFile();\n        File typeDirs[] = projectParentDir.listFiles();\n        for ( File typeDir : typeDirs )\n        {\n            if ( !typeDir.isDirectory() )\n            {\n                // Skip it, we only care about directories.\n                continue;\n            }\n\n            if ( !typeDir.getName().endsWith( \"s\" ) )\n            {\n                // Skip it, we only care about directories that end in \"s\".\n            }\n\n            getRelatedArtifacts( typeDir, reference, foundArtifacts );\n        }\n\n        return foundArtifacts;\n    }",
        "start_line": 154,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 194,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getRelatedArtifacts"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public Set<String> getVersions( ProjectReference reference )\n        throws ContentNotFoundException\n    {\n        File groupDir = new File( repository.getLocation(), reference.getGroupId() );\n\n        if ( !groupDir.exists() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions using a non-existant groupId directory: \"\n                + groupDir.getAbsolutePath() );\n        }\n\n        if ( !groupDir.isDirectory() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions using a non-directory: \"\n                + groupDir.getAbsolutePath() );\n        }\n\n        Set<String> foundVersions = new HashSet<String>();\n\n        // First gather up the versions found as artifacts in the managed repository.\n        File typeDirs[] = groupDir.listFiles();\n        for ( File typeDir : typeDirs )\n        {\n            if ( !typeDir.isDirectory() )\n            {\n                // Skip it, we only care about directories.\n                continue;\n            }\n\n            if ( !typeDir.getName().endsWith( \"s\" ) )\n            {\n                // Skip it, we only care about directories that end in \"s\".\n            }\n\n            getProjectVersions( typeDir, reference, foundVersions );\n        }\n\n        return foundVersions;\n    }",
        "start_line": 206,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 244,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getVersions"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public Set<String> getVersions( VersionedReference reference )\n        throws ContentNotFoundException\n    {\n        File groupDir = new File( repository.getLocation(), reference.getGroupId() );\n\n        if ( !groupDir.exists() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions using a non-existant groupId directory: \"\n                + groupDir.getAbsolutePath() );\n        }\n\n        if ( !groupDir.isDirectory() )\n        {\n            throw new ContentNotFoundException( \"Unable to get versions using a non-directory: \"\n                + groupDir.getAbsolutePath() );\n        }\n\n        Set<String> foundVersions = new HashSet<String>();\n\n        // First gather up the versions found as artifacts in the managed repository.\n        File typeDirs[] = groupDir.listFiles();\n        for ( File typeDir : typeDirs )\n        {\n            if ( !typeDir.isDirectory() )\n            {\n                // Skip it, we only care about directories.\n                continue;\n            }\n\n            if ( !typeDir.getName().endsWith( \"s\" ) )\n            {\n                // Skip it, we only care about directories that end in \"s\".\n            }\n\n            getVersionedVersions( typeDir, reference, foundVersions );\n        }\n\n        return foundVersions;\n    }",
        "start_line": 246,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 284,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getVersions"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public boolean hasContent( ProjectReference reference )\n    {\n        try\n        {\n            Set<String> versions = getVersions( reference );\n            return CollectionUtils.isNotEmpty( versions );\n        }\n        catch ( ContentNotFoundException e )\n        {\n            return false;\n        }\n    }",
        "start_line": 292,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 303,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "hasContent"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public boolean hasContent( VersionedReference reference )\n    {\n        try\n        {\n            Set<String> versions = getVersions( reference );\n            return CollectionUtils.isNotEmpty( versions );\n        }\n        catch ( ContentNotFoundException e )\n        {\n            return false;\n        }\n    }",
        "start_line": 305,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 316,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "hasContent"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String toMetadataPath( ProjectReference reference )\n    {\n        // No metadata present in legacy repository.\n        return null;\n    }",
        "start_line": 351,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 355,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toMetadataPath"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String toMetadataPath( VersionedReference reference )\n    {\n        // No metadata present in legacy repository.\n        return null;\n    }",
        "start_line": 357,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 361,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "toMetadataPath"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void getProjectVersions( File typeDir, ProjectReference reference, Set<String> foundVersions )\n    {\n        File repoFiles[] = typeDir.listFiles();\n        for ( File repoFile : repoFiles )\n        {\n            if ( repoFile.isDirectory() )\n            {\n                // Skip it. it's a directory.\n                continue;\n            }\n\n            String relativePath = PathUtil.getRelative( repository.getLocation(), repoFile );\n\n            if ( filetypes.matchesArtifactPattern( relativePath ) )\n            {\n                try\n                {\n                    ArtifactReference artifact = toArtifactReference( relativePath );\n                    if ( StringUtils.equals( artifact.getArtifactId(), reference.getArtifactId() ) )\n                    {\n                        foundVersions.add( artifact.getVersion() );\n                    }\n                }\n                catch ( LayoutException e )\n                {\n                    /* don't fail the process if there is a bad artifact within the directory. */\n                }\n            }\n        }\n    }",
        "start_line": 363,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 392,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getProjectVersions"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void getRelatedArtifacts( File typeDir, ArtifactReference reference, Set<ArtifactReference> foundArtifacts )\n    {\n        File repoFiles[] = typeDir.listFiles();\n        for ( int i = 0; i < repoFiles.length; i++ )\n        {\n            if ( repoFiles[i].isDirectory() )\n            {\n                // Skip it. it's a directory.\n                continue;\n            }\n\n            String relativePath = PathUtil.getRelative( repository.getLocation(), repoFiles[i] );\n\n            if ( filetypes.matchesArtifactPattern( relativePath ) )\n            {\n                try\n                {\n                    ArtifactReference artifact = toArtifactReference( relativePath );\n                    if ( StringUtils.equals( artifact.getArtifactId(), reference.getArtifactId() )\n                        && artifact.getVersion().startsWith( reference.getVersion() ) )\n                    {\n                        foundArtifacts.add( artifact );\n                    }\n                }\n                catch ( LayoutException e )\n                {\n                    /* don't fail the process if there is a bad artifact within the directory. */\n                }\n            }\n        }\n    }",
        "start_line": 394,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 424,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getRelatedArtifacts"
    },
    {
        "path": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ManagedLegacyRepositoryContent.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    private void getVersionedVersions( File typeDir, VersionedReference reference, Set<String> foundVersions )\n    {\n        File repoFiles[] = typeDir.listFiles();\n        for ( int i = 0; i < repoFiles.length; i++ )\n        {\n            if ( repoFiles[i].isDirectory() )\n            {\n                // Skip it. it's a directory.\n                continue;\n            }\n\n            String relativePath = PathUtil.getRelative( repository.getLocation(), repoFiles[i] );\n\n            if ( filetypes.matchesArtifactPattern( relativePath ) )\n            {\n                try\n                {\n                    ArtifactReference artifact = toArtifactReference( relativePath );\n                    if ( StringUtils.equals( artifact.getArtifactId(), reference.getArtifactId() )\n                        && artifact.getVersion().startsWith( reference.getVersion() ) )\n                    {\n                        foundVersions.add( artifact.getVersion() );\n                    }\n                }\n                catch ( LayoutException e )\n                {\n                    /* don't fail the process if there is a bad artifact within the directory. */\n                }\n            }\n        }\n    }",
        "start_line": 426,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 456,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getVersionedVersions"
    },
    {
        "path": "archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraint.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String getSortColumn()\n    {        \n        return sortColumn;\n    }",
        "start_line": 61,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 64,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getSortColumn"
    },
    {
        "path": "archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/constraints/ArtifactVersionsConstraint.java",
        "summary": "web service interface",
        "parent": true,
        "code": "    public String getWhereCondition()\n    {        \n        return whereClause;\n    }",
        "start_line": 66,
        "changed": false,
        "commit": "c303ba78c70a220c54b0501bf5239f5870d03ad9",
        "end_line": 69,
        "issue": "MRM-124",
        "description": "this needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "nl_input": "web service interface\nthis needs a new jira component.\n\nWe need a comprehensive web services interface to the application. Like RSS, it should be a new view on the same actions. The more we can derive that from the repository-core interfaces, the better.\nThis should include administration and security.\n\n",
        "method_name": "getWhereCondition"
    }
]